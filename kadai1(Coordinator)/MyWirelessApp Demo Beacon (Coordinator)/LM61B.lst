*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /************************************************************************************
    2:  * This is the source file for the temperature sensor LM61B from the SRB board.
    3:  *
    4:  *
    5:  * (c) Copyright 2006, Freescale, Inc.  All rights reserved.
    6:  *
    7:  *
    8:  * No part of this document must be reproduced in any form - including copied,
    9:  * transcribed, printed or by any electronic means - without specific written
   10:  * permission from Freescale Semiconductor.
   11:  *
   12:  ******************************************************************************/
   13:  #include "IoConfig.h"
   14:  #include "LM61B.h"  
   15:  #include "AppToPlatformConfig.h"
   16:  /******************************************************************************
   17:  *******************************************************************************
   18:  * Private macros
   19:  *******************************************************************************
   20:  ******************************************************************************/
   21:  
   22:  /* 
   23:     ATD functionality - on, 
   24:     result register data is right justified,
   25:     10-bit resolution selected,
   26:     result register data is unsigned.
   27:  */
   28:  #define ATDC_CFG 0xC0
   29:  
   30:  /* 
   31:     disable interrupt, 
   32:     single conversion mode, 
   33:     channel number 6
   34:  */
   35:  #define ATDSC_CFG 0x06
   36:  
   37:  /* 
   38:     mask for Conversion Complete Flag
   39:  */
   40:  #define MASK_CCF 0x80
   41:  
   42:  /* 
   43:     the exception value for the read temperature when the target is not SRB
   44:  */
   45:  #define EXCEPTIONVALUE 125
   46:  
   47:  /******************************************************************************
   48:  *******************************************************************************
   49:  * Private prototypes
   50:  *******************************************************************************
   51:  ******************************************************************************/
   52:  static uint16_t ReadRawTemperature( void );
   53:  
   54:  /******************************************************************************
   55:  *******************************************************************************
   56:  * Private type definitions
   57:  *******************************************************************************
   58:  ******************************************************************************/
   59:  /*None*/
   60:  
   61:  /******************************************************************************
   62:  *******************************************************************************
   63:  * Private memory declarations
   64:  *******************************************************************************
   65:  ******************************************************************************/
   66:  
   67:  
   68:  /******************************************************************************
   69:  *******************************************************************************
   70:  * Public functions
   71:  *******************************************************************************/
   72:  /******************************************************************************
   73:  * This function initialize the ADC
   74:  *
   75:  * Interface assumptions:
   76:  *
   77:  *
   78:  * Return value:
   79:  * None
   80:  *
   81:  ******************************************************************************/
   82:  #if gTargetMC13213SRB_d
   83:  void ADC_Init(void)
   84:  {
   85:      /* Initialize the ADC port */
   86:  	ATDPE = TempSensorAdcPort_c;        /* enable desired ADC channel */
   87:  	ATDC  = ATDC_PRESC | ATDC_CFG_c;		/* set factor to 16 */                           
   88:  }
   89:  #else
   90:  void ADC_Init(void)
   91:  {
   92:  }
  0000 8d       [7]             RTC   
   93:  #endif /* gTargetMC13213SRB_d */
   94:  
   95:  #if gTargetMC13213SRB_d
   96:  static uint16_t ReadRawTemperature( void )
   97:  {
   98:     /* configure and start converting */
   99:     ATDSC = ATDSC_CFG_c;	
  100:  	/* wait until conversion is finished */
  101:  	while((ATDSC & Mask_CCF_c) == 0){}
  102:  	/* read the conversion result */
  103:  	return( (uint16_t)(ATDRL) | (uint16_t)(((uint16_t)((ATDRH)&0x03))<<8));
  104:  }
  105:  #endif
  106:  /******************************************************************************
  107:  * This function computes the temperature read from the LM61B sensor.
  108:  *
  109:  * Interface assumptions:
  110:  *
  111:  *
  112:  * Return value: [-25..85] Celsius Degrees or 125 when the defult target is different of MC13213 SRB
  113:  * None
  114:  *
  115:  ******************************************************************************/
  116:  #if gTargetMC13213SRB_d
  117:  int8_t ReadTemperature( void )
  118:  {
  119:  
  120:  uint16_t milliVolts;
  121:  uint16_t AdcValue;
  122:  
  123:  AdcValue = ReadRawTemperature();
  124:  
  125:  /* 1LSB = (VREFH - VREFL) / 2^10 */
  126:  /* 1LSB = 3.2mV/bit */
  127:  
  128:    milliVolts = (AdcValue) * 3;
  129:  /* Convert milliVolts to Celsius */
  130:  #if TemperatureCompensation_c == 0
  131:   return((int8_t)((milliVolts - TempSensormilliVoltOffset_c)/milliVoltPerDegree_c));
  132:  #else
  133:  return((int8_t)((milliVolts - TempSensormilliVoltOffset_c)/milliVoltPerDegree_c) + TemperatureCompensation_c);
  134:  #endif  
  135:  }
  136:  #else
  137:  int8_t ReadTemperature( void )
  138:  {
  139:     return Exceptionvalue_c;
  0000 a67d     [2]             LDA   #125
  140:  }
  0002 8d       [7]             RTC   
  141:  
  142:  #endif /* gTargetMC13213SRB_d */
  143:  
