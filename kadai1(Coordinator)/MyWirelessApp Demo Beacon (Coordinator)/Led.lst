*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /************************************************************************************
    2:  * This is the source file for LED Driver.
    3:  *
    4:  * (c) Copyright 2006, Freescale, Inc.  All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor.
   10:  *
   11:  ************************************************************************************/
   12:  
   13:  #include "TMR_Interface.h"
   14:  #include "IoConfig.h"
   15:  #include "AppToPlatformConfig.h"
   16:  #include "LED.h"
   17:  
   18:  #if (gLEDSupported_d)
   19:  
   20:  /******************************************************************************
   21:  *******************************************************************************
   22:  * Public Macros
   23:  *******************************************************************************
   24:  ******************************************************************************/
   25:  
   26:  /*None*/
   27:  
   28:  /******************************************************************************
   29:  *******************************************************************************
   30:  * Private prototypes
   31:  *******************************************************************************
   32:  ******************************************************************************/
   33:  STATIC void LED_FlashTimeout(uint8_t timerId);
   34:  STATIC void LED_ExitSerialFlash(void);
   35:  #if gLEDBlipEnabled_d
   36:  STATIC void LED_DecrementBlip(void);
   37:  #endif
   38:  
   39:  /******************************************************************************
   40:  *******************************************************************************
   41:  * Private type definitions
   42:  *******************************************************************************
   43:  ******************************************************************************/
   44:  
   45:  /******************************************************************************
   46:  *******************************************************************************
   47:  * Private Memory Declarations
   48:  *******************************************************************************
   49:  ******************************************************************************/
   50:  
   51:  STATIC bool_t mfLedInSerialMode;      /* doing serial lights */
   52:  STATIC uint8_t mLedFlashingLEDs = 0;  /* flashing LEDs */
   53:  STATIC tmrTimerID_t mLEDTimerID = gTmrInvalidTimerID_c;
   54:  #if gLEDBlipEnabled_d
   55:  STATIC uint8_t mLedBlips[4];          /* enough for 4 LEDs to blip once */
   56:  #endif
   57:  
   58:  /******************************************************************************
   59:  *******************************************************************************
   60:  * Public functions
   61:  *******************************************************************************
   62:  ******************************************************************************/
   63:  
   64:  /******************************************************************************
   65:  * LED_Init
   66:  *
   67:  * Initialize the LED system.
   68:  *******************************************************************************/
   69:  void LED_Init(void)
   70:  {
   71:    /* allocate a timer for use in flashing LEDs */
   72:    mLEDTimerID = TMR_AllocateTimer();
  0000 ac000000 [8]             CALL  TMR_AllocateTimer
  0004 c70000   [4]             STA   mLEDTimerID
   73:    LED_TurnOffAllLeds();
  0007 ac000000 [8]             CALL  LED_TurnOffAllLeds
   74:  }
  000b 8d       [7]             RTC   
   75:  
   76:  /******************************************************************************
   77:  * LED_ToggleLed
   78:  *
   79:  * Toggles on or more LEDs. Doesn't check/affect flashing states.
   80:  *******************************************************************************/
   81:  void LED_ToggleLed(LED_t LEDNr)
   82:  {
  0000 87       [2]             PSHA  
   83:    if (LEDNr & LED1)
  0001 a501     [2]             BIT   #1
  0003 2706     [3]             BEQ   LB ;abs = 000b
   84:      Led1Toggle();
  0005 b600     [3]             LDA   0
  0007 a801     [2]             EOR   #1
  0009 b700     [3]             STA   0
  000b          LB:     
   85:    if (LEDNr & LED2)
  000b 95       [2]             TSX   
  000c f6       [3]             LDA   ,X
  000d a502     [2]             BIT   #2
  000f 2706     [3]             BEQ   L17 ;abs = 0017
   86:      Led2Toggle();
  0011 b600     [3]             LDA   0
  0013 a810     [2]             EOR   #16
  0015 b700     [3]             STA   0
  0017          L17:    
   87:    if (LEDNr & LED3)
  0017 f6       [3]             LDA   ,X
  0018 a504     [2]             BIT   #4
  001a 2706     [3]             BEQ   L22 ;abs = 0022
   88:      Led3Toggle();
  001c b606     [3]             LDA   6
  001e a801     [2]             EOR   #1
  0020 b706     [3]             STA   6
  0022          L22:    
   89:    if (LEDNr & LED4)
  0022 f6       [3]             LDA   ,X
  0023 a508     [2]             BIT   #8
  0025 2706     [3]             BEQ   L2D ;abs = 002d
   90:      Led4Toggle();
  0027 b606     [3]             LDA   6
  0029 a802     [2]             EOR   #2
  002b b706     [3]             STA   6
  002d          L2D:    
   91:  }
  002d 8a       [3]             PULH  
  002e 8d       [7]             RTC   
   92:  
   93:  /******************************************************************************
   94:  * LED_TurnOffLed
   95:  *
   96:  * Turns off on or more LEDs. Doesn't check/affect flashing states.
   97:  *******************************************************************************/
   98:  void LED_TurnOffLed(LED_t LEDNr)
   99:  {
  100:    if (LEDNr & LED1)
  0000 a501     [2]             BIT   #1
  0002 2702     [3]             BEQ   L6 ;abs = 0006
  101:      Led1Off();
  0004 1000     [5]             BSET  0,0
  0006          L6:     
  102:    if (LEDNr & LED2)
  0006 a502     [2]             BIT   #2
  0008 2702     [3]             BEQ   LC ;abs = 000c
  103:      Led2Off();
  000a 1800     [5]             BSET  4,0
  000c          LC:     
  104:    if (LEDNr & LED3)
  000c a504     [2]             BIT   #4
  000e 2702     [3]             BEQ   L12 ;abs = 0012
  105:      Led3Off();
  0010 1006     [5]             BSET  0,6
  0012          L12:    
  106:    if (LEDNr & LED4)
  0012 a508     [2]             BIT   #8
  0014 2702     [3]             BEQ   L18 ;abs = 0018
  107:      Led4Off();
  0016 1206     [5]             BSET  1,6
  0018          L18:    
  108:  }
  0018 8d       [7]             RTC   
  109:  
  110:  /******************************************************************************
  111:  * LED_TurnOnLed
  112:  *
  113:  * Turn on one or more LEDs. Doesn't check/affect flashing states.
  114:  *******************************************************************************/
  115:  void LED_TurnOnLed(LED_t LEDNr)
  116:  {
  117:    if (LEDNr & LED1)
  0000 a501     [2]             BIT   #1
  0002 2702     [3]             BEQ   L6 ;abs = 0006
  118:      Led1On();
  0004 1100     [5]             BCLR  0,0
  0006          L6:     
  119:    if (LEDNr & LED2)
  0006 a502     [2]             BIT   #2
  0008 2702     [3]             BEQ   LC ;abs = 000c
  120:      Led2On();
  000a 1900     [5]             BCLR  4,0
  000c          LC:     
  121:    if (LEDNr & LED3)
  000c a504     [2]             BIT   #4
  000e 2702     [3]             BEQ   L12 ;abs = 0012
  122:      Led3On();
  0010 1106     [5]             BCLR  0,6
  0012          L12:    
  123:    if (LEDNr & LED4)
  0012 a508     [2]             BIT   #8
  0014 2702     [3]             BEQ   L18 ;abs = 0018
  124:      Led4On();
  0016 1306     [5]             BCLR  1,6
  0018          L18:    
  125:  }
  0018 8d       [7]             RTC   
  126:  
  127:  /******************************************************************************
  128:  * LED_TurnOffAllLeds
  129:  *
  130:  * Turn off all LEDs. Does not affect flashing state.
  131:  *******************************************************************************/
  132:  void LED_TurnOffAllLeds(void)
  133:  {
  134:    LED_TurnOffLed(LED_ALL);
  0000 a60f     [2]             LDA   #15
  0002 ac000000 [8]             CALL  LED_TurnOffLed
  135:  }
  0006 8d       [7]             RTC   
  136:  
  137:  /******************************************************************************
  138:  * LED_TurnOnAllLeds
  139:  *
  140:  * Turn on all LEDs. Does not affect flashing state.
  141:  *******************************************************************************/
  142:  void LED_TurnOnAllLeds(void)
  143:  {
  144:    LED_TurnOnLed(LED_ALL);
  0000 a60f     [2]             LDA   #15
  0002 ac000000 [8]             CALL  LED_TurnOnLed
  145:  }
  0006 8d       [7]             RTC   
  146:  
  147:  /******************************************************************************
  148:  * LED_StopFlashingAllLeds
  149:  *
  150:  * Turn off all LEDs and stop flashing.
  151:  *******************************************************************************/
  152:  void LED_StopFlashingAllLeds(void)
  153:  {
  154:    LED_SetLed(LED_ALL, gLedOff_c);
  0000 ae0f     [2]             LDX   #15
  0002 a604     [2]             LDA   #4
  0004 ac000000 [8]             CALL  LED_SetLed
  155:  }
  0008 8d       [7]             RTC   
  156:  
  157:  /******************************************************************************
  158:  * LED_StartFlash
  159:  *
  160:  * Start one or more LEDs flashing
  161:  *******************************************************************************/
  162:  void LED_StartFlash
  163:    (
  164:      LED_t LEDNr /* IN: LED Number (may be an OR of the list) */
  165:    )
  166:  {
  167:    /* indicate which leds are flashing */
  168:    mLedFlashingLEDs |= LEDNr;
  0000 450000   [3]             LDHX  @mLedFlashingLEDs
  0003 fa       [3]             ORA   ,X
  0004 f7       [2]             STA   ,X
  169:  
  170:    /* start the timer */
  171:    TMR_StartIntervalTimer(mLEDTimerID, mLEDInterval_c, LED_FlashTimeout);
  0005 c60000   [4]             LDA   mLEDTimerID
  0008 87       [2]             PSHA  
  0009 ae64     [2]             LDX   #100
  000b 8c       [1]             CLRH  
  000c 89       [2]             PSHX  
  000d 8b       [2]             PSHH  
  000e 8b       [2]             PSHH  
  000f 8b       [2]             PSHH  
  0010 450000   [3]             LDHX  @LED_FlashTimeout
  0013 89       [2]             PSHX  
  0014 8b       [2]             PSHH  
  0015 a600     [2]             LDA   @LED_FlashTimeout:PAGE
  0017 87       [2]             PSHA  
  0018 ac000000 [8]             CALL  TMR_StartIntervalTimer
  001c a708     [2]             AIS   #8
  172:  }
  001e 8d       [7]             RTC   
  173:  
  174:  #if gLEDBlipEnabled_d
  175:  /******************************************************************************
  176:  * LED_StartBlip
  177:  *
  178:  * Set up for blinking one or more LEDs once. 
  179:  ******************************************************************************/
  180:  void LED_StartBlip(LED_t LEDNr)
  181:  {
  182:    uint8_t iLedIndex;
  183:  
  184:    /* set up for blinking one or more LEDs once */
  185:    for(iLedIndex = 0; iLedIndex < 4; ++iLedIndex) {
  186:      if(LEDNr & (1 << iLedIndex))
  187:       mLedBlips[iLedIndex] = 2;   /* blink on, then back off */
  188:    }
  189:  
  190:    /* start flashing */
  191:    LED_StartFlash(LEDNr);
  192:  }
  193:  #endif
  194:  
  195:  /******************************************************************************
  196:  * LED_StopFlash
  197:  *
  198:  * Stop an LED from flashing.
  199:  ******************************************************************************/
  200:  void LED_StopFlash
  201:    (
  202:    LED_t LEDNr /* IN: LED Number. */
  203:    )
  204:  {
  205:    /* leave stopped LEDs in the off state */
  206:    LED_TurnOffLed(LEDNr);
  0000 87       [2]             PSHA  
  0001 ac000000 [8]             CALL  LED_TurnOffLed
  207:  
  208:    /* stop flashing on one or more LEDs */
  209:    mLedFlashingLEDs &= (~LEDNr);
  0005 86       [3]             PULA  
  0006 43       [1]             COMA  
  0007 450000   [3]             LDHX  @mLedFlashingLEDs
  000a f4       [3]             AND   ,X
  000b f7       [2]             STA   ,X
  210:  
  211:    /* if ALL LEDs have stopped flashing, then stop timer */
  212:    if(!mLedFlashingLEDs)
  000c 2607     [3]             BNE   L15 ;abs = 0015
  213:      TMR_StopTimer(mLEDTimerID);
  000e c60000   [4]             LDA   mLEDTimerID
  0011 ac000000 [8]             CALL  TMR_StopTimer
  0015          L15:    
  214:  }
  0015 8d       [7]             RTC   
  215:  
  216:  /******************************************************************************
  217:  * LED_StartSerialFlash
  218:  *
  219:  * Serial flashing lights
  220:  ******************************************************************************/
  221:  void LED_StartSerialFlash(void)
  222:  {
  223:    /* indicate going into flashing mode (must be done first) */
  224:    LED_StartFlash(0);
  0000 4f       [1]             CLRA  
  0001 ac000000 [8]             CALL  LED_StartFlash
  225:  
  226:    /* set up for serial lights */
  227:    LED_TurnOffAllLeds();
  0005 ac000000 [8]             CALL  LED_TurnOffAllLeds
  228:    Led1On();
  0009 1100     [5]             BCLR  0,0
  229:    mLedFlashingLEDs = LED1 | LED2; /* toggle these to on first flash */
  000b a603     [2]             LDA   #3
  000d c70000   [4]             STA   mLedFlashingLEDs
  230:  
  231:    /* indicate in serial flash mode */
  232:    mfLedInSerialMode = TRUE;
  0010 44       [1]             LSRA  
  0011 c70000   [4]             STA   mfLedInSerialMode
  233:  }
  0014 8d       [7]             RTC   
  234:  
  235:  /******************************************************************************
  236:  * LED_DecrementBlink
  237:  *
  238:  * Decrements the blink count.
  239:  ******************************************************************************/
  240:  void LED_SetHex
  241:    (
  242:    uint8_t hexValue
  243:    )
  244:  {
  245:    LED_SetLed(LED_ALL, gLedOff_c);
  0000 ae0f     [2]             LDX   #15
  0002 87       [2]             PSHA  
  0003 a604     [2]             LDA   #4
  0005 ac000000 [8]             CALL  LED_SetLed
  246:    LED_SetLed(hexValue, gLedOn_c);
  0009 88       [3]             PULX  
  000a a603     [2]             LDA   #3
  000c ac000000 [8]             CALL  LED_SetLed
  247:  }
  0010 8d       [7]             RTC   
  248:  
  249:  /******************************************************************************
  250:  * LED_SetLed
  251:  *
  252:  * This fuction can set the Led state in: On, Off, Toggle, Flashing or StopFlash
  253:  *******************************************************************************/
  254:  void LED_SetLed
  255:    (
  256:    LED_t LEDNr,    /* IN: mask of LEDs to change */
  257:    LedState_t state
  258:    )
  259:  {
  0000 89       [2]             PSHX  
  0001 87       [2]             PSHA  
  260:    /* turning off flashing same as off state */
  261:    if(state == gLedStopFlashing_c)
  0002 4b04     [4]             DBNZA L8 ;abs = 0008
  262:      state = gLedOff_c;
  0004 a604     [2]             LDA   #4
  0006 95       [2]             TSX   
  0007 f7       [2]             STA   ,X
  0008          L8:     
  263:  
  264:    /* turn off serial lights if in serial mode */
  265:    LED_ExitSerialFlash();
  0008 ac000000 [8]             CALL  LED_ExitSerialFlash
  266:  
  267:    /* flash LED */
  268:    if(state == gLedFlashing_c)
  000c 95       [2]             TSX   
  000d 7d       [3]             TST   ,X
  000e 2608     [3]             BNE   L18 ;abs = 0018
  269:      LED_StartFlash(LEDNr);
  0010 e601     [3]             LDA   1,X
  0012 ac000000 [8]             CALL  LED_StartFlash
  0016 2036     [3]             BRA   L4E ;abs = 004e
  0018          L18:    
  270:  
  271:  #if gLEDBlipEnabled_d
  272:    /* blink LEDs */
  273:    else if(state == gLedBlip_c)
  274:      LED_StartBlip(LEDNr);
  275:  #endif
  276:  
  277:    /* On, Off or Toggle Led*/
  278:    else {
  279:  
  280:      /* on, off or toggle will stop flashing on the LED. Also exits serial mode */
  281:      if(mfLedInSerialMode || (mLedFlashingLEDs & LEDNr))
  0018 c60000   [4]             LDA   mfLedInSerialMode
  001b 2607     [3]             BNE   L24 ;abs = 0024
  001d c60000   [4]             LDA   mLedFlashingLEDs
  0020 e401     [3]             AND   1,X
  0022 2706     [3]             BEQ   L2A ;abs = 002a
  0024          L24:    
  282:        LED_StopFlash(LEDNr);
  0024 e601     [3]             LDA   1,X
  0026 ac000000 [8]             CALL  LED_StopFlash
  002a          L2A:    
  283:  
  284:      /* Select the operation to be done on the port */
  285:      if(state == gLedOn_c)
  002a 95       [2]             TSX   
  002b f6       [3]             LDA   ,X
  002c a103     [2]             CMP   #3
  002e 2606     [3]             BNE   L36 ;abs = 0036
  286:        LED_TurnOnLed(LEDNr);
  0030 e601     [3]             LDA   1,X
  0032 ac000000 [8]             CALL  LED_TurnOnLed
  0036          L36:    
  287:      if(state == gLedOff_c)
  0036 95       [2]             TSX   
  0037 f6       [3]             LDA   ,X
  0038 a104     [2]             CMP   #4
  003a 2606     [3]             BNE   L42 ;abs = 0042
  288:        LED_TurnOffLed(LEDNr);
  003c e601     [3]             LDA   1,X
  003e ac000000 [8]             CALL  LED_TurnOffLed
  0042          L42:    
  289:      if(state == gLedToggle_c)
  0042 95       [2]             TSX   
  0043 f6       [3]             LDA   ,X
  0044 a105     [2]             CMP   #5
  0046 2606     [3]             BNE   L4E ;abs = 004e
  290:        LED_ToggleLed(LEDNr);
  0048 e601     [3]             LDA   1,X
  004a ac000000 [8]             CALL  LED_ToggleLed
  004e          L4E:    
  291:    }
  292:  }
  004e a702     [2]             AIS   #2
  0050 8d       [7]             RTC   
  293:  
  294:  
  295:  /******************************************************************************
  296:  *******************************************************************************
  297:  * Private functions
  298:  *******************************************************************************
  299:  ******************************************************************************/
  300:  
  301:  /******************************************************************************
  302:  * LED_ExitSerialFlash
  303:  *
  304:  * Stop serial flashing mode. Leaves all LEDs off. Only exits if actually in 
  305:  * serial mode.
  306:  *******************************************************************************/
  307:  STATIC void LED_ExitSerialFlash(void)
  308:  {
  309:    if(mfLedInSerialMode) {
  0000 c60000   [4]             LDA   mfLedInSerialMode
  0003 2713     [3]             BEQ   L18 ;abs = 0018
  310:      mLedFlashingLEDs = 0;   /* no LEDs are currently flashing */
  0005 4f       [1]             CLRA  
  0006 c70000   [4]             STA   mLedFlashingLEDs
  311:      LED_TurnOffAllLeds();
  0009 ac000000 [8]             CALL  LED_TurnOffAllLeds
  312:      TMR_StopTimer(mLEDTimerID);
  000d c60000   [4]             LDA   mLEDTimerID
  0010 ac000000 [8]             CALL  TMR_StopTimer
  313:      mfLedInSerialMode = FALSE;
  0014 4f       [1]             CLRA  
  0015 c70000   [4]             STA   mfLedInSerialMode
  0018          L18:    
  314:    }
  315:  }
  0018 8d       [7]             RTC   
  316:  
  317:  #if gLEDBlipEnabled_d
  318:  /******************************************************************************
  319:  * LED_DecrementBlip
  320:  *
  321:  * Decrements the blink count.
  322:  ******************************************************************************/
  323:  STATIC void LED_DecrementBlip(void)
  324:  {
  325:    uint8_t iLedIndex;
  326:    uint8_t blinkOffLeds = 0;
  327:  
  328:    for(iLedIndex = 0; iLedIndex < 4; ++iLedIndex) {
  329:      if(mLedBlips[iLedIndex]) {
  330:        --mLedBlips[iLedIndex];
  331:        if(!mLedBlips[iLedIndex])
  332:          mLedFlashingLEDs &= ~(1 << iLedIndex);
  333:      }
  334:    }
  335:  
  336:    /* done, stop the timer */
  337:    if(!mLedFlashingLEDs)
  338:      TMR_StopTimer(mLEDTimerID);
  339:  }
  340:  #endif
  341:  
  342:  /******************************************************************************
  343:  * LED_FlashTimeout
  344:  *
  345:  * Flash the selected LED(s).
  346:  ******************************************************************************/
  347:  STATIC void LED_FlashTimeout
  348:    (
  349:    uint8_t timerId /* IN: TimerID. */
  350:    )
  351:  {
  352:    (void)timerId;  /* prevent compiler warning */
  353:  
  354:    if(mLedFlashingLEDs & LED1)
  0000 c60000   [4]             LDA   mLedFlashingLEDs
  0003 a501     [2]             BIT   #1
  0005 2706     [3]             BEQ   LD ;abs = 000d
  355:      Led1Toggle();
  0007 b600     [3]             LDA   0
  0009 a801     [2]             EOR   #1
  000b b700     [3]             STA   0
  000d          LD:     
  356:    if(mLedFlashingLEDs & LED2)
  000d c60000   [4]             LDA   mLedFlashingLEDs
  0010 a502     [2]             BIT   #2
  0012 2706     [3]             BEQ   L1A ;abs = 001a
  357:      Led2Toggle();
  0014 b600     [3]             LDA   0
  0016 a810     [2]             EOR   #16
  0018 b700     [3]             STA   0
  001a          L1A:    
  358:    if(mLedFlashingLEDs & LED3)
  001a c60000   [4]             LDA   mLedFlashingLEDs
  001d a504     [2]             BIT   #4
  001f 2706     [3]             BEQ   L27 ;abs = 0027
  359:      Led3Toggle();
  0021 b606     [3]             LDA   6
  0023 a801     [2]             EOR   #1
  0025 b706     [3]             STA   6
  0027          L27:    
  360:    if(mLedFlashingLEDs & LED4)
  0027 c60000   [4]             LDA   mLedFlashingLEDs
  002a a508     [2]             BIT   #8
  002c 2706     [3]             BEQ   L34 ;abs = 0034
  361:      Led4Toggle();
  002e b606     [3]             LDA   6
  0030 a802     [2]             EOR   #2
  0032 b706     [3]             STA   6
  0034          L34:    
  362:  
  363:  #if gLEDBlipEnabled_d
  364:    /* decrement blips */
  365:    LED_DecrementBlip();
  366:  #endif
  367:  
  368:    /* if serial lights, move on to next light */
  369:    if(mfLedInSerialMode)
  0034 c60000   [4]             LDA   mfLedInSerialMode
  0037 2714     [3]             BEQ   L4D ;abs = 004d
  370:    {
  371:      mLedFlashingLEDs = mLedFlashingLEDs << 1;
  0039 450000   [3]             LDHX  @mLedFlashingLEDs
  003c 78       [4]             LSL   ,X
  372:      if(mLedFlashingLEDs & (LED4 << 1))  /* wrap around */
  003d c60000   [4]             LDA   mLedFlashingLEDs
  0040 a510     [2]             BIT   #16
  0042 2709     [3]             BEQ   L4D ;abs = 004d
  373:      {
  374:        mLedFlashingLEDs &= LED_ALL;
  0044 a40f     [2]             AND   #15
  0046 450000   [3]             LDHX  @mLedFlashingLEDs
  0049 f7       [2]             STA   ,X
  375:        mLedFlashingLEDs |= LED1;
  004a aa01     [2]             ORA   #1
  004c f7       [2]             STA   ,X
  004d          L4D:    
  376:      }
  377:    }
  378:  }
  004d 8d       [7]             RTC   
  379:  
  380:  
  381:  /******************************************************************************
  382:  *******************************************************************************
  383:  * Unit Testing
  384:  *******************************************************************************
  385:  ******************************************************************************/
  386:  
  387:  /* None */
  388:  
  389:  #endif /* gLEDSupported_d */
  390:  
  391:  
