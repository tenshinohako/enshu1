*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /*****************************************************************************
    2:  * MyWirelessApp Demo Beacon Coordinator application.
    3:  *
    4:  * (c) Copyright 2008, Freescale, Inc. All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor.
   10:  *
   11:  *****************************************************************************/
   12:  
   13:  #include "MApp.h"
   14:  #include "Sound.h"
   15:  #include "NVM_Interface.h"
   16:  
   17:  /************************************************************************************
   18:  *************************************************************************************
   19:  * Private macros
   20:  *************************************************************************************
   21:  ************************************************************************************/
   22:  
   23:  /* If there are too many pending packets to be send over the air, */
   24:  /* receive mMaxKeysToReceive_c chars. */
   25:  /* The chars will be send over the air when there are no pending packets*/
   26:  #define mMaxKeysToReceive_c 32
   27:  
   28:  /************************************************************************************
   29:  *************************************************************************************
   30:  * Private prototypes
   31:  *************************************************************************************
   32:  ************************************************************************************/
   33:  
   34:  /* Forward declarations of helper functions */
   35:  static void    UartRxCallBack(void);
   36:  static uint8_t App_StartScan(uint8_t scanType);
   37:  static void    App_HandleScanEdConfirm(nwkMessage_t *pMsg);
   38:  static uint8_t App_StartCoordinator(void);
   39:  static uint8_t App_HandleMlmeInput(nwkMessage_t *pMsg);
   40:  static uint8_t App_SendAssociateResponse(nwkMessage_t *pMsgIn);
   41:  static void    App_HandleMcpsInput(mcpsToNwkMessage_t *pMsgIn);
   42:  static void    App_TransmitUartData(void);
   43:  static uint8_t App_WaitMsg(nwkMessage_t *pMsg, uint8_t msgType);
   44:  #if (gMC1323xMatrixKBD_d == TRUE)
   45:  static void    App_HandleKeys(uint8_t events, uint8_t pressedKey);
   46:  #else
   47:  static void    App_HandleKeys(key_event_t events);
   48:  #endif //gMC1323xMatrixKBD_d
   49:  
   50:  /************************************************************************************
   51:  *************************************************************************************
   52:  * Private type definitions
   53:  *************************************************************************************
   54:  ************************************************************************************/
   55:  
   56:  
   57:  /************************************************************************************
   58:  *************************************************************************************
   59:  * Private memory declarations
   60:  *************************************************************************************
   61:  ************************************************************************************/
   62:  
   63:  /* The short address and PAN ID of the coordinator*/
   64:  static const uint8_t maShortAddress[2] = { (mDefaultValueOfShortAddress_c & 0xff), (mDefaultValueOfShortAddress_c >> 8)};
   65:  static const uint8_t maPanId[2] = { (mDefaultValueOfPanId_c & 0xff), (mDefaultValueOfPanId_c >> 8)};
   66:  
   67:  /* The current logical channel (frequency band) */
   68:  static uint8_t mLogicalChannel;
   69:  
   70:  /* These byte arrays stores an associated
   71:     devices long and short addresses. */
   72:  static uint8_t maDeviceShortAddress[2];
   73:  static uint8_t maDeviceLongAddress[8];
   74:  
   75:  /* Data request packet for sending UART input to the coordinator */
   76:  static nwkToMcpsMessage_t *mpPacket;
   77:  
   78:  /* The MSDU handle is a unique data packet identifier */
   79:  static uint8_t mMsduHandle;
   80:  
   81:  /* Number of pending data packets */
   82:  static uint8_t mcPendingPackets;
   83:  
   84:  /* Application input queues */
   85:  static anchor_t mMlmeNwkInputQueue;
   86:  static anchor_t mMcpsNwkInputQueue;
   87:  
   88:  /************************************************************************************
   89:  *************************************************************************************
   90:  * Public memory declarations
   91:  *************************************************************************************
   92:  ************************************************************************************/
   93:  
   94:  /* The current state of the applications state machine */
   95:  uint8_t gState;
   96:  
   97:  /* This data set contains application variables to be preserved across resets */
   98:  NvDataItemDescription_t const gaNvAppDataSet[] = {
   99:    {NULL, 0}       /* Required end-of-table marker. */
  100:  };
  101:  
  102:  /************************************************************************************
  103:  *************************************************************************************
  104:  * Public functions
  105:  *************************************************************************************
  106:  ************************************************************************************/
  107:  
  108:  void DeepSleepWakeupStackProc(void);
  109:  
  110:  /*****************************************************************************
  111:  * Initialization function for the App Task. This is called during
  112:  * initialization and should contain any application specific initialization
  113:  * (ie. hardware initialization/setup, table initialization, power up
  114:  * notificaiton.
  115:  *
  116:  * Interface assumptions: None
  117:  *
  118:  * Return value: None
  119:  *
  120:  *****************************************************************************/
  121:  
  122:  void MApp_init(void)
  123:  { 
  124:    /* The initial application state */
  125:    gState = stateInit; 
  0000 4f       [1]             CLRA  
  0001 c70000   [4]             STA   gState
  126:    /* Reset number of pending packets */
  127:    mcPendingPackets = 0;   
  0004 c70000   [4]             STA   mcPendingPackets
  128:  
  129:    /* Initialize the MAC 802.15.4 extended address */
  130:    Init_MacExtendedAddress();
  0007 ac000000 [8]             CALL  Init_MacExtendedAddress
  131:    /* register keyboard callback function */
  132:    KBD_Init(App_HandleKeys);
  000b 450000   [3]             LDHX  @App_HandleKeys
  000e 89       [2]             PSHX  
  000f 8b       [2]             PSHH  
  0010 a600     [2]             LDA   @App_HandleKeys:PAGE
  0012 87       [2]             PSHA  
  0013 ac000000 [8]             CALL  KBD_Init
  0017 a703     [2]             AIS   #3
  133:    /* Initialize SPI Module */
  134:    SPI_Init();
  0019 ac000000 [8]             CALL  SPI1_Init
  135:    /* initialize LCD Module */
  136:    LCD_Init();
  137:    /* initialize LED Module */
  138:    LED_Init();
  001d ac000000 [8]             CALL  LED_Init
  139:    /* Initialize the LPM module */
  140:    PWRLib_Init();
  0021 ac000000 [8]             CALL  PWRLib_Init
  141:    /* Initialize the UART so that we can print out status messages */
  142:    UartX_SetBaud(gUartDefaultBaud_c);
  0025 ae34     [2]             LDX   #52
  0027 8c       [1]             CLRH  
  0028 ac000000 [8]             CALL  Uart1_SetBaud
  143:    UartX_SetRxCallBack(UartRxCallBack);
  002c 450000   [3]             LDHX  @UartRxCallBack
  002f 89       [2]             PSHX  
  0030 8b       [2]             PSHH  
  0031 a600     [2]             LDA   @UartRxCallBack:PAGE
  0033 87       [2]             PSHA  
  0034 ac000000 [8]             CALL  Uart1_SetRxCallBack
  0038 a703     [2]             AIS   #3
  144:    
  145:    /* initialize buzzer (NCB, SRB only) */  
  146:    BuzzerInit();  
  147:    /* Prepare input queues.*/  
  148:    MSG_InitQueue(&mMlmeNwkInputQueue); 
  003a 450000   [3]             LDHX  @mMlmeNwkInputQueue
  003d ac000000 [8]             CALL  List_ClearAnchor
  149:    MSG_InitQueue(&mMcpsNwkInputQueue); 
  0041 450000   [3]             LDHX  @mMcpsNwkInputQueue
  0044 ac000000 [8]             CALL  List_ClearAnchor
  150:    /* Enable MCU interrupts */
  151:    IrqControlLib_EnableAllIrqs();
  0048 9a       [1]             CLI   
  152:    /*signal app ready*/  
  153:    Led1Flashing();
  0049 a601     [2]             LDA   #1
  004b ac000000 [8]             CALL  LED_StartFlash
  154:    Led2Flashing();
  004f a602     [2]             LDA   #2
  0051 ac000000 [8]             CALL  LED_StartFlash
  155:    Led3Flashing();
  0055 a604     [2]             LDA   #4
  0057 ac000000 [8]             CALL  LED_StartFlash
  156:    Led4Flashing();
  005b a608     [2]             LDA   #8
  005d ac000000 [8]             CALL  LED_StartFlash
  157:      
  158:    UartUtil_Print("\n\rPress any switch on board to start running the application.\n\r", gAllowToBlock_d);  
  0061 450000   [3]             LDHX  @"\012\015Press any switch on board to start running the application.\012\015"
  0064 a601     [2]             LDA   #1
  0066 ac000000 [8]             CALL  UartUtil_Print
  159:    LCD_ClearDisplay();
  160:    LCD_WriteString(1,"Press any key");
  161:    LCD_WriteString(2,"to start.");
  162:  }
  006a 8d       [7]             RTC   
  163:  
  164:  
  165:  /*****************************************************************************
  166:  *Mac Application Task event processor.  This function is called to
  167:  * process all events for the task. Events include timers, messages and any
  168:  * other user defined events
  169:  *
  170:  * Interface assumptions: None
  171:  *
  172:  * Return value: None
  173:  *****************************************************************************/
  174:  /* The Application Task */
  175:  void AppTask(event_t events)
  176:  {   /* Pointer for storing the messages from MLME */
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fe     [2]             AIS   #-2
  177:    void *pMsgIn;
  178:    /* Stores the error/success code returned by some functions. */
  179:    uint8_t ret;
  180:    pMsgIn = NULL;
  0004 9e6f02   [6]             CLR   2,SP
  0007 9e6f01   [6]             CLR   1,SP
  181:    
  182:    /* Dequeue the MLME message */
  183:    if (events & gAppEvtMessageFromMLME_c)
  000a 9f       [1]             TXA   
  000b a504     [2]             BIT   #4
  000d 2726     [3]             BEQ   L35 ;abs = 0035
  184:    {
  185:      /* Get the message from MLME */
  186:      pMsgIn = MSG_DeQueue(&mMlmeNwkInputQueue);
  000f 450000   [3]             LDHX  @mMlmeNwkInputQueue
  0012 ac000000 [8]             CALL  List_RemoveHead
  0016 9eff01   [5]             STHX  1,SP
  187:      
  188:      /* Any time a beacon might arrive. Always handle the beacon frame first */
  189:      if (pMsgIn)
  0019 271a     [3]             BEQ   L35 ;abs = 0035
  190:      {               
  191:        ret = App_WaitMsg(pMsgIn, gNwkBeaconNotifyInd_c);
  001b a604     [2]             LDA   #4
  001d ac000000 [8]             CALL  App_WaitMsg
  192:        if(ret == errorNoError)
  0021 4d       [1]             TSTA  
  0022 2611     [3]             BNE   L35 ;abs = 0035
  193:        {
  194:          /* ALWAYS free the beacon frame contained in the beacon notify indication.*/
  195:          /* ALSO the application can use the beacon payload.*/
  196:          MSG_Free(((nwkMessage_t *)pMsgIn)->msgData.beaconNotifyInd.pBufferRoot);
  0024 9efe01   [5]             LDHX  1,SP
  0027 9ece0a   [5]             LDHX  10,X
  002a ac000000 [8]             CALL  MM_Free
  197:          UartUtil_Print("Received an MLME-Beacon Notify Indication\n\r", gAllowToBlock_d);
  002e 450000   [3]             LDHX  @"Received an MLME-Beacon Notify Indication\012\015"
  0031 ac000180 [8]             CALL  AppTask:384
  0035          L35:    
  198:        }
  199:      }
  200:    }
  201:    /* The application state machine */
  202:    switch(gState)
  0035 c60000   [4]             LDA   gState
  0038 a105     [2]             CMP   #5
  003a 221a     [3]             BHI   L56 ;abs = 0056
  003c 4d       [1]             TSTA  
  003d 2719     [3]             BEQ   L58 ;abs = 0058
  003f 410122   [4]             CBEQA #1,L64 ;abs = 0064
  0042 410232   [4]             CBEQA #2,L77 ;abs = 0077
  0045 410357   [4]             CBEQA #3,L9F ;abs = 009f
  0048 a104     [2]             CMP   #4
  004a 2603     [3]             BNE   L4F ;abs = 004f
  004c cc00d0   [4]             JMP   LD0 ;abs = 00d0
  004f          L4F:    
  004f a105     [2]             CMP   #5
  0051 267b     [3]             BNE   LCE ;abs = 00ce
  0053 cc0119   [4]             JMP   L119 ;abs = 0119
  0056          L56:    
  0056 2076     [3]             BRA   LCE ;abs = 00ce
  0058          L58:    
  203:    {
  204:    case stateInit:       
  205:      /* Print a welcome message to the UART */
  206:      UartUtil_Print(" MyWirelessApp Demo Beacon Coordinator application is initialized and ready.\n\r\n\r", gAllowToBlock_d);            
  0058 450000   [3]             LDHX  @" MyWirelessApp Demo Beacon Coordinator application is initialized and ready.\012\015\012\015"
  005b ac000180 [8]             CALL  AppTask:384
  207:      /* Goto Energy Detection state. */
  208:      gState = stateScanEdStart;
  005f a601     [2]             LDA   #1
  209:      TS_SendEvent(gAppTaskID_c, gAppEvtDummyEvent_c);    
  210:      break;
  0061 cc010a   [4]             JMP   L10A ;abs = 010a
  0064          L64:    
  211:      
  212:    case stateScanEdStart:
  213:      /* Start the Energy Detection scan, and goto wait for confirm state. */
  214:      UartUtil_Print("Initiating the Energy Detection Scan\n\r", gAllowToBlock_d);
  0064 450000   [3]             LDHX  @"Initiating the Energy Detection Scan\012\015"
  0067 ac000180 [8]             CALL  AppTask:384
  215:      /*Print the message on the LCD also*/
  216:      LCD_ClearDisplay();
  217:      LCD_WriteString(1,"Starting Energy");
  218:      LCD_WriteString(2,"Detection Scan");      
  219:      ret = App_StartScan(gScanModeED_c);
  006b 4f       [1]             CLRA  
  006c ac000000 [8]             CALL  App_StartScan
  220:      if(ret == errorNoError)
  0070 4d       [1]             TSTA  
  0071 265b     [3]             BNE   LCE ;abs = 00ce
  221:      {
  222:        gState = stateScanEdWaitConfirm;
  0073 a602     [2]             LDA   #2
  0075 2054     [3]             BRA   LCB ;abs = 00cb
  0077          L77:    
  223:      }
  224:      break;
  225:      
  226:    case stateScanEdWaitConfirm:
  227:      /* Stay in this state until the MLME Scan confirm message arrives,
  228:         and has been processed. Then goto Start Coordinator state. */
  229:      if (events & gAppEvtMessageFromMLME_c)
  0077 95       [2]             TSX   
  0078 e603     [3]             LDA   3,X
  007a a504     [2]             BIT   #4
  007c 2750     [3]             BEQ   LCE ;abs = 00ce
  230:      {
  231:        if (pMsgIn)
  007e 9efe01   [5]             LDHX  1,SP
  0081 274b     [3]             BEQ   LCE ;abs = 00ce
  232:        {
  233:          ret = App_WaitMsg(pMsgIn, gNwkScanCnf_c);
  0083 a60b     [2]             LDA   #11
  0085 ac000000 [8]             CALL  App_WaitMsg
  234:          if(ret == errorNoError)
  0089 4d       [1]             TSTA  
  008a 2642     [3]             BNE   LCE ;abs = 00ce
  235:          {
  236:            /* Process the ED scan confirm. The logical
  237:               channel is selected by this function. */
  238:            App_HandleScanEdConfirm(pMsgIn);
  008c 9efe01   [5]             LDHX  1,SP
  008f ac000000 [8]             CALL  App_HandleScanEdConfirm
  239:            /* Go to the Start Coordinator state */
  240:            gState = stateStartCoordinator;
  0093 a603     [2]             LDA   #3
  0095 c70000   [4]             STA   gState
  241:            TS_SendEvent(gAppTaskID_c, gAppEvtStartCoordinator_c);
  0098 c60000   [4]             LDA   gAppTaskID_c
  009b ae10     [2]             LDX   #16
  009d 2073     [3]             BRA   L112 ;abs = 0112
  009f          L9F:    
  242:          }
  243:        }
  244:      }
  245:      break;
  246:      
  247:  
  248:    case stateStartCoordinator:
  249:      if (events & gAppEvtStartCoordinator_c)
  009f 95       [2]             TSX   
  00a0 e603     [3]             LDA   3,X
  00a2 a510     [2]             BIT   #16
  00a4 2728     [3]             BEQ   LCE ;abs = 00ce
  250:      {
  251:        /* Start up as a PAN Coordinator on the selected channel. */
  252:        UartUtil_Print("\n\rStarting as PAN coordinator on channel 0x", gAllowToBlock_d);
  00a6 450000   [3]             LDHX  @"\012\015Starting as PAN coordinator on channel 0x"
  00a9 ac000180 [8]             CALL  AppTask:384
  253:        UartUtil_PrintHex(&mLogicalChannel, 1, FALSE);
  00ad 450000   [3]             LDHX  @mLogicalChannel
  00b0 89       [2]             PSHX  
  00b1 8b       [2]             PSHH  
  00b2 ae01     [2]             LDX   #1
  00b4 4f       [1]             CLRA  
  00b5 ac000000 [8]             CALL  UartUtil_PrintHex
  00b9 a702     [2]             AIS   #2
  254:        UartUtil_Print("\n\r", gAllowToBlock_d);
  00bb 450000   [3]             LDHX  @"\012\015"
  00be ac000180 [8]             CALL  AppTask:384
  255:        /*print a message on the LCD also*/
  256:        LCD_ClearDisplay();
  257:        LCD_WriteString(1,"Starting");
  258:        LCD_WriteString(2,"PAN coordinator");
  259:        ret = App_StartCoordinator();
  00c2 ac000000 [8]             CALL  App_StartCoordinator
  260:        if(ret == errorNoError)
  00c6 4d       [1]             TSTA  
  00c7 266b     [3]             BNE   L134 ;abs = 0134
  261:        {
  262:          /* If the Start request was sent successfully to
  263:             the MLME, then goto Wait for confirm state. */
  264:          gState = stateStartCoordinatorWaitConfirm;
  00c9 a604     [2]             LDA   #4
  00cb          LCB:    
  00cb c70000   [4]             STA   gState
  00ce          LCE:    
  00ce 2064     [3]             BRA   L134 ;abs = 0134
  00d0          LD0:    
  265:        }
  266:      }
  267:      break; 
  268:  
  269:    case stateStartCoordinatorWaitConfirm:
  270:      /* Stay in this state until the Start confirm message
  271:         arrives, and then goto the Listen state. */
  272:      if (events & gAppEvtMessageFromMLME_c)
  00d0 95       [2]             TSX   
  00d1 e603     [3]             LDA   3,X
  00d3 a504     [2]             BIT   #4
  00d5 275d     [3]             BEQ   L134 ;abs = 0134
  273:      {
  274:        if (pMsgIn)
  00d7 9efe01   [5]             LDHX  1,SP
  00da 2758     [3]             BEQ   L134 ;abs = 0134
  275:        {    
  276:          ret = App_WaitMsg(pMsgIn, gNwkStartCnf_c);
  00dc a60e     [2]             LDA   #14
  00de ac000000 [8]             CALL  App_WaitMsg
  277:          if(ret == errorNoError)
  00e2 4d       [1]             TSTA  
  00e3 264f     [3]             BNE   L134 ;abs = 0134
  278:          {
  279:            UartUtil_Print("Started the coordinator with PAN ID 0x", gAllowToBlock_d);
  00e5 450000   [3]             LDHX  @"Started the coordinator with PAN ID 0x"
  00e8 ac000180 [8]             CALL  AppTask:384
  280:            UartUtil_PrintHex((uint8_t *)maPanId, 2, 0);
  00ec 450000   [3]             LDHX  @maPanId
  00ef ac000187 [8]             CALL  AppTask:391
  281:            UartUtil_Print(", and short address 0x", gAllowToBlock_d);
  00f3 450000   [3]             LDHX  @", and short address 0x"
  00f6 ac000180 [8]             CALL  AppTask:384
  282:            UartUtil_PrintHex((uint8_t *)maShortAddress, 2, 0);
  00fa 450000   [3]             LDHX  @maShortAddress
  00fd ac000187 [8]             CALL  AppTask:391
  283:            UartUtil_Print(".\n\r\n\rReady to send and receive data over the UART.\n\r\n\r", gAllowToBlock_d);
  0101 450000   [3]             LDHX  @".\012\015\012\015Ready to send and receive data over the UART.\012\015\012\015"
  0104 ac000180 [8]             CALL  AppTask:384
  284:            /*print a message on the LCD also*/
  285:            LCD_ClearDisplay();
  286:            LCD_WriteString(1,"Ready to send");
  287:            LCD_WriteString(2,"and receive data");
  288:            gState = stateListen;
  0108 a605     [2]             LDA   #5
  010a          L10A:   
  010a c70000   [4]             STA   gState
  289:            TS_SendEvent(gAppTaskID_c, gAppEvtDummyEvent_c);
  010d c60000   [4]             LDA   gAppTaskID_c
  0110 ae01     [2]             LDX   #1
  0112          L112:   
  0112 8c       [1]             CLRH  
  0113 ac000000 [8]             CALL  TS_SendEvent
  0117 201b     [3]             BRA   L134 ;abs = 0134
  0119          L119:   
  290:          }
  291:        }
  292:      }
  293:      break; 
  294:      
  295:    case stateListen:
  296:      /* Stay in this state forever. 
  297:         Transmit the data received on UART */
  298:      if (events & gAppEvtMessageFromMLME_c)
  0119 95       [2]             TSX   
  011a e603     [3]             LDA   3,X
  011c a504     [2]             BIT   #4
  011e 2709     [3]             BEQ   L129 ;abs = 0129
  299:      {
  300:        /* Get the message from MLME */
  301:        if (pMsgIn)
  0120 9efe01   [5]             LDHX  1,SP
  0123 2704     [3]             BEQ   L129 ;abs = 0129
  302:        {      
  303:          /* Process it */
  304:          ret = App_HandleMlmeInput(pMsgIn);
  0125 ac000000 [8]             CALL  App_HandleMlmeInput
  0129          L129:   
  305:          /* Messages from the MLME must always be freed. */
  306:        }
  307:      }
  308:  
  309:      if (events & gAppEvtRxFromUart_c)
  0129 95       [2]             TSX   
  012a e603     [3]             LDA   3,X
  012c a502     [2]             BIT   #2
  012e 2704     [3]             BEQ   L134 ;abs = 0134
  310:      {      
  311:        /* get byte from UART */
  312:        App_TransmitUartData();
  0130 ac000000 [8]             CALL  App_TransmitUartData
  0134          L134:   
  313:      
  314:      }  
  315:      break;
  316:    }
  317:    
  318:    if (pMsgIn)
  0134 9efe01   [5]             LDHX  1,SP
  0137 2704     [3]             BEQ   L13D ;abs = 013d
  319:    {
  320:      /* Messages must always be freed. */ 
  321:      MSG_Free(pMsgIn);
  0139 ac000000 [8]             CALL  MM_Free
  013d          L13D:   
  322:    }
  323:    
  324:    if (events & gAppEvtMessageFromMCPS_c)
  013d 95       [2]             TSX   
  013e e603     [3]             LDA   3,X
  0140 a508     [2]             BIT   #8
  0142 271b     [3]             BEQ   L15F ;abs = 015f
  325:    {      
  326:       /* Get the message from MCPS */
  327:      pMsgIn = MSG_DeQueue(&mMcpsNwkInputQueue);
  0144 450000   [3]             LDHX  @mMcpsNwkInputQueue
  0147 ac000000 [8]             CALL  List_RemoveHead
  328:      if (pMsgIn)
  014b 650000   [3]             CPHX  #0
  014e 270f     [3]             BEQ   L15F ;abs = 015f
  329:      {
  330:        /* Process it */
  331:        App_HandleMcpsInput(pMsgIn);
  0150 89       [2]             PSHX  
  0151 8b       [2]             PSHH  
  0152 ac000000 [8]             CALL  App_HandleMcpsInput
  332:        /* Messages from the MCPS must always be freed. */
  333:        MSG_Free(pMsgIn);
  0156 9efe01   [5]             LDHX  1,SP
  0159 ac000000 [8]             CALL  MM_Free
  015d a702     [2]             AIS   #2
  015f          L15F:   
  334:      }
  335:    }  
  336:    
  337:    
  338:    /* Check for pending messages in the Queue */ 
  339:    if(MSG_Pending(&mMcpsNwkInputQueue))
  015f 320000   [5]             LDHX  mMcpsNwkInputQueue
  0162 270a     [3]             BEQ   L16E ;abs = 016e
  340:      TS_SendEvent(gAppTaskID_c, gAppEvtMessageFromMCPS_c);
  0164 c60000   [4]             LDA   gAppTaskID_c
  0167 ae08     [2]             LDX   #8
  0169 8c       [1]             CLRH  
  016a ac000000 [8]             CALL  TS_SendEvent
  016e          L16E:   
  341:    if(MSG_Pending(&mMlmeNwkInputQueue))
  016e 320000   [5]             LDHX  mMlmeNwkInputQueue
  0171 270a     [3]             BEQ   L17D ;abs = 017d
  342:      TS_SendEvent(gAppTaskID_c, gAppEvtMessageFromMLME_c);  
  0173 c60000   [4]             LDA   gAppTaskID_c
  0176 ae04     [2]             LDX   #4
  0178 8c       [1]             CLRH  
  0179 ac000000 [8]             CALL  TS_SendEvent
  017d          L17D:   
  343:  }
  017d a704     [2]             AIS   #4
  017f 8d       [7]             RTC   
  0180          L180:   
  0180 a601     [2]             LDA   #1
  0182 ac000000 [8]             CALL  UartUtil_Print
  0186 8d       [7]             RTC   
  0187          L187:   
  0187 89       [2]             PSHX  
  0188 8b       [2]             PSHH  
  0189 ae02     [2]             LDX   #2
  018b 4f       [1]             CLRA  
  018c ac000000 [8]             CALL  UartUtil_PrintHex
  0190 a702     [2]             AIS   #2
  0192 8d       [7]             RTC   
  344:  
  345:  
  346:  /************************************************************************************
  347:  *************************************************************************************
  348:  * Private functions
  349:  *************************************************************************************
  350:  ************************************************************************************/
  351:  
  352:  /*****************************************************************************
  353:  * UartRxCallBack
  354:  *
  355:  * This callback is triggered when a new byte is received over the UART
  356:  *
  357:  *****************************************************************************/
  358:  static void UartRxCallBack(void) 
  359:  {
  0000 8b       [2]             PSHH  
  360:    uint8_t pressedKey;
  361:  	if(stateListen == gState){
  0001 c60000   [4]             LDA   gState
  0004 a105     [2]             CMP   #5
  0006 260c     [3]             BNE   L14 ;abs = 0014
  362:      TS_SendEvent(gAppTaskID_c, gAppEvtRxFromUart_c);
  0008 c60000   [4]             LDA   gAppTaskID_c
  000b ae02     [2]             LDX   #2
  000d 8c       [1]             CLRH  
  000e ac000000 [8]             CALL  TS_SendEvent
  363:    }else{
  364:  	  (void)UartX_GetByteFromRxBuffer(&pressedKey);
  365:    }
  366:  }
  0012 8a       [3]             PULH  
  0013 8d       [7]             RTC   
  0014          L14:    
  0014 95       [2]             TSX   
  0015 ac000000 [8]             CALL  Uart1_GetByteFromRxBuffer
  0019 8a       [3]             PULH  
  001a 8d       [7]             RTC   
  367:  
  368:  /******************************************************************************
  369:  * The App_StartScan(scanType) function will start the scan process of the
  370:  * specified type in the MAC. This is accomplished by allocating a MAC message,
  371:  * which is then assigned the desired scan parameters and sent to the MLME
  372:  * service access point.
  373:  * The function may return either of the following values:
  374:  *   errorNoError:          The Scan message was sent successfully.
  375:  *   errorInvalidParameter: The MLME service access point rejected the
  376:  *                          message due to an invalid parameter.
  377:  *   errorAllocFailed:      A message buffer could not be allocated.
  378:  *
  379:  ******************************************************************************/
  380:  static uint8_t App_StartScan(uint8_t scanType)
  381:  {
  0000 87       [2]             PSHA  
  0001 a7fe     [2]             AIS   #-2
  382:    mlmeMessage_t *pMsg;
  383:    mlmeScanReq_t *pScanReq;
  384:  
  385:    UartUtil_Print("Sending the MLME-Scan Request message to the MAC...", gAllowToBlock_d);
  0003 450000   [3]             LDHX  @"Sending the MLME-Scan Request message to the MAC..."
  0006 ac000056 [8]             CALL  App_StartScan:86
  386:  
  387:    /* Allocate a message for the MLME (We should check for NULL). */
  388:    pMsg = MSG_AllocType(mlmeMessage_t);
  000a a60f     [2]             LDA   #15
  000c ac000000 [8]             CALL  MM_Alloc
  0010 9eff01   [5]             STHX  1,SP
  389:    if(pMsg != NULL)
  0013 2735     [3]             BEQ   L4A ;abs = 004a
  390:    {
  391:      /* This is a MLME-SCAN.req command */
  392:      pMsg->msgType = gMlmeScanReq_c;
  0015 a608     [2]             LDA   #8
  0017 f7       [2]             STA   ,X
  393:      /* Create the Scan request message data. */
  394:      pScanReq = &pMsg->msgData.scanReq;
  395:      /* gScanModeED_c, gScanModeActive_c, gScanModePassive_c, or gScanModeOrphan_c */
  396:      pScanReq->scanType = scanType;
  0018 9ee603   [4]             LDA   3,SP
  001b e701     [3]             STA   1,X
  397:      /* ChannelsToScan & 0xFF - LSB, always 0x00 */
  398:      pScanReq->scanChannels[0] = (uint8_t)((mDefaultValueOfChannel_c)     & 0xFF);
  001d 6f02     [5]             CLR   2,X
  399:      /* ChannelsToScan>>8 & 0xFF  */
  400:      pScanReq->scanChannels[1] = (uint8_t)((mDefaultValueOfChannel_c>>8)  & 0xFF);
  001f a680     [2]             LDA   #-128
  0021 e703     [3]             STA   3,X
  401:      /* ChannelsToScan>>16 & 0xFF  */
  402:      pScanReq->scanChannels[2] = (uint8_t)((mDefaultValueOfChannel_c>>16) & 0xFF);
  0023 6f04     [5]             CLR   4,X
  403:      /* ChannelsToScan>>24 & 0xFF - MSB */
  404:      pScanReq->scanChannels[3] = (uint8_t)((mDefaultValueOfChannel_c>>24) & 0xFF);
  0025 6f05     [5]             CLR   5,X
  405:      /* Duration per channel 0-14 (dc). T[sec] = (16*960*((2^dc)+1))/1000000.
  406:         A scan duration of 3 on 16 channels approximately takes 2 secs. */
  407:      pScanReq->scanDuration = 3;
  0027 a603     [2]             LDA   #3
  0029 e706     [3]             STA   6,X
  408:  #ifdef gMAC2006_d
  409:  	pScanReq->securityLevel = 0;
  410:  #endif //gMAC2006	
  411:      
  412:      /* Send the Scan request to the MLME. */
  413:      if(MSG_Send(NWK_MLME, pMsg) == gSuccess_c)
  002b 9efe01   [5]             LDHX  1,SP
  002e ac000000 [8]             CALL  NWK_MLME_SapHandler
  0032 4d       [1]             TSTA  
  0033 260a     [3]             BNE   L3F ;abs = 003f
  414:      {
  415:        UartUtil_Print("Done\n\r", gAllowToBlock_d);
  0035 450000   [3]             LDHX  @"Done\012\015"
  0038 ac000056 [8]             CALL  App_StartScan:86
  416:        return errorNoError;
  003c 4f       [1]             CLRA  
  003d 2014     [3]             BRA   L53 ;abs = 0053
  003f          L3F:    
  417:      }
  418:      else
  419:      {
  420:        UartUtil_Print("Invalid parameter!\n\r", gAllowToBlock_d);
  003f 450000   [3]             LDHX  @"Invalid parameter!\012\015"
  0042 ac000056 [8]             CALL  App_StartScan:86
  421:        return errorInvalidParameter;
  0046 a605     [2]             LDA   #5
  0048 2009     [3]             BRA   L53 ;abs = 0053
  004a          L4A:    
  422:      }
  423:    }
  424:    else
  425:    {
  426:      /* Allocation of a message buffer failed. */
  427:      UartUtil_Print("Message allocation failed!\n\r", gAllowToBlock_d);
  004a 450000   [3]             LDHX  @"Message allocation failed!\012\015"
  004d ac000056 [8]             CALL  App_StartScan:86
  428:      return errorAllocFailed;
  0051 a604     [2]             LDA   #4
  0053          L53:    
  429:    }
  430:  }
  0053 a703     [2]             AIS   #3
  0055 8d       [7]             RTC   
  0056          L56:    
  0056 a601     [2]             LDA   #1
  0058 ac000000 [8]             CALL  UartUtil_Print
  005c 8d       [7]             RTC   
  431:  
  432:  
  433:  /******************************************************************************
  434:  * The App_HandleScanEdConfirm(nwkMessage_t *pMsg) function will handle the
  435:  * ED scan confirm message received from the MLME when the ED scan has completed.
  436:  * The message contains the ED scan result list. This function will search the
  437:  * list in order to select the logical channel with the least energy. The
  438:  * selected channel is stored in the global variable called 'mLogicalChannel'.
  439:  *
  440:  ******************************************************************************/
  441:  static void App_HandleScanEdConfirm(nwkMessage_t *pMsg)
  442:  {  
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7f9     [2]             AIS   #-7
  443:    uint8_t n, minEnergy;
  444:    uint8_t *pEdList;
  445:    uint8_t ChannelMask;
  446:    
  447:    UartUtil_Print("Received the MLME-Scan Confirm message from the MAC\n\r", gAllowToBlock_d);
  0004 450000   [3]             LDHX  @"Received the MLME-Scan Confirm message from the MAC\012\015"
  0007 ac0000ab [8]             CALL  App_HandleScanEdConfirm:171
  448:      
  449:    /* Get a pointer to the energy detect results */
  450:    pEdList = pMsg->msgData.scanCnf.resList.pEnergyDetectList;
  000b 9efe08   [5]             LDHX  8,SP
  000e 9ece08   [5]             LDHX  8,X
  0011 9eff05   [5]             STHX  5,SP
  451:    
  452:    /* Set the minimum energy to a large value */
  453:    minEnergy = 0xFF;
  0014 a6ff     [2]             LDA   #-1
  0016 95       [2]             TSX   
  0017 e706     [3]             STA   6,X
  454:  
  455:    /* Select default channel */
  456:    mLogicalChannel = 11;
  0019 a60b     [2]             LDA   #11
  001b c70000   [4]             STA   mLogicalChannel
  457:   
  458:    /* Search for the channel with least energy */
  459:    for(n=0; n<16; n++)
  001e 6f03     [5]             CLR   3,X
  0020          L20:    
  460:    {
  461:      ChannelMask = n + 11;
  0020 95       [2]             TSX   
  0021 e603     [3]             LDA   3,X
  0023 ab0b     [2]             ADD   #11
  462:  	if((pEdList[n] < minEnergy)&&((uint8_t)((mDefaultValueOfChannel_c>>ChannelMask) & 0x1)))
  0025 f7       [2]             STA   ,X
  0026 e603     [3]             LDA   3,X
  0028 eb05     [3]             ADD   5,X
  002a e701     [3]             STA   1,X
  002c 4f       [1]             CLRA  
  002d e904     [3]             ADC   4,X
  002f 87       [2]             PSHA  
  0030 ee01     [3]             LDX   1,X
  0032 9ee608   [4]             LDA   8,SP
  0035 8a       [3]             PULH  
  0036 f1       [3]             CMP   ,X
  0037 2326     [3]             BLS   L5F ;abs = 005f
  0039 9ee601   [4]             LDA   1,SP
  003c 87       [2]             PSHA  
  003d 8b       [2]             PSHH  
  003e 86       [3]             PULA  
  003f 95       [2]             TSX   
  0040 e703     [3]             STA   3,X
  0042 458000   [3]             LDHX  #-32768
  0045 4f       [1]             CLRA  
  0046 8b       [2]             PSHH  
  0047 88       [3]             PULX  
  0048 cd0000   [6]             JSR   _ILSR
  004b 8a       [3]             PULH  
  004c a501     [2]             BIT   #1
  004e 270f     [3]             BEQ   L5F ;abs = 005f
  463:      {
  464:        minEnergy = pEdList[n];
  0050 95       [2]             TSX   
  0051 e602     [3]             LDA   2,X
  0053 87       [2]             PSHA  
  0054 ee01     [3]             LDX   1,X
  0056 8a       [3]             PULH  
  0057 f6       [3]             LDA   ,X
  0058 95       [2]             TSX   
  0059 e706     [3]             STA   6,X
  465:        /* Channel numbering is 11 to 26 both inclusive */
  466:        mLogicalChannel = n + 11; 
  005b f6       [3]             LDA   ,X
  005c c70000   [4]             STA   mLogicalChannel
  005f          L5F:    
  005f 95       [2]             TSX   
  0060 6c03     [5]             INC   3,X
  0062 e603     [3]             LDA   3,X
  0064 a110     [2]             CMP   #16
  0066 25b8     [3]             BCS   L20 ;abs = 0020
  467:      }
  468:    }
  469:    
  470:    /* Print out the result of the ED scan */
  471:    UartUtil_Print("ED scan returned the following results:\n\r  [", gAllowToBlock_d);
  0068 450000   [3]             LDHX  @"ED scan returned the following results:\012\015  ["
  006b ac0000ab [8]             CALL  App_HandleScanEdConfirm:171
  472:    UartUtil_PrintHex(pEdList, 16, gPrtHexBigEndian_c | gPrtHexSpaces_c);
  006f 9efe05   [5]             LDHX  5,SP
  0072 89       [2]             PSHX  
  0073 8b       [2]             PSHH  
  0074 ae10     [2]             LDX   #16
  0076 a609     [2]             LDA   #9
  0078 ac000000 [8]             CALL  UartUtil_PrintHex
  007c a702     [2]             AIS   #2
  473:    UartUtil_Print("]\n\r\n\r", gAllowToBlock_d);
  007e 450000   [3]             LDHX  @"]\012\015\012\015"
  0081 ac0000ab [8]             CALL  App_HandleScanEdConfirm:171
  474:    
  475:    /* Print out the selected logical channel */
  476:    UartUtil_Print("Based on the ED scan the logical channel 0x", gAllowToBlock_d);
  0085 450000   [3]             LDHX  @"Based on the ED scan the logical channel 0x"
  0088 ac0000ab [8]             CALL  App_HandleScanEdConfirm:171
  477:    UartUtil_PrintHex(&mLogicalChannel, 1, 0);
  008c 450000   [3]             LDHX  @mLogicalChannel
  008f 89       [2]             PSHX  
  0090 8b       [2]             PSHH  
  0091 ae01     [2]             LDX   #1
  0093 4f       [1]             CLRA  
  0094 ac000000 [8]             CALL  UartUtil_PrintHex
  0098 a702     [2]             AIS   #2
  478:    UartUtil_Print(" was selected\n\r", gAllowToBlock_d);
  009a 450000   [3]             LDHX  @" was selected\012\015"
  009d ac0000ab [8]             CALL  App_HandleScanEdConfirm:171
  479:    
  480:    /* The list of detected energies must be freed. */
  481:    MSG_Free(pEdList);
  00a1 9efe05   [5]             LDHX  5,SP
  00a4 ac000000 [8]             CALL  MM_Free
  482:  }
  00a8 a709     [2]             AIS   #9
  00aa 8d       [7]             RTC   
  00ab          LAB:    
  00ab a601     [2]             LDA   #1
  00ad ac000000 [8]             CALL  UartUtil_Print
  00b1 8d       [7]             RTC   
  483:  
  484:  /******************************************************************************
  485:  * The App_StartScan(scanType) function will start the scan process of the
  486:  * specified type in the MAC. This is accomplished by allocating a MAC message,
  487:  * which is then assigned the desired scan parameters and sent to the MLME
  488:  * service access point. The MAC PIB attributes "macShortAddress", and 
  489:  * "macAssociatePermit" are modified.
  490:  *
  491:  * The function may return either of the following values:
  492:  *   errorNoError:          The Scan message was sent successfully.
  493:  *   errorInvalidParameter: The MLME service access point rejected the
  494:  *                          message due to an invalid parameter.
  495:  *   errorAllocFailed:      A message buffer could not be allocated.
  496:  *
  497:  ******************************************************************************/
  498:  static uint8_t App_StartCoordinator(void)
  499:  {
  0000 a7fb     [2]             AIS   #-5
  500:    /* Message for the MLME will be allocated and attached to this pointer */
  501:    mlmeMessage_t *pMsg;
  502:  
  503:    UartUtil_Print("Sending the MLME-Start Request message to the MAC...", gAllowToBlock_d);
  0002 450000   [3]             LDHX  @"Sending the MLME-Start Request message to the MAC..."
  0005 ac0000ad [8]             CALL  App_StartCoordinator:173
  504:    
  505:    /* Allocate a message for the MLME (We should check for NULL). */
  506:    pMsg = MSG_AllocType(mlmeMessage_t);
  0009 a60f     [2]             LDA   #15
  000b ac000000 [8]             CALL  MM_Alloc
  000f 9eff01   [5]             STHX  1,SP
  507:    if(pMsg != NULL)
  0012 2603     [3]             BNE   L17 ;abs = 0017
  0014 cc00a1   [4]             JMP   LA1 ;abs = 00a1
  0017          L17:    
  508:    {
  509:      /* Pointer which is used for easy access inside the allocated message */
  510:      mlmeStartReq_t *pStartReq;
  511:      /* Return value from MSG_send - used for avoiding compiler warnings */
  512:      uint8_t ret;
  513:      /* Boolean value that will be written to the MAC PIB */
  514:      uint8_t boolFlag;
  515:      
  516:      /* Set-up MAC PIB attributes. Please note that Set, Get,
  517:         and Reset messages are not freed by the MLME. */
  518:      
  519:      /* We must always set the short address to something
  520:         else than 0xFFFF before starting a PAN. */
  521:      pMsg->msgType = gMlmeSetReq_c;
  0017 a609     [2]             LDA   #9
  0019 f7       [2]             STA   ,X
  522:      pMsg->msgData.setReq.pibAttribute = gMPibShortAddress_c;
  001a a653     [2]             LDA   #83
  001c e701     [3]             STA   1,X
  523:      pMsg->msgData.setReq.pibAttributeValue = (uint8_t *)maShortAddress;
  001e a600     [2]             LDA   @maShortAddress:MSB
  0020 e702     [3]             STA   2,X
  0022 a600     [2]             LDA   @maShortAddress
  0024 e703     [3]             STA   3,X
  524:      ret = MSG_Send(NWK_MLME, pMsg);
  0026 89       [2]             PSHX  
  0027 8b       [2]             PSHH  
  0028 ac000000 [8]             CALL  NWK_MLME_SapHandler
  525:      
  526:      /* We must set the Association Permit flag to TRUE 
  527:         in order to allow devices to associate to us. */
  528:      pMsg->msgType = gMlmeSetReq_c;
  002c 9efe01   [5]             LDHX  1,SP
  002f a609     [2]             LDA   #9
  0031 f7       [2]             STA   ,X
  529:      pMsg->msgData.setReq.pibAttribute = gMPibAssociationPermit_c;
  0032 a641     [2]             LDA   #65
  0034 e701     [3]             STA   1,X
  530:      boolFlag = TRUE;
  0036 a601     [2]             LDA   #1
  0038 95       [2]             TSX   
  0039 e704     [3]             STA   4,X
  531:      pMsg->msgData.setReq.pibAttributeValue = &boolFlag;
  003b af04     [2]             AIX   #4
  003d 8b       [2]             PSHH  
  003e 9ee602   [4]             LDA   2,SP
  0041 87       [2]             PSHA  
  0042 8a       [3]             PULH  
  0043 9f       [1]             TXA   
  0044 9eee03   [4]             LDX   3,SP
  0047 e703     [3]             STA   3,X
  0049 86       [3]             PULA  
  004a e702     [3]             STA   2,X
  532:      ret = MSG_Send(NWK_MLME, pMsg);
  004c ac000000 [8]             CALL  NWK_MLME_SapHandler
  533:      
  534:      /* This is a MLME-START.req command */
  535:      pMsg->msgType = gMlmeStartReq_c;
  0050 9efe03   [5]             LDHX  3,SP
  0053 a60a     [2]             LDA   #10
  0055 f7       [2]             STA   ,X
  536:      
  537:      /* Create the Start request message data. */
  538:      pStartReq = &pMsg->msgData.startReq;
  0056 af01     [2]             AIX   #1
  0058 9eff06   [5]             STHX  6,SP
  539:      /* PAN ID - LSB, MSB. The example shows a PAN ID of 0xBEEF. */
  540:      FLib_MemCpy(pStartReq->panId, (void *)maPanId, 2);
  005b 89       [2]             PSHX  
  005c 8b       [2]             PSHH  
  005d 450000   [3]             LDHX  @maPanId
  0060 a602     [2]             LDA   #2
  0062 ac000000 [8]             CALL  FLib_MemCpy
  0066 a702     [2]             AIS   #2
  541:      /* Logical Channel - the default of 11 will be overridden */
  542:      pStartReq->logicalChannel = mLogicalChannel;
  0068 9efe06   [5]             LDHX  6,SP
  006b c60000   [4]             LDA   mLogicalChannel
  006e e702     [3]             STA   2,X
  543:      /* Beacon Order: 0xF = turn off beacons, less than 0xF = turn on beacons */
  544:      pStartReq->beaconOrder = mDefaultValueOfBeaconOrder_c;  
  0070 a606     [2]             LDA   #6
  0072 e703     [3]             STA   3,X
  545:      /* Superframe Order: Must be equal or less than the beacon order */
  546:      pStartReq->superFrameOrder = mDefaultValueOfSuperframeOrder_c;
  0074 e704     [3]             STA   4,X
  547:      /* Be a PAN coordinator */
  548:      pStartReq->panCoordinator = TRUE;
  0076 a601     [2]             LDA   #1
  0078 e705     [3]             STA   5,X
  549:      /* Dont use battery life extension */
  550:      pStartReq->batteryLifeExt = FALSE;
  007a 6f06     [5]             CLR   6,X
  551:      /* This is not a Realignment command */
  552:      pStartReq->coordRealignment = FALSE;
  007c 6f07     [5]             CLR   7,X
  553:      /* Dont use security */
  554:  #ifndef gMAC2006_d	
  555:      pStartReq->securityEnable = FALSE;
  007e 6f08     [5]             CLR   8,X
  556:  #else
  557:  	pStartReq->coordRealignSecurityLevel = 0;
  558:    pStartReq->beaconSecurityLevel = 0;	
  559:  #endif //gMAC2006_d	
  560:        
  561:      /* Send the Start request to the MLME. */
  562:      if(MSG_Send(NWK_MLME, pMsg) == gSuccess_c)
  0080 9efe03   [5]             LDHX  3,SP
  0083 ac000000 [8]             CALL  NWK_MLME_SapHandler
  0087 4d       [1]             TSTA  
  0088 a702     [2]             AIS   #2
  008a 260a     [3]             BNE   L96 ;abs = 0096
  563:      {
  564:        UartUtil_Print("Done\n\r", gAllowToBlock_d);
  008c 450000   [3]             LDHX  @"Done\012\015"
  008f ac0000ad [8]             CALL  App_StartCoordinator:173
  565:        return errorNoError;
  0093 4f       [1]             CLRA  
  0094 2014     [3]             BRA   LAA ;abs = 00aa
  0096          L96:    
  566:      }
  567:      else
  568:      {
  569:        /* One or more parameters in the Start Request message were invalid. */
  570:        UartUtil_Print("Invalid parameter!\n\r", gAllowToBlock_d);
  0096 450000   [3]             LDHX  @"Invalid parameter!\012\015"
  0099 ac0000ad [8]             CALL  App_StartCoordinator:173
  571:        return errorInvalidParameter;
  009d a605     [2]             LDA   #5
  009f 2009     [3]             BRA   LAA ;abs = 00aa
  00a1          LA1:    
  572:      }
  573:    }
  574:    else
  575:    {
  576:      /* Allocation of a message buffer failed. */
  577:      UartUtil_Print("Message allocation failed!\n\r", gAllowToBlock_d);
  00a1 450000   [3]             LDHX  @"Message allocation failed!\012\015"
  00a4 ac0000ad [8]             CALL  App_StartCoordinator:173
  578:      return errorAllocFailed;
  00a8 a604     [2]             LDA   #4
  00aa          LAA:    
  579:    }
  580:  }
  00aa a705     [2]             AIS   #5
  00ac 8d       [7]             RTC   
  00ad          LAD:    
  00ad a601     [2]             LDA   #1
  00af ac000000 [8]             CALL  UartUtil_Print
  00b3 8d       [7]             RTC   
  581:  
  582:  /******************************************************************************
  583:  * The App_SendAssociateResponse(nwkMessage_t *pMsgIn) will create the response
  584:  * message to an Associate Indication (device sends an Associate Request to its
  585:  * MAC. The request is transmitted to the coordinator where it is converted into
  586:  * an Associate Indication). This function will extract the devices long address,
  587:  * and various other flags from the incoming indication message for building the
  588:  * response message.
  589:  *
  590:  * The function may return either of the following values:
  591:  *   errorNoError:          The Associate Response message was sent successfully.
  592:  *   errorInvalidParameter: The MLME service access point rejected the
  593:  *                          message due to an invalid parameter.
  594:  *   errorAllocFailed:      A message buffer could not be allocated.
  595:  *
  596:  ******************************************************************************/
  597:  static uint8_t App_SendAssociateResponse(nwkMessage_t *pMsgIn)
  598:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fc     [2]             AIS   #-4
  599:    mlmeMessage_t *pMsg;
  600:    mlmeAssociateRes_t *pAssocRes;
  601:    
  602:    static uint8_t nwk_addr = 0;//added
  603:   
  604:    UartUtil_Print("Sending the MLME-Associate Response message to the MAC...", gAllowToBlock_d);
  0004 450000   [3]             LDHX  @"Sending the MLME-Associate Response message to the MAC..."
  0007 ac0000a8 [8]             CALL  App_SendAssociateResponse:168
  605:   
  606:    /* Allocate a message for the MLME */
  607:    pMsg = MSG_AllocType(mlmeMessage_t);
  000b a60f     [2]             LDA   #15
  000d ac000000 [8]             CALL  MM_Alloc
  0011 9eff03   [5]             STHX  3,SP
  608:    if(pMsg != NULL)
  0014 2603     [3]             BNE   L19 ;abs = 0019
  0016 cc009c   [4]             JMP   L9C ;abs = 009c
  0019          L19:    
  609:    {
  610:      /* This is a MLME-ASSOCIATE.res command */
  611:      pMsg->msgType = gMlmeAssociateRes_c;
  0019 a601     [2]             LDA   #1
  001b f7       [2]             STA   ,X
  612:      
  613:      /* Create the Associate response message data. */
  614:      pAssocRes = &pMsg->msgData.associateRes;
  001c af01     [2]             AIX   #1
  615:      
  616:      /* Assign a short address to the device. In this example we simply
  617:         choose 0x0001. Though, all devices and coordinators in a PAN must have
  618:         different short addresses. However, if a device do not want to use 
  619:         short addresses at all in the PAN, a short address of 0xFFFE must
  620:         be assigned to it. */
  621:      if(pMsgIn->msgData.associateInd.capabilityInfo & gCapInfoAllocAddr_c)
  001e 9eff01   [5]             STHX  1,SP
  0021 9efe05   [5]             LDHX  5,SP
  0024 e60b     [3]             LDA   11,X
  0026 2a10     [3]             BPL   L38 ;abs = 0038
  622:      {
  623:        /* Assign a unique short address less than 0xfffe if the device requests so. */
  624:        pAssocRes->assocShortAddress[0] = nwk_addr++;//changed
  0028 c60000   [4]             LDA   nwk_addr
  002b 9efe01   [5]             LDHX  1,SP
  002e e708     [3]             STA   8,X
  0030 4c       [1]             INCA  
  0031 c70000   [4]             STA   nwk_addr
  625:        pAssocRes->assocShortAddress[1] = 0x00;
  0034 6f09     [5]             CLR   9,X
  626:      }
  0036 200a     [3]             BRA   L42 ;abs = 0042
  0038          L38:    
  627:      else
  628:      {
  629:        /* A short address of 0xfffe means that the device is granted access to
  630:           the PAN (Associate successful) but that long addressing is used.*/
  631:        pAssocRes->assocShortAddress[0] = 0xFE;
  0038 a6fe     [2]             LDA   #-2
  003a 9efe01   [5]             LDHX  1,SP
  003d e708     [3]             STA   8,X
  632:        pAssocRes->assocShortAddress[1] = 0xFF;
  003f 4c       [1]             INCA  
  0040 e709     [3]             STA   9,X
  0042          L42:    
  633:      }
  634:      /* Get the 64 bit address of the device requesting association. */
  635:      FLib_MemCpy(pAssocRes->deviceAddress, pMsgIn->msgData.associateInd.deviceAddress, 8);
  0042 89       [2]             PSHX  
  0043 8b       [2]             PSHH  
  0044 9eff03   [5]             STHX  3,SP
  0047 9efe07   [5]             LDHX  7,SP
  004a af01     [2]             AIX   #1
  004c a608     [2]             LDA   #8
  004e ac000000 [8]             CALL  FLib_MemCpy
  0052 a702     [2]             AIS   #2
  636:      /* Association granted. May also be gPanAtCapacity_c or gPanAccessDenied_c. */
  637:      pAssocRes->status = gSuccess_c;
  0054 9efe01   [5]             LDHX  1,SP
  0057 6f0b     [5]             CLR   11,X
  638:      /* Do not use security */
  639:  #ifndef gMAC2006_d
  640:      pAssocRes->securityEnable = FALSE;
  0059 6f0a     [5]             CLR   10,X
  641:  #else
  642:  	pAssocRes->securityLevel = 0;
  643:  #endif //gMAC2006_d	
  644:      
  645:      /* Save device info. */
  646:      FLib_MemCpy(maDeviceShortAddress, pAssocRes->assocShortAddress, 2);
  005b 450000   [3]             LDHX  @maDeviceShortAddress
  005e 89       [2]             PSHX  
  005f 8b       [2]             PSHH  
  0060 9efe03   [5]             LDHX  3,SP
  0063 af08     [2]             AIX   #8
  0065 a602     [2]             LDA   #2
  0067 ac000000 [8]             CALL  FLib_MemCpy
  006b a702     [2]             AIS   #2
  647:      FLib_MemCpy(maDeviceLongAddress,  pAssocRes->deviceAddress,     8);
  006d 450000   [3]             LDHX  @maDeviceLongAddress
  0070 89       [2]             PSHX  
  0071 8b       [2]             PSHH  
  0072 9efe03   [5]             LDHX  3,SP
  0075 a608     [2]             LDA   #8
  0077 ac000000 [8]             CALL  FLib_MemCpy
  007b a702     [2]             AIS   #2
  648:      
  649:      /* Send the Associate Response to the MLME. */
  650:      if(MSG_Send(NWK_MLME, pMsg) == gSuccess_c)
  007d 9efe03   [5]             LDHX  3,SP
  0080 ac000000 [8]             CALL  NWK_MLME_SapHandler
  0084 4d       [1]             TSTA  
  0085 260a     [3]             BNE   L91 ;abs = 0091
  651:      {
  652:        UartUtil_Print("Done\n\r", gAllowToBlock_d);
  0087 450000   [3]             LDHX  @"Done\012\015"
  008a ac0000a8 [8]             CALL  App_SendAssociateResponse:168
  653:        return errorNoError;
  008e 4f       [1]             CLRA  
  008f 2014     [3]             BRA   LA5 ;abs = 00a5
  0091          L91:    
  654:      }
  655:      else
  656:      {
  657:        /* One or more parameters in the message were invalid. */
  658:        UartUtil_Print("Invalid parameter!\n\r", gAllowToBlock_d);
  0091 450000   [3]             LDHX  @"Invalid parameter!\012\015"
  0094 ac0000a8 [8]             CALL  App_SendAssociateResponse:168
  659:        return errorInvalidParameter;
  0098 a605     [2]             LDA   #5
  009a 2009     [3]             BRA   LA5 ;abs = 00a5
  009c          L9C:    
  660:      }
  661:    }
  662:    else
  663:    {
  664:      /* Allocation of a message buffer failed. */
  665:      UartUtil_Print("Message allocation failed!\n\r", gAllowToBlock_d);
  009c 450000   [3]             LDHX  @"Message allocation failed!\012\015"
  009f ac0000a8 [8]             CALL  App_SendAssociateResponse:168
  666:      return errorAllocFailed;
  00a3 a604     [2]             LDA   #4
  00a5          LA5:    
  667:    }
  668:  }
  00a5 a706     [2]             AIS   #6
  00a7 8d       [7]             RTC   
  00a8          LA8:    
  00a8 a601     [2]             LDA   #1
  00aa ac000000 [8]             CALL  UartUtil_Print
  00ae 8d       [7]             RTC   
  669:  
  670:  /******************************************************************************
  671:  * The App_HandleMlmeInput(nwkMessage_t *pMsg) function will handle various
  672:  * messages from the MLME, e.g. (Dis)Associate Indication.
  673:  *
  674:  * The function may return either of the following values:
  675:  *   errorNoError:   The message was processed.
  676:  *   errorNoMessage: The message pointer is NULL.
  677:  ******************************************************************************/
  678:  static uint8_t App_HandleMlmeInput(nwkMessage_t *pMsg)
  679:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  680:    if(pMsg == NULL)
  0002 650000   [3]             CPHX  #0
  0005 2604     [3]             BNE   LB ;abs = 000b
  681:      return errorNoMessage;
  0007 a603     [2]             LDA   #3
  0009 2036     [3]             BRA   L41 ;abs = 0041
  000b          LB:     
  682:    
  683:    /* Handle the incoming message. The type determines the sort of processing.*/
  684:    switch(pMsg->msgType) {
  000b f6       [3]             LDA   ,X
  000c 2706     [3]             BEQ   L14 ;abs = 0014
  000e a10c     [2]             CMP   #12
  0010 262e     [3]             BNE   L40 ;abs = 0040
  0012 2012     [3]             BRA   L26 ;abs = 0026
  0014          L14:    
  685:    case gNwkAssociateInd_c:
  686:      UartUtil_Print("Received an MLME-Associate Indication from the MAC\n\r", gAllowToBlock_d);
  0014 450000   [3]             LDHX  @"Received an MLME-Associate Indication from the MAC\012\015"
  0017 a601     [2]             LDA   #1
  0019 ac000000 [8]             CALL  UartUtil_Print
  687:      /* A device sent us an Associate Request. We must send back a response.  */
  688:      return App_SendAssociateResponse(pMsg);
  001d 9efe01   [5]             LDHX  1,SP
  0020 ac000000 [8]             CALL  App_SendAssociateResponse
  0024 201b     [3]             BRA   L41 ;abs = 0041
  0026          L26:    
  689:      break;
  690:      
  691:    case gNwkCommStatusInd_c:
  692:      /* Sent by the MLME after the Association Response has been transmitted. */
  693:      UartUtil_Print("Received an MLME-Comm-Status Indication from the MAC - status = ", gAllowToBlock_d);
  0026 450000   [3]             LDHX  @"Received an MLME-Comm-Status Indication from the MAC - status = "
  0029 a601     [2]             LDA   #1
  002b ac000000 [8]             CALL  UartUtil_Print
  694:      UartUtil_PrintHex(&pMsg->msgData.commStatusInd.status, 1, gPrtHexNewLine_c);
  002f 9efe01   [5]             LDHX  1,SP
  0032 af15     [2]             AIX   #21
  0034 89       [2]             PSHX  
  0035 8b       [2]             PSHH  
  0036 ae01     [2]             LDX   #1
  0038 a602     [2]             LDA   #2
  003a ac000000 [8]             CALL  UartUtil_PrintHex
  003e a702     [2]             AIS   #2
  0040          L40:    
  695:      break;
  696:    }
  697:    return errorNoError;
  0040 4f       [1]             CLRA  
  0041          L41:    
  698:  }
  0041 a702     [2]             AIS   #2
  0043 8d       [7]             RTC   
  699:  
  700:  /******************************************************************************
  701:  * The App_HandleMcpsInput(mcpsToNwkMessage_t *pMsgIn) function will handle 
  702:  * messages from the MCPS, e.g. Data Confirm, and Data Indication.
  703:  *
  704:  ******************************************************************************/
  705:  static void App_HandleMcpsInput(mcpsToNwkMessage_t *pMsgIn)
  706:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fe     [2]             AIS   #-2
  707:    switch(pMsgIn->msgType)
  0004 f6       [3]             LDA   ,X
  0005 2704     [3]             BEQ   LB ;abs = 000b
  0007 4b1f     [4]             DBNZA L28 ;abs = 0028
  0009 200b     [3]             BRA   L16 ;abs = 0016
  000b          LB:     
  708:    {
  709:      /* The MCPS-Data confirm is sent by the MAC to the network 
  710:         or application layer when data has been sent. */
  711:    case gMcpsDataCnf_c:
  712:      if(mcPendingPackets)
  000b c60000   [4]             LDA   mcPendingPackets
  000e 2718     [3]             BEQ   L28 ;abs = 0028
  713:        mcPendingPackets--;
  0010 450000   [3]             LDHX  @mcPendingPackets
  0013 7a       [4]             DEC   ,X
  0014 2012     [3]             BRA   L28 ;abs = 0028
  0016          L16:    
  714:      break;
  715:    
  716:    case gMcpsDataInd_c:
  717:      /* The MCPS-Data indication is sent by the MAC to the network 
  718:         or application layer when data has been received. We simply 
  719:         copy the received data to the UART. */
  720:      UartUtil_Tx(pMsgIn->msgData.dataInd.pMsdu, pMsgIn->msgData.dataInd.msduLength);
  0016 9ece1b   [5]             LDHX  27,X
  0019 9eff01   [5]             STHX  1,SP
  001c 9efe03   [5]             LDHX  3,SP
  001f e617     [3]             LDA   23,X
  0021 9efe01   [5]             LDHX  1,SP
  0024 ac000000 [8]             CALL  UartUtil_Tx
  0028          L28:    
  721:      break;
  722:    }
  723:  }
  0028 a704     [2]             AIS   #4
  002a 8d       [7]             RTC   
  724:  
  725:  /******************************************************************************
  726:  * The App_WaitMsg(nwkMessage_t *pMsg, uint8_t msgType) function does not, as
  727:  * the name implies, wait for a message, thus blocking the execution of the
  728:  * state machine. Instead the function analyzes the supplied message to determine
  729:  * whether or not the message is of the expected type.
  730:  * The function may return either of the following values:
  731:  *   errorNoError: The message was of the expected type.
  732:  *   errorNoMessage: The message pointer is NULL.
  733:  *   errorWrongConfirm: The message is not of the expected type.
  734:  *
  735:  ******************************************************************************/
  736:  static uint8_t App_WaitMsg(nwkMessage_t *pMsg, uint8_t msgType)
  737:  {
  738:    /* Do we have a message? If not, the exit with error code */
  739:    if(pMsg == NULL)
  0000 650000   [3]             CPHX  #0
  0003 2603     [3]             BNE   L8 ;abs = 0008
  740:      return errorNoMessage;
  0005 a603     [2]             LDA   #3
  0007 8d       [7]             RTC   
  0008          L8:     
  741:  
  742:    /* Is it the expected message type? If not then exit with error code */
  743:    if(pMsg->msgType != msgType)
  0008 f1       [3]             CMP   ,X
  0009 2703     [3]             BEQ   LE ;abs = 000e
  744:      return errorWrongConfirm;
  000b a601     [2]             LDA   #1
  000d 8d       [7]             RTC   
  000e          LE:     
  745:  
  746:    /* Found the expected message. Return with success code */
  747:    return errorNoError;
  000e 4f       [1]             CLRA  
  748:  }
  000f 8d       [7]             RTC   
  749:  
  750:  /******************************************************************************
  751:  * The App_TransmitUartData() function will perform (single/multi buffered)
  752:  * data transmissions of data received by the UART. Data could also come from
  753:  * other sources such as sensors etc. This is completely determined by the
  754:  * application. The constant mDefaultValueOfMaxPendingDataPackets_c determine the maximum
  755:  * number of packets pending for transmission in the MAC. A global variable
  756:  * is incremented each time a data packet is sent to the MCPS, and decremented
  757:  * when the corresponding MCPS-Data Confirm message is received. If the counter
  758:  * reaches the defined maximum no more data buffers are allocated until the
  759:  * counter is decreased below the maximum number of pending packets.
  760:  *
  761:  * The function uses the device information, that was stored when the device,
  762:  * associated to us, for building an MCPS-Data Request message. The message
  763:  * is sent to the MCPS service access point in the MAC.
  764:  ******************************************************************************/
  765:  static void App_TransmitUartData(void)
  766:  {   
  0000 a7f8     [2]             AIS   #-8
  767:    static uint8_t keysBuffer[mMaxKeysToReceive_c];
  768:    static uint8_t keysReceived = 0;
  769:    
  770:    const uint8_t broadcastaddress[8] = {0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};//added
  0002 a6ff     [2]             LDA   #-1
  0004 95       [2]             TSX   
  0005 f7       [2]             STA   ,X
  0006 e701     [3]             STA   1,X
  0008 6f02     [5]             CLR   2,X
  000a 6f03     [5]             CLR   3,X
  000c 6f04     [5]             CLR   4,X
  000e 6f05     [5]             CLR   5,X
  0010 6f06     [5]             CLR   6,X
  0012 6f07     [5]             CLR   7,X
  771:    
  772:    /* get data from UART */
  773:    if( keysReceived < mMaxKeysToReceive_c) 
  0014 c60000   [4]             LDA   keysReceived
  0017 a120     [2]             CMP   #32
  0019 2414     [3]             BCC   L2F ;abs = 002f
  774:    { 
  775:      if(UartX_GetByteFromRxBuffer(&keysBuffer[keysReceived])) 
  001b ab00     [2]             ADD   @keysBuffer
  001d 87       [2]             PSHA  
  001e 4f       [1]             CLRA  
  001f a900     [2]             ADC   @keysBuffer:MSB
  0021 88       [3]             PULX  
  0022 87       [2]             PSHA  
  0023 8a       [3]             PULH  
  0024 ac000000 [8]             CALL  Uart1_GetByteFromRxBuffer
  0028 4d       [1]             TSTA  
  0029 2704     [3]             BEQ   L2F ;abs = 002f
  776:      {
  777:      keysReceived++;
  002b 450000   [3]             LDHX  @keysReceived
  002e 7c       [4]             INC   ,X
  002f          L2F:    
  778:      }
  779:    }
  780:  	/* Use multi buffering for increased TX performance. It does not really
  781:       have any effect at a UART baud rate of 19200bps but serves as an
  782:       example of how the throughput may be improved in a real-world 
  783:       application where the data rate is of concern. */
  784:    if( (mcPendingPackets < mDefaultValueOfMaxPendingDataPackets_c) && (mpPacket == NULL) ) 
  002f c60000   [4]             LDA   mcPendingPackets
  0032 a102     [2]             CMP   #2
  0034 240e     [3]             BCC   L44 ;abs = 0044
  0036 320000   [5]             LDHX  mpPacket
  0039 2609     [3]             BNE   L44 ;abs = 0044
  785:    {
  786:      /* If the maximum number of pending data buffes is below maximum limit 
  787:         and we do not have a data buffer already then allocate one. */
  788:      mpPacket = MSG_Alloc(gMaxRxTxDataLength_c);
  003b a68d     [2]             LDA   #-115
  003d ac000000 [8]             CALL  MM_Alloc
  0041 960000   [5]             STHX  mpPacket
  0044          L44:    
  789:    }
  790:  
  791:    if(mpPacket != NULL)
  0044 320000   [5]             LDHX  mpPacket
  0047 277e     [3]             BEQ   LC7 ;abs = 00c7
  792:    {
  793:        /* get data from UART */        
  794:        mpPacket->msgData.dataReq.pMsdu = (uint8_t*)(&(mpPacket->msgData.dataReq.pMsdu)) + sizeof(uint8_t*);
  0049 af1c     [2]             AIX   #28
  004b 9f       [1]             TXA   
  004c 8b       [2]             PSHH  
  004d 320000   [5]             LDHX  mpPacket
  0050 e71b     [3]             STA   27,X
  0052 86       [3]             PULA  
  0053 e71a     [3]             STA   26,X
  795:        FLib_MemCpy(mpPacket->msgData.dataReq.pMsdu, (uint8_t*) keysBuffer, keysReceived);
  0055 9ece1a   [5]             LDHX  26,X
  0058 89       [2]             PSHX  
  0059 8b       [2]             PSHH  
  005a 450000   [3]             LDHX  @keysBuffer
  005d c60000   [4]             LDA   keysReceived
  0060 ac000000 [8]             CALL  FLib_MemCpy
  0064 a702     [2]             AIS   #2
  796:  
  797:        /* Data was available in the UART receive buffer. Now create an
  798:           MCPS-Data Request message containing the UART data. */
  799:        mpPacket->msgType = gMcpsDataReq_c;
  0066 320000   [5]             LDHX  mpPacket
  0069 7f       [4]             CLR   ,X
  800:        /* Create the header using device information stored when creating 
  801:           the association response. In this simple example the use of short
  802:           addresses is hardcoded. In a real world application we must be
  803:           flexible, and use the address mode required by the given situation. */
  804:        
  805:        //FLib_MemCpy(mpPacket->msgData.dataReq.dstAddr, maDeviceShortAddress, 2);
  806:        FLib_MemCpy(mpPacket->msgData.dataReq.dstAddr, broadcastaddress, 2);//changed
  006a af01     [2]             AIX   #1
  006c 89       [2]             PSHX  
  006d 8b       [2]             PSHH  
  006e 95       [2]             TSX   
  006f af02     [2]             AIX   #2
  0071 a602     [2]             LDA   #2
  0073 ac000000 [8]             CALL  FLib_MemCpy
  0077 a702     [2]             AIS   #2
  807:        FLib_MemCpy(mpPacket->msgData.dataReq.srcAddr, (void *)maShortAddress, 2);
  0079 320000   [5]             LDHX  mpPacket
  007c af0c     [2]             AIX   #12
  007e 89       [2]             PSHX  
  007f 8b       [2]             PSHH  
  0080 450000   [3]             LDHX  @maShortAddress
  0083 a602     [2]             LDA   #2
  0085 ac000000 [8]             CALL  FLib_MemCpy
  0089 a702     [2]             AIS   #2
  808:        FLib_MemCpy(mpPacket->msgData.dataReq.dstPanId, (void *)maPanId, 2);
  008b 320000   [5]             LDHX  mpPacket
  008e af09     [2]             AIX   #9
  0090 ac0000d9 [8]             CALL  App_TransmitUartData:217
  809:        FLib_MemCpy(mpPacket->msgData.dataReq.srcPanId, (void *)maPanId, 2);
  0094 320000   [5]             LDHX  mpPacket
  0097 af14     [2]             AIX   #20
  0099 ac0000d9 [8]             CALL  App_TransmitUartData:217
  810:        mpPacket->msgData.dataReq.dstAddrMode = gAddrModeShort_c;
  009d a602     [2]             LDA   #2
  009f 320000   [5]             LDHX  mpPacket
  00a2 e70b     [3]             STA   11,X
  811:        mpPacket->msgData.dataReq.srcAddrMode = gAddrModeShort_c;
  00a4 e716     [3]             STA   22,X
  812:        mpPacket->msgData.dataReq.msduLength = keysReceived;
  00a6 c60000   [4]             LDA   keysReceived
  00a9 e717     [3]             STA   23,X
  813:        /* Request MAC level acknowledgement, and 
  814:           indirect transmission of the data packet */
  815:        //mpPacket->msgData.dataReq.txOptions = gTxOptsAck_c | gTxOptsIndirect_c;
  816:        mpPacket->msgData.dataReq.txOptions = 0;//changed
  00ab 6f19     [5]             CLR   25,X
  817:        /* Give the data packet a handle. The handle is
  818:           returned in the MCPS-Data Confirm message. */
  819:        mpPacket->msgData.dataReq.msduHandle = mMsduHandle++;
  00ad c60000   [4]             LDA   mMsduHandle
  00b0 e718     [3]             STA   24,X
  00b2 4c       [1]             INCA  
  00b3 c70000   [4]             STA   mMsduHandle
  820:  #ifdef gMAC2006_d
  821:  	  mpPacket->msgData.dataReq.securityLevel = 0;
  822:  #endif //gMAC2006_d	  
  823:        
  824:        /* Send the Data Request to the MCPS */
  825:        (void)MSG_Send(NWK_MCPS, mpPacket);
  00b6 ac000000 [8]             CALL  NWK_MCPS_SapHandler
  826:        /* Prepare for another data buffer */
  827:        mpPacket = NULL;
  00ba 5f       [1]             CLRX  
  00bb 8c       [1]             CLRH  
  00bc 960000   [5]             STHX  mpPacket
  828:        mcPendingPackets++;
  00bf 450000   [3]             LDHX  @mcPendingPackets
  00c2 7c       [4]             INC   ,X
  829:        /* Receive another pressed keys */
  830:        keysReceived = 0;
  00c3 4f       [1]             CLRA  
  00c4 c70000   [4]             STA   keysReceived
  00c7          LC7:    
  831:    }
  832:    
  833:    /* If the keysBuffer[] wasn't send over the air because there are too many pending packets, */
  834:    /* try to send it later   */
  835:    if (keysReceived)
  00c7 c60000   [4]             LDA   keysReceived
  00ca 270a     [3]             BEQ   LD6 ;abs = 00d6
  836:    {
  837:    TS_SendEvent(gAppTaskID_c, gAppEvtRxFromUart_c);
  00cc c60000   [4]             LDA   gAppTaskID_c
  00cf ae02     [2]             LDX   #2
  00d1 8c       [1]             CLRH  
  00d2 ac000000 [8]             CALL  TS_SendEvent
  00d6          LD6:    
  838:    }
  839:  }
  00d6 a708     [2]             AIS   #8
  00d8 8d       [7]             RTC   
  00d9          LD9:    
  00d9 89       [2]             PSHX  
  00da 8b       [2]             PSHH  
  00db 450000   [3]             LDHX  @maPanId
  00de a602     [2]             LDA   #2
  00e0 ac000000 [8]             CALL  FLib_MemCpy
  00e4 a702     [2]             AIS   #2
  00e6 8d       [7]             RTC   
  840:  
  841:  /*****************************************************************************
  842:  * Function to handle a generic key press. Called for all keys.
  843:  *****************************************************************************/
  844:  static void App_HandleGenericKey(void)
  845:  {
  846:    if(gState == stateInit)
  0000 c60000   [4]             LDA   gState
  0003 262a     [3]             BNE   L2F ;abs = 002f
  847:    {
  848:      StopLed1Flashing();
  0005 a601     [2]             LDA   #1
  0007 ac000000 [8]             CALL  LED_StopFlash
  849:      StopLed2Flashing();
  000b a602     [2]             LDA   #2
  000d ac000000 [8]             CALL  LED_StopFlash
  850:      StopLed3Flashing();
  0011 a604     [2]             LDA   #4
  0013 ac000000 [8]             CALL  LED_StopFlash
  851:      StopLed4Flashing();
  0017 a608     [2]             LDA   #8
  0019 ac000000 [8]             CALL  LED_StopFlash
  852:      Led1Off();
  001d 1000     [5]             BSET  0,0
  853:      Led2Off();
  001f 1800     [5]             BSET  4,0
  854:      Led3Off();
  0021 1006     [5]             BSET  0,6
  855:      Led4Off();
  0023 1206     [5]             BSET  1,6
  856:      LCD_ClearDisplay();
  857:      LCD_WriteString(1,"Application");
  858:      LCD_WriteString(2,"    started");     
  859:      TS_SendEvent(gAppTaskID_c, gAppEvtDummyEvent_c);       
  0025 c60000   [4]             LDA   gAppTaskID_c
  0028 ae01     [2]             LDX   #1
  002a 8c       [1]             CLRH  
  002b ac000000 [8]             CALL  TS_SendEvent
  002f          L2F:    
  860:    }
  861:  }
  002f 8d       [7]             RTC   
  862:  
  863:  /*****************************************************************************
  864:  * Handles all key events for this device.
  865:  * Interface assumptions: None
  866:  * Return value: None
  867:  *****************************************************************************/
  868:  #if (gMC1323xMatrixKBD_d == TRUE)
  869:  static void App_HandleKeys(uint8_t events, uint8_t pressedKey)   
  870:  {
  871:   (void)events;
  872:   (void)pressedKey;
  873:   App_HandleGenericKey();
  0000 ac000000 [8]             CALL  App_HandleGenericKey
  874:  }
  0004 8d       [7]             RTC   
  875:  #else
  876:  static void App_HandleKeys(key_event_t events)
  877:  {
  878:    switch ( events ) 
  879:      { 
  880:        case gKBD_EventSW1_c:
  881:        case gKBD_EventSW2_c:
  882:        case gKBD_EventSW3_c:
  883:        case gKBD_EventSW4_c:
  884:        case gKBD_EventLongSW1_c:
  885:        case gKBD_EventLongSW2_c:
  886:        case gKBD_EventLongSW3_c:
  887:        case gKBD_EventLongSW4_c:
  888:         App_HandleGenericKey();
  889:      break;
  890:      }    
  891:  }                          
  892:  #endif //gMC1323xMatrixKBD_d
  893:  /*****************************************************************************
  894:  * The DeepSleepWakeupStackProc(void) function is called each time the 
  895:  * application exits the DeepSleep mode .
  896:  * 
  897:  * Return value:
  898:  *     None
  899:  *****************************************************************************/
  900:  void DeepSleepWakeupStackProc(void){
  901:    return;
  902:  }
  0000 8d       [7]             RTC   
  903:  
  904:  /******************************************************************************
  905:  * The following functions are called by the MAC to put messages into the
  906:  * Application's queue. They need to be defined even if they are not used
  907:  * in order to avoid linker errors.
  908:  ******************************************************************************/
  909:  
  910:  uint8_t MLME_NWK_SapHandler(nwkMessage_t * pMsg)
  911:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  912:    /* Put the incoming MLME message in the applications input queue. */
  913:    MSG_Queue(&mMlmeNwkInputQueue, pMsg);
  0002 450000   [3]             LDHX  @mMlmeNwkInputQueue
  0005 89       [2]             PSHX  
  0006 8b       [2]             PSHH  
  0007 9efe03   [5]             LDHX  3,SP
  000a ac000000 [8]             CALL  List_AddTail
  000e a702     [2]             AIS   #2
  914:    TS_SendEvent(gAppTaskID_c, gAppEvtMessageFromMLME_c);
  0010 c60000   [4]             LDA   gAppTaskID_c
  0013 ae04     [2]             LDX   #4
  0015 8c       [1]             CLRH  
  0016 ac000000 [8]             CALL  TS_SendEvent
  915:    return gSuccess_c;
  001a 4f       [1]             CLRA  
  916:  }
  001b a702     [2]             AIS   #2
  001d 8d       [7]             RTC   
  917:  
  918:  uint8_t MCPS_NWK_SapHandler(mcpsToNwkMessage_t *pMsg)
  919:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  920:    /* Put the incoming MCPS message in the applications input queue. */
  921:    MSG_Queue(&mMcpsNwkInputQueue, pMsg);
  0002 450000   [3]             LDHX  @mMcpsNwkInputQueue
  0005 89       [2]             PSHX  
  0006 8b       [2]             PSHH  
  0007 9efe03   [5]             LDHX  3,SP
  000a ac000000 [8]             CALL  List_AddTail
  000e a702     [2]             AIS   #2
  922:    TS_SendEvent(gAppTaskID_c, gAppEvtMessageFromMCPS_c);
  0010 c60000   [4]             LDA   gAppTaskID_c
  0013 ae08     [2]             LDX   #8
  0015 8c       [1]             CLRH  
  0016 ac000000 [8]             CALL  TS_SendEvent
  923:    return gSuccess_c;
  001a 4f       [1]             CLRA  
  924:  }
  001b a702     [2]             AIS   #2
  001d 8d       [7]             RTC   
  925:  
  926:  uint8_t ASP_APP_SapHandler(aspToAppMsg_t *pMsg)
  927:  {
  928:    /* If the message is not handled anywhere it must be freed. */
  929:    MSG_Free(pMsg);
  0000 ac000000 [8]             CALL  MM_Free
  930:    return gSuccess_c;
  0004 4f       [1]             CLRA  
  931:  }
  0005 8d       [7]             RTC   
  932:  
  933:  /******************************************************************************/
  934:  
