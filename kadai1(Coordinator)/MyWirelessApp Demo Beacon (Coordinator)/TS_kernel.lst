*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /*****************************************************************************
    2:  * Kernel / task handling implementation.
    3:  *
    4:  * (c) Copyright 2006, Freescale, Inc. All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor.
   10:  *
   11:  *****************************************************************************/
   12:  
   13:  #include "EmbeddedTypes.h"
   14:  #include "FunctionLib.h"
   15:  
   16:  #include "TS_Interface.h"
   17:  #include "TS_Kernel.h"
   18:  #include "IrqControlLib.h"
   19:  
   20:  #include "TMR_Interface.h"
   21:  
   22:  /*****************************************************************************
   23:  ******************************************************************************
   24:  * Private macros
   25:  ******************************************************************************
   26:  *****************************************************************************/
   27:  
   28:  /* Number of elements in an array. */
   29:  #ifndef NumberOfElements
   30:  #define NumberOfElements(array)     ((sizeof(array) / (sizeof(array[0]))))
   31:  #endif
   32:  
   33:  /*****************************************************************************
   34:  ******************************************************************************
   35:  * Private type declarations
   36:  ******************************************************************************
   37:  *****************************************************************************/
   38:  
   39:  /* If priority == gTsInvalidTaskPriority_c, this entry is not in use. */
   40:  typedef struct tsTaskTableEntry_tag {
   41:    event_t events;
   42:    tsTaskPriority_t priority;
   43:    pfTsTaskEventHandler_t pfTaskEventHandler;
   44:  } tsTaskTableEntry_t;
   45:  
   46:  /*****************************************************************************
   47:  ******************************************************************************
   48:  * Private memory definitions
   49:  ******************************************************************************
   50:  *****************************************************************************/
   51:  
   52:  /* List of task descriptors. */
   53:  tsTaskTableEntry_t maTsTaskTable[gTsMaxTasks_c];
   54:  
   55:  /* List of task ids (== indexes into maTsTaskTable[]), sorted by task */
   56:  /* priority, with the highest priority tasks at lower index positions */
   57:  /* in this table. */
   58:  tsTaskID_t maTsTaskIDsByPriority[NumberOfElements(maTsTaskTable)];
   59:  
   60:  #if gTsDebug_d
   61:  static uint16_t TsNonIdleLoopCounter = 0;
   62:  static uint16_t TsNonIdleLoopCounterMax = 0;
   63:  static uint32_t TsMainLoopCounter = 0;
   64:  #endif
   65:  
   66:  /*****************************************************************************
   67:  ******************************************************************************
   68:  * Private prototypes
   69:  ******************************************************************************
   70:  *****************************************************************************/
   71:  
   72:  /*****************************************************************************
   73:  ******************************************************************************
   74:  * Public memory definitions
   75:  ******************************************************************************
   76:  *****************************************************************************/
   77:  
   78:  tsTaskID_t gIdleTaskID;
   79:  
   80:  /*****************************************************************************
   81:  ******************************************************************************
   82:  * Public functions
   83:  ******************************************************************************
   84:  *****************************************************************************/
   85:  
   86:  /* Remove events from a task's event flags. */
   87:  void TS_ClearEvent
   88:    (
   89:    tsTaskID_t taskID,
   90:    event_t events
   91:    )
   92:  {
  0000 87       [2]             PSHA  
  0001 89       [2]             PSHX  
  0002 8b       [2]             PSHH  
  0003 8b       [2]             PSHH  
   93:    uint8_t ccr;
   94:  
   95:    IrqControlLib_BackupIrqStatus(ccr);
  0004 85       [1]             TPA   
  0005 95       [2]             TSX   
  0006 f7       [2]             STA   ,X
   96:    IrqControlLib_DisableAllIrqs();
  0007 9b       [1]             SEI   
   97:    maTsTaskTable[taskID].events &= ~events;
  0008 e603     [3]             LDA   3,X
  000a ae06     [2]             LDX   #6
  000c 42       [5]             MUL   
  000d 87       [2]             PSHA  
  000e 95       [2]             TSX   
  000f e603     [3]             LDA   3,X
  0011 43       [1]             COMA  
  0012 87       [2]             PSHA  
  0013 e602     [3]             LDA   2,X
  0015 43       [1]             COMA  
  0016 8c       [1]             CLRH  
  0017 9eee02   [4]             LDX   2,SP
  001a 87       [2]             PSHA  
  001b 9ee602   [4]             LDA   2,SP
  001e d40001   [4]             AND   @maTsTaskTable:1,X
  0021 d70001   [4]             STA   @maTsTaskTable:1,X
  0024 86       [3]             PULA  
  0025 d40000   [4]             AND   @maTsTaskTable,X
  0028 d70000   [4]             STA   @maTsTaskTable,X
  002b a702     [2]             AIS   #2
   98:    IrqControlLib_RestoreIrqStatus(ccr);
  002d 95       [2]             TSX   
  002e f6       [3]             LDA   ,X
  002f 84       [1]             TAP   
   99:  }
  0030 a704     [2]             AIS   #4
  0032 8d       [7]             RTC   
  100:  
  101:  /****************************************************************************/
  102:  
  103:  /* Add a task to the task table.
  104:   * Return the task ID, or gTsInvalidTaskID_c if the task table is full.
  105:   *
  106:   * taskPriority == 0 is reserved for the idle task, and must never be specified
  107:   * for any other task. TS_CreateTask() does not check for this.
  108:   *
  109:   * Note that TS_CreateTask() does not prevent a given event handler function
  110:   * pointer from being added more than once to the task table.
  111:   *
  112:   * Note that if TS_CreateTask() is called with a taskPriority that is the
  113:   * same as the priority of a task that is already in the task table, the
  114:   * two tasks will end up in adjacent slots in the table. Which one is
  115:   * called first by the scheduler is not specified.
  116:   */
  117:  tsTaskID_t TS_CreateTask
  118:    (
  119:    tsTaskPriority_t taskPriority,
  120:    pfTsTaskEventHandler_t pfTaskEventHandler
  121:    )
  122:  {
  0000 a7fb     [2]             AIS   #-5
  123:    index_t i;
  124:    index_t freeSlot;
  125:    index_t sizeofTaskId = sizeof(maTsTaskIDsByPriority[0]);
  0002 a601     [2]             LDA   #1
  0004 95       [2]             TSX   
  0005 e704     [3]             STA   4,X
  126:  
  127:    /* Try to find a free slot in the task table. */
  128:    for (i = 0, freeSlot = gTsInvalidTaskID_c;
  0007 40       [1]             NEGA  
  0008 e703     [3]             STA   3,X
  000a 4f       [1]             CLRA  
  000b 2017     [3]             BRA   L24 ;abs = 0024
  000d          LD:     
  129:         (i < NumberOfElements(maTsTaskTable));
  130:         ++i) {
  131:      if (maTsTaskTable[i].priority == gTsInvalidTaskPriority_c) {
  000d ae06     [2]             LDX   #6
  000f 9ee701   [4]             STA   1,SP
  0012 42       [5]             MUL   
  0013 8c       [1]             CLRH  
  0014 97       [1]             TAX   
  0015 de0002   [4]             LDX   @maTsTaskTable:2,X
  0018 5c       [1]             INCX  
  0019 2606     [3]             BNE   L21 ;abs = 0021
  132:        freeSlot = i;
  001b 95       [2]             TSX   
  001c f6       [3]             LDA   ,X
  001d e703     [3]             STA   3,X
  133:        break;
  001f 2007     [3]             BRA   L28 ;abs = 0028
  0021          L21:    
  0021 95       [2]             TSX   
  0022 f6       [3]             LDA   ,X
  0023 4c       [1]             INCA  
  0024          L24:    
  0024 a107     [2]             CMP   #7
  0026 25e5     [3]             BCS   LD ;abs = 000d
  0028          L28:    
  134:      }
  135:    }                                     /* for (i = 0, freeSlot = 0xFF; ... */
  136:  
  137:    if (freeSlot == gTsInvalidTaskID_c) {
  0028 e603     [3]             LDA   3,X
  002a a1ff     [2]             CMP   #-1
  002c 2603     [3]             BNE   L31 ;abs = 0031
  138:      return gTsInvalidTaskID_c;
  002e cc00b3   [4]             JMP   LB3 ;abs = 00b3
  0031          L31:    
  139:    }
  140:  
  141:    maTsTaskTable[freeSlot].events = 0;
  0031 ae06     [2]             LDX   #6
  0033 42       [5]             MUL   
  0034 8c       [1]             CLRH  
  0035 97       [1]             TAX   
  0036 4f       [1]             CLRA  
  0037 d70001   [4]             STA   @maTsTaskTable:1,X
  003a d70000   [4]             STA   @maTsTaskTable,X
  142:    maTsTaskTable[freeSlot].pfTaskEventHandler = pfTaskEventHandler;
  003d 9ee60b   [4]             LDA   11,SP
  0040 d70005   [4]             STA   @maTsTaskTable:5,X
  0043 9ee60a   [4]             LDA   10,SP
  0046 d70004   [4]             STA   @maTsTaskTable:4,X
  0049 9ee609   [4]             LDA   9,SP
  004c d70003   [4]             STA   @maTsTaskTable:3,X
  143:    maTsTaskTable[freeSlot].priority = taskPriority;
  004f 9ee60c   [4]             LDA   12,SP
  0052 d70002   [4]             STA   @maTsTaskTable:2,X
  0055 5f       [1]             CLRX  
  0056          L56:    
  144:  
  145:    /* maTsTaskIDsByPriority is maintained in sorted order, so 1) find the */
  146:    /* place where this new task should go; 2) move everything up; and 3) add */
  147:    /* the new task. */
  148:    for (i = 0; i < NumberOfElements(maTsTaskIDsByPriority); i++) {
  149:      /* If the end of the table is reached, just add the new task. */
  150:      if (maTsTaskIDsByPriority[i] == gTsInvalidTaskPriority_c) {
  0056 8c       [1]             CLRH  
  0057 d60000   [4]             LDA   @maTsTaskIDsByPriority,X
  005a 41ff4f   [4]             CBEQA #-1,LAC ;abs = 00ac
  151:        break;
  152:      }
  153:  
  154:      /* If all tasks from this point on have lower priorities than the task */
  155:      /* being added, move the rest up and insert the new one. */
  156:      if (maTsTaskTable[maTsTaskIDsByPriority[i]].priority < taskPriority) {
  005d 87       [2]             PSHA  
  005e a606     [2]             LDA   #6
  0060 9eef02   [4]             STX   2,SP
  0063 88       [3]             PULX  
  0064 42       [5]             MUL   
  0065 97       [1]             TAX   
  0066 9ee60c   [4]             LDA   12,SP
  0069 d10002   [4]             CMP   @maTsTaskTable:2,X
  006c 2336     [3]             BLS   LA4 ;abs = 00a4
  157:        FLib_MemInPlaceCpy(&maTsTaskIDsByPriority[i + 1],
  006e 95       [2]             TSX   
  006f f6       [3]             LDA   ,X
  0070 4c       [1]             INCA  
  0071 ab00     [2]             ADD   @maTsTaskIDsByPriority
  0073 87       [2]             PSHA  
  0074 4f       [1]             CLRA  
  0075 a900     [2]             ADC   @maTsTaskIDsByPriority:MSB
  0077 87       [2]             PSHA  
  0078 f6       [3]             LDA   ,X
  0079 ab00     [2]             ADD   @maTsTaskIDsByPriority
  007b e701     [3]             STA   1,X
  007d 4f       [1]             CLRA  
  007e a900     [2]             ADC   @maTsTaskIDsByPriority:MSB
  0080 ee01     [3]             LDX   1,X
  0082 87       [2]             PSHA  
  0083 8a       [3]             PULH  
  0084 a607     [2]             LDA   #7
  0086 9ee003   [4]             SUB   3,SP
  0089 4a       [1]             DECA  
  008a 9ee704   [4]             STA   4,SP
  008d 9ee607   [4]             LDA   7,SP
  0090 9eef05   [4]             STX   5,SP
  0093 9eee04   [4]             LDX   4,SP
  0096 42       [5]             MUL   
  0097 9eee05   [4]             LDX   5,SP
  009a ac000000 [8]             CALL  FLib_MemInPlaceCpy
  009e a702     [2]             AIS   #2
  158:                           &maTsTaskIDsByPriority[i],
  159:                           (NumberOfElements(maTsTaskIDsByPriority) - i - 1) * sizeofTaskId);
  160:        break;
  00a0 95       [2]             TSX   
  00a1 fe       [3]             LDX   ,X
  00a2 2008     [3]             BRA   LAC ;abs = 00ac
  00a4          LA4:    
  00a4 95       [2]             TSX   
  00a5 f6       [3]             LDA   ,X
  00a6 4c       [1]             INCA  
  00a7 a107     [2]             CMP   #7
  00a9 97       [1]             TAX   
  00aa 25aa     [3]             BCS   L56 ;abs = 0056
  00ac          LAC:    
  161:      }
  162:    }                                     /* for (i = 0; ... */
  163:    maTsTaskIDsByPriority[i] = freeSlot;
  00ac 8c       [1]             CLRH  
  00ad 9ee604   [4]             LDA   4,SP
  00b0 d70000   [4]             STA   @maTsTaskIDsByPriority,X
  00b3          LB3:    
  164:  
  165:    return freeSlot;
  166:  }                                       /* TS_CreateTask() */
  00b3 a705     [2]             AIS   #5
  00b5 8d       [7]             RTC   
  167:  
  168:  /****************************************************************************/
  169:  
  170:  /* Remove a task from the task table. */
  171:  void TS_DestroyTask
  172:    (
  173:    tsTaskID_t taskID
  174:    )
  175:  {
  0000 87       [2]             PSHA  
  0001 a7fd     [2]             AIS   #-3
  176:    index_t i;
  177:    index_t sizeofTaskId = sizeof(maTsTaskIDsByPriority[0]);
  0003 a601     [2]             LDA   #1
  0005 95       [2]             TSX   
  0006 e702     [3]             STA   2,X
  178:  
  179:    if (maTsTaskTable[taskID].priority == gTsInvalidTaskPriority_c) {
  0008 e603     [3]             LDA   3,X
  000a ae06     [2]             LDX   #6
  000c 42       [5]             MUL   
  000d 95       [2]             TSX   
  000e f7       [2]             STA   ,X
  000f 8c       [1]             CLRH  
  0010 97       [1]             TAX   
  0011 d60002   [4]             LDA   @maTsTaskTable:2,X
  0014 41ff53   [4]             CBEQA #-1,L6A ;abs = 006a
  180:      return;
  181:    }
  182:  
  183:    /* Mark this slot in the task descriptor table as unused. */
  184:    maTsTaskTable[taskID].priority = gTsInvalidTaskPriority_c;
  0017 9eee01   [4]             LDX   1,SP
  001a a6ff     [2]             LDA   #-1
  001c d70002   [4]             STA   @maTsTaskTable:2,X
  001f 5f       [1]             CLRX  
  0020          L20:    
  185:  
  186:    /* Remove this task's ID from the priority table. Find it's position */
  187:    /* in the table, and shift everything else down. */
  188:    for (i = 0; i < NumberOfElements(maTsTaskIDsByPriority); i++) {
  189:      if (maTsTaskIDsByPriority[i] == taskID) {
  0020 8c       [1]             CLRH  
  0021 9ee604   [4]             LDA   4,SP
  0024 d10000   [4]             CMP   @maTsTaskIDsByPriority,X
  0027 263c     [3]             BNE   L65 ;abs = 0065
  190:        FLib_MemCpy(&maTsTaskIDsByPriority[i],
  0029 9f       [1]             TXA   
  002a ab00     [2]             ADD   @maTsTaskIDsByPriority
  002c 87       [2]             PSHA  
  002d 4f       [1]             CLRA  
  002e a900     [2]             ADC   @maTsTaskIDsByPriority:MSB
  0030 87       [2]             PSHA  
  0031 9eef03   [4]             STX   3,SP
  0034 5c       [1]             INCX  
  0035 9f       [1]             TXA   
  0036 ab00     [2]             ADD   @maTsTaskIDsByPriority
  0038 95       [2]             TSX   
  0039 e703     [3]             STA   3,X
  003b 4f       [1]             CLRA  
  003c a900     [2]             ADC   @maTsTaskIDsByPriority:MSB
  003e ee03     [3]             LDX   3,X
  0040 87       [2]             PSHA  
  0041 8a       [3]             PULH  
  0042 a607     [2]             LDA   #7
  0044 9ee003   [4]             SUB   3,SP
  0047 4a       [1]             DECA  
  0048 9ee703   [4]             STA   3,SP
  004b 9ee605   [4]             LDA   5,SP
  004e 9eef04   [4]             STX   4,SP
  0051 9eee03   [4]             LDX   3,SP
  0054 42       [5]             MUL   
  0055 9eee04   [4]             LDX   4,SP
  0058 ac000000 [8]             CALL  FLib_MemCpy
  005c a702     [2]             AIS   #2
  191:                    &maTsTaskIDsByPriority[i + 1],
  192:                    (NumberOfElements(maTsTaskIDsByPriority) - i - 1) * sizeofTaskId);
  193:  
  194:        /* Note that exactly one entry was removed. */
  195:        maTsTaskIDsByPriority[NumberOfElements(maTsTaskIDsByPriority) - 1] = gTsInvalidTaskID_c;
  005e a6ff     [2]             LDA   #-1
  0060 c70006   [4]             STA   maTsTaskIDsByPriority:6
  196:        break;
  0063 2005     [3]             BRA   L6A ;abs = 006a
  0065          L65:    
  0065 5c       [1]             INCX  
  0066 a307     [2]             CPX   #7
  0068 25b6     [3]             BCS   L20 ;abs = 0020
  006a          L6A:    
  197:      }
  198:    }
  199:  
  200:    return;
  201:  }                                       /* TS_DestroyTask() */
  006a a704     [2]             AIS   #4
  006c 8d       [7]             RTC   
  202:  
  203:  /****************************************************************************/
  204:  
  205:  /* Initialize the task scheduler. */
  206:  void TS_Init(void) {
  207:    FLib_MemSet(maTsTaskTable, gTsInvalidTaskPriority_c, sizeof(maTsTaskTable));
  0000 450000   [3]             LDHX  @maTsTaskTable
  0003 89       [2]             PSHX  
  0004 8b       [2]             PSHH  
  0005 aeff     [2]             LDX   #-1
  0007 a62a     [2]             LDA   #42
  0009 ac000000 [8]             CALL  FLib_MemSet
  000d a702     [2]             AIS   #2
  208:    FLib_MemSet(maTsTaskIDsByPriority, gTsInvalidTaskID_c, sizeof(maTsTaskIDsByPriority));
  000f 450000   [3]             LDHX  @maTsTaskIDsByPriority
  0012 89       [2]             PSHX  
  0013 8b       [2]             PSHH  
  0014 aeff     [2]             LDX   #-1
  0016 a607     [2]             LDA   #7
  0018 ac000000 [8]             CALL  FLib_MemSet
  001c a702     [2]             AIS   #2
  209:  
  210:    gIdleTaskID = TS_CreateTask(gTsIdleTaskPriority_c, IdleTask);
  001e 4f       [1]             CLRA  
  001f 87       [2]             PSHA  
  0020 450000   [3]             LDHX  @IdleTask
  0023 89       [2]             PSHX  
  0024 8b       [2]             PSHH  
  0025 a600     [2]             LDA   @IdleTask:PAGE
  0027 87       [2]             PSHA  
  0028 ac000000 [8]             CALL  TS_CreateTask
  002c a704     [2]             AIS   #4
  002e c70000   [4]             STA   gIdleTaskID
  211:  }                                       /* TS_Init() */
  0031 8d       [7]             RTC   
  212:  
  213:  /****************************************************************************/
  214:  
  215:  /* Returns true if there are any pending events for any task. */
  216:  /* This function must not disable/enable interrupts. If it did, an */
  217:  /* an interrupt could be delayed until just after the task table scan, */
  218:  /* which might invalidate the result of the scan. The caller should */
  219:  /* consider whether or not to dis/enable interrupts before calling. */
  220:  bool_t TS_PendingEvents(void) {
  0000 8b       [2]             PSHH  
  221:    index_t i;
  222:  
  223:    for (i = 0; i < NumberOfElements(maTsTaskTable); ++i) {
  0001 95       [2]             TSX   
  0002 7f       [4]             CLR   ,X
  0003          L3:     
  224:      if (( maTsTaskTable[i].priority != gTsInvalidTaskPriority_c)
  0003 f6       [3]             LDA   ,X
  0004 ae06     [2]             LDX   #6
  0006 42       [5]             MUL   
  0007 8c       [1]             CLRH  
  0008 97       [1]             TAX   
  0009 de0002   [4]             LDX   @maTsTaskTable:2,X
  000c 51ff11   [4]             CBEQX #-1,L20 ;abs = 0020
  225:          && maTsTaskTable[i].events) {
  000f 9ee601   [4]             LDA   1,SP
  0012 ae06     [2]             LDX   #6
  0014 42       [5]             MUL   
  0015 97       [1]             TAX   
  0016 9ebe0000 [6]             LDHX  @maTsTaskTable,X
  001a 2704     [3]             BEQ   L20 ;abs = 0020
  226:        return TRUE;
  001c a601     [2]             LDA   #1
  227:      }
  228:    }
  229:  
  230:    return FALSE;
  231:  }
  001e 8a       [3]             PULH  
  001f 8d       [7]             RTC   
  0020          L20:    
  0020 95       [2]             TSX   
  0021 7c       [4]             INC   ,X
  0022 f6       [3]             LDA   ,X
  0023 a107     [2]             CMP   #7
  0025 25dc     [3]             BCS   L3 ;abs = 0003
  0027 4f       [1]             CLRA  
  0028 8a       [3]             PULH  
  0029 8d       [7]             RTC   
  232:  
  233:  /****************************************************************************/
  234:  
  235:  /* Send events to a task. */
  236:  void TS_SendEvent
  237:    (
  238:    tsTaskID_t taskID,
  239:    event_t events
  240:    )
  241:  {
  0000 87       [2]             PSHA  
  0001 89       [2]             PSHX  
  0002 8b       [2]             PSHH  
  0003 8b       [2]             PSHH  
  242:    uint8_t ccr;
  243:  
  244:    IrqControlLib_BackupIrqStatus(ccr);
  0004 85       [1]             TPA   
  0005 95       [2]             TSX   
  0006 f7       [2]             STA   ,X
  245:    IrqControlLib_DisableAllIrqs();
  0007 9b       [1]             SEI   
  246:    maTsTaskTable[taskID].events |= events;
  0008 e603     [3]             LDA   3,X
  000a ae06     [2]             LDX   #6
  000c 42       [5]             MUL   
  000d 87       [2]             PSHA  
  000e 95       [2]             TSX   
  000f e603     [3]             LDA   3,X
  0011 8c       [1]             CLRH  
  0012 88       [3]             PULX  
  0013 da0001   [4]             ORA   @maTsTaskTable:1,X
  0016 d70001   [4]             STA   @maTsTaskTable:1,X
  0019 9ee602   [4]             LDA   2,SP
  001c da0000   [4]             ORA   @maTsTaskTable,X
  001f d70000   [4]             STA   @maTsTaskTable,X
  247:    IrqControlLib_RestoreIrqStatus(ccr);
  0022 95       [2]             TSX   
  0023 f6       [3]             LDA   ,X
  0024 84       [1]             TAP   
  248:  }                                       /* TS_SendEvent() */
  0025 a704     [2]             AIS   #4
  0027 8d       [7]             RTC   
  249:  
  250:  /****************************************************************************/
  251:  
  252:  /* BeeStack's main task loop. Never returns. This function is the center of
  253:   * the task system.
  254:   */
  255:  void TS_Scheduler(void) {
  0000 a7f8     [2]             AIS   #-8
  0002          L2:     
  256:    index_t activeTask;
  257:    uint8_t ccr;
  258:    event_t events;
  259:    index_t i;
  260:    index_t taskID;
  261:  
  262:    /* maTsTaskIDsByPriority[] is maintained in task priority order. If there */
  263:    /* are fewer than the maximum number of tasks, the first gInvalidTaskID_c */
  264:    /* marks the end of the table. */
  265:    for (;;) {
  266:      /* Look for the highest priority task that has an event flag set. */
  267:      activeTask = gTsIdleTaskID_c;
  0002 95       [2]             TSX   
  0003 6f02     [5]             CLR   2,X
  268:      for (i = 0; i < NumberOfElements(maTsTaskIDsByPriority); ++i) {
  0005 6f03     [5]             CLR   3,X
  0007          L7:     
  269:        taskID = maTsTaskIDsByPriority[i];
  0007 ee03     [3]             LDX   3,X
  0009 8c       [1]             CLRH  
  000a d60000   [4]             LDA   @maTsTaskIDsByPriority,X
  000d 9ee705   [4]             STA   5,SP
  270:        if (taskID == gTsInvalidTaskID_c) {
  0010 a1ff     [2]             CMP   #-1
  0012 271d     [3]             BEQ   L31 ;abs = 0031
  271:          break;
  272:        }
  273:  
  274:        if (maTsTaskTable[taskID].events) {
  0014 ae06     [2]             LDX   #6
  0016 42       [5]             MUL   
  0017 97       [1]             TAX   
  0018 9ebe0000 [6]             LDHX  @maTsTaskTable,X
  001c 650000   [3]             CPHX  #0
  001f 2707     [3]             BEQ   L28 ;abs = 0028
  275:          activeTask = taskID;
  0021 95       [2]             TSX   
  0022 e604     [3]             LDA   4,X
  0024 e702     [3]             STA   2,X
  276:          break;
  0026 2009     [3]             BRA   L31 ;abs = 0031
  0028          L28:    
  0028 95       [2]             TSX   
  0029 6c03     [5]             INC   3,X
  002b e603     [3]             LDA   3,X
  002d a107     [2]             CMP   #7
  002f 25d6     [3]             BCS   L7 ;abs = 0007
  0031          L31:    
  277:        }
  278:      }
  279:  
  280:  #if gTsDebug_d
  281:      /* Record the maximum number of times this loop executes without */
  282:      /* a call to the idle task. */
  283:      ++TsMainLoopCounter;
  284:      if (activeTask == gTsIdleTaskID_c) {
  285:        if (TsNonIdleLoopCounterMax < TsNonIdleLoopCounter) {
  286:          TsNonIdleLoopCounterMax = TsNonIdleLoopCounter;
  287:        }
  288:        TsNonIdleLoopCounter = 0;
  289:      } else {
  290:        ++TsNonIdleLoopCounter;
  291:      }
  292:  #endif
  293:  
  294:      /* If there are no outstanding events, call the idle task. */
  295:      IrqControlLib_BackupIrqStatus(ccr);
  0031 85       [1]             TPA   
  0032 95       [2]             TSX   
  0033 e705     [3]             STA   5,X
  296:      IrqControlLib_DisableAllIrqs();
  0035 9b       [1]             SEI   
  297:      events = maTsTaskTable[activeTask].events;
  0036 e602     [3]             LDA   2,X
  0038 ae06     [2]             LDX   #6
  003a 42       [5]             MUL   
  003b 8c       [1]             CLRH  
  003c 97       [1]             TAX   
  003d 9ebe0000 [6]             LDHX  @maTsTaskTable,X
  0041 9eff07   [5]             STHX  7,SP
  298:      maTsTaskTable[activeTask].events = 0;
  0044 8c       [1]             CLRH  
  0045 97       [1]             TAX   
  0046 4f       [1]             CLRA  
  0047 d70001   [4]             STA   @maTsTaskTable:1,X
  004a d70000   [4]             STA   @maTsTaskTable,X
  299:      IrqControlLib_RestoreIrqStatus(ccr);
  004d 95       [2]             TSX   
  004e e605     [3]             LDA   5,X
  0050 84       [1]             TAP   
  300:  
  301:      (*maTsTaskTable[activeTask].pfTaskEventHandler)(events);
  0051 9efe07   [5]             LDHX  7,SP
  0054 89       [2]             PSHX  
  0055 8b       [2]             PSHH  
  0056 95       [2]             TSX   
  0057 e604     [3]             LDA   4,X
  0059 ae06     [2]             LDX   #6
  005b 42       [5]             MUL   
  005c 8c       [1]             CLRH  
  005d 97       [1]             TAX   
  005e 9ebe0004 [6]             LDHX  @maTsTaskTable:4,X
  0062 87       [2]             PSHA  
  0063 8b       [2]             PSHH  
  0064 86       [3]             PULA  
  0065 9ee704   [4]             STA   4,SP
  0068 86       [3]             PULA  
  0069 8c       [1]             CLRH  
  006a 9eef04   [4]             STX   4,SP
  006d 97       [1]             TAX   
  006e d60003   [4]             LDA   @maTsTaskTable:3,X
  0071 87       [2]             PSHA  
  0072 9efe04   [5]             LDHX  4,SP
  0075 ac000000 [8]             CALL  _CALL_STAR08_FAR
  0079 2087     [3]             BRA   L2 ;abs = 0002
  302:    }                                     /* for (;;) */
  303:  }                                       /* TS_Scheduler() */
  304:  
