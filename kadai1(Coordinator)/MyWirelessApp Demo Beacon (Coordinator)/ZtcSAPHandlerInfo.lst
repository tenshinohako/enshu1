*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /******************************************************************************
    2:  * Data and functions related to information about SAP Handlers.
    3:  *
    4:  * Copyright (c) 2008, Freescale, Inc.  All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from  Freescale Semiconductor.
   10:  *
   11:  * This file contains definitions of read-only data used by Ztc.
   12:  * Due to their size, the opcode description tables are in a separate file.
   13:  *
   14:  ******************************************************************************/
   15:  
   16:  #include "EmbeddedTypes.h"
   17:  #include "ZtcInterface.h"
   18:  
   19:  
   20:  #if gMacStandAlone_d
   21:  #include "Mapp.h"
   22:  #endif
   23:  
   24:  
   25:  #if gZtcIncluded_d
   26:  
   27:  #include "AppAspInterface.h"
   28:  #include "AspZtc.h"
   29:  
   30:  #include "ZtcPrivate.h"
   31:  #include "ZtcClientCommunication.h"
   32:  #include "ZtcMsgTypeInfo.h"
   33:  #include "ZtcSAPHandlerInfo.h"
   34:  #include "ZtcCopyData.h"
   35:  #include "Telec.h"
   36:  
   37:  /******************************************************************************
   38:  *******************************************************************************
   39:  * Public memory definitions
   40:  *******************************************************************************
   41:  ******************************************************************************/
   42:  
   43:  /* Master table of information about SAP Handlers. */
   44:  #define Sap(opcodeGroup, converse, intSAPIdName, \
   45:              pSAPFunc, modeTableIndex, msgQueue, msgEvent, pTaskID, \
   46:              msgTypeTable, msgTypeTableLen) \
   47:      extern ztcMsgTypeInfo_t const msgTypeTable[]; \
   48:      extern index_t const msgTypeTableLen;
   49:  #include "ZtcSAPHandlerInfoTbl.h"
   50:  
   51:  #if (gZtcMacGetSetPIBCapability_d || \
   52:       gSAPMessagesEnableMcps_d     || \
   53:       gSAPMessagesEnableMlme_d     || \
   54:       gSAPMessagesEnableAsp_d      || \
   55:       gZtcErrorReporting_d         || \
   56:       gSAPMessagesEnableNlde_d     || \
   57:       gSAPMessagesEnableNlme_d     || \
   58:       gSAPMessagesEnableApsde_d    || \
   59:       gSAPMessagesEnableAfde_d     || \
   60:       gSAPMessagesEnableApsme_d    || \
   61:       gSAPMessagesEnableZdp_d)
   62:  #define Sap(opcodeGroup, converse, intSAPIdName, \
   63:              pSAPFunc, modeTableIndex, msgQueue, msgEvent, pTaskID, \
   64:              msgTypeTable, msgTypeTableLen) \
   65:    {opcodeGroup, converse, intSAPIdName, pSAPFunc, modeTableIndex, \
   66:     msgQueue, msgEvent, pTaskID, msgTypeTable, &msgTypeTableLen},
   67:  ztcSAPHandlerInfo_t const gaZtcSAPHandlerInfo[] = {
   68:  #include "ZtcSAPHandlerInfoTbl.h"
   69:  };
   70:  #else
   71:  #define Sap(opcodeGroup, converse, intSAPIdName, \
   72:              pSAPFunc, modeTableIndex, msgQueue, msgEvent, pTaskID, \
   73:              msgTypeTable, msgTypeTableLen) \
   74:    {opcodeGroup, converse, intSAPIdName, pSAPFunc, modeTableIndex, \
   75:     msgQueue, msgEvent, pTaskID, msgTypeTable, &msgTypeTableLen},
   76:  ztcSAPHandlerInfo_t const gaZtcSAPHandlerInfo[1];
   77:  #endif
   78:  /****************************************************************************/
   79:  
   80:  /* Current SAP Handler modes. One byte per SAP Handler. There are only three */
   81:  /* modes, so 2 bits would be enough, but there aren't very many SAP Handlers. */
   82:  #define SapMode(name, index, defaultMode)   defaultMode,
   83:  
   84:  ztcSAPMode_t maZtcSAPModeTable[] = {    /* Cannot be const. */
   85:  #include "ZtcSAPHandlerInfoTbl.h"
   86:  };
   87:  index_t const mZtcSAPModeTableLen = NumberOfElements(maZtcSAPModeTable);
   88:  
   89:  /******************************************************************************
   90:  *******************************************************************************
   91:  * Private memory declarations
   92:  *******************************************************************************
   93:  ******************************************************************************/
   94:  
   95:  #define DisabledSap(opcodeGroup) opcodeGroup,
   96:  
   97:  /* Used by pZtcSAPInfoFromOpcodeGroup() to recognized opcode groups */
   98:  /* that have been compiled out, to improve error messages. */
   99:  #if gZtcErrorReporting_d
  100:  ztcOpcodeGroup_t const maDisabledOpcodeGroups[] = {
  101:  #include "ZtcSAPHandlerInfoTbl.h"
  102:    gZtcInvalidOpcodeGroup_c              /* End of table mark. */
  103:  };
  104:  #endif
  105:  
  106:  /******************************************************************************
  107:  *******************************************************************************
  108:  * Public functions
  109:  *******************************************************************************
  110:  ******************************************************************************/
  111:  
  112:  /* Given an internal SAP Handler id, return a pointer to the corresponding
  113:   * entry in the SAP Handler info table. If the internal SAP Handler id is
  114:   * not found in the table, return NULL.
  115:   */
  116:  ztcSAPHandlerInfo_t const *pZtcSAPInfoFromIntSAPId
  117:    (
  118:    ztcIntSAPId_t const intSAPId
  119:    )
  120:  {
  121:    index_t i;
  122:  
  123:    for (i = 0; i < NumberOfElements(gaZtcSAPHandlerInfo); ++i) {
  124:      if (gaZtcSAPHandlerInfo[i].intSAPId == intSAPId) {
  125:        return &(gaZtcSAPHandlerInfo[i]);
  126:      }
  127:    }
  128:  
  129:    return NULL;
  130:  }                                       /* pZtcSAPInfoFromIntSAPId() */
  131:  
  132:  /****************************************************************************/
  133:  
  134:  /* Given an opcode group, return a pointer to the corresponding entry in the
  135:   * SAP Handler info table. If the opcode group is not found in the table,
  136:   * return NULL. If the opcode group is found in the disables table, return
  137:   * 0x0001.
  138:   */
  139:  ztcSAPHandlerInfo_t const *pZtcSAPInfoFromOpcodeGroup
  140:    (
  141:    ztcOpcodeGroup_t const opcodeGroup
  142:    )
  143:  {
  144:    index_t i;
  145:  
  146:    for (i = 0; i < NumberOfElements(gaZtcSAPHandlerInfo); ++i) {
  147:      if (gaZtcSAPHandlerInfo[i].opcodeGroup == opcodeGroup) {
  148:        return &(gaZtcSAPHandlerInfo[i]);
  149:      }
  150:    }
  151:  
  152:  #if gZtcErrorReporting_d
  153:    i = 0;
  154:    while (maDisabledOpcodeGroups[ i ] != gZtcSAPModeInvalid_c) {
  155:      if (maDisabledOpcodeGroups[ i++ ] == opcodeGroup) {
  156:        return gZtcIsDisabledOpcodeGroup_c;
  157:      }
  158:    }
  159:  #endif
  160:  
  161:    return NULL;
  162:  }                                       /* pZtcSAPInfoFromOpcodeGroup() */
  163:  
  164:  /*
  165:    Synchronous calls to the ASP handler.
  166:  */
  167:  uint8_t APP_ASP_SapHandler(AppToAspMessage_t *pMsg)
  168:  {
  169:    uint8_t msgStatus = gZbSuccess_c;
  170:    switch(pMsg->msgType) {
  171:      case aspMsgTypeGetTimeReq_c:
  172:        Asp_GetTimeReq(&pMsg->msgData.req.aspGetTimeReq.time);
  173:        break;
  174:  
  175:      case aspMsgTypeWakeReq_c:
  176:        Asp_WakeReq();
  177:        break;
  178:  
  179:      case aspMsgTypeGetMacStateReq_c:
  180:        msgStatus = Asp_GetMacStateReq();
  181:        break;
  182:        
  183:  #ifndef PROCESSOR_MC1323X
  184:  
  185:  #if gAspPowerSaveCapability_d
  186:      case aspMsgTypeDozeReq_c:
  187:        msgStatus = Asp_DozeReq(&pMsg->msgData.req.aspDozeReq.dozeDuration,pMsg->msgData.req.aspDozeReq.clko_en);
  188:        break;
  189:  
  190:      case aspMsgTypeAutoDozeReq_c:
  191:        Asp_AutoDozeReq(pMsg->msgData.req.aspAutoDozeReq.autoEnable,
  192:                        pMsg->msgData.req.aspAutoDozeReq.enableWakeIndication,
  193:                        &pMsg->msgData.req.aspAutoDozeReq.autoDozeInterval,
  194:                        pMsg->msgData.req.aspAutoDozeReq.clko_en);
  195:        break;
  196:  
  197:      case aspMsgTypeSetMinDozeTimeReq_c:
  198:        Asp_SetMinDozeTimeReq(&pMsg->msgData.req.aspSetMinDozeTimeReq.minDozeTime);
  199:        break;
  200:  
  201:      case aspMsgTypeAcomaReq_c:
  202:        msgStatus = Asp_AcomaReq(pMsg->msgData.req.aspAcomaReq.clko_en);
  203:        break;
  204:  
  205:      case aspMsgTypeHibernateReq_c:
  206:        msgStatus = Asp_HibernateReq();
  207:        break;
  208:  #endif
  209:  
  210:  #if gAspHwCapability_d
  211:      case aspMsgTypeClkoReq_c:
  212:        msgStatus = Asp_ClkoReq(pMsg->msgData.req.aspClkoReq.clkoEnable, pMsg->msgData.req.aspClkoReq.clkoRate);
  213:        break;
  214:  
  215:      case aspMsgTypeTrimReq_c:      
  216:        Asp_TrimReq(pMsg->msgData.req.aspTrimReq.trimValue);
  217:        break;
  218:  
  219:      case aspMsgTypeDdrReq_c:
  220:        Asp_DdrReq(pMsg->msgData.req.aspDdrReq.directionMask);
  221:        break;
  222:  
  223:      case aspMsgTypePortReq_c:
  224:        Asp_PortReq(pMsg->msgData.req.aspPortReq.portWrite, &pMsg->msgData.req.aspPortReq.portValue);
  225:        break;
  226:  #endif
  227:  
  228:  #endif //PROCESSOR_MC1323X
  229:  
  230:  #if gAspEventCapability_d
  231:      case aspMsgTypeEventReq_c:
  232:        msgStatus = Asp_EventReq(&pMsg->msgData.req.aspEventReq.eventTime);
  233:        break;
  234:  #endif
  235:  
  236:  #if gBeaconedCapability_d
  237:      case aspMsgTypeGetInactiveTimeReq_c:
  238:        msgStatus = Asp_GetInactiveTimeReq(&pMsg->msgData.req.aspGetInactiveTimeReq.time);
  239:        break;
  240:  
  241:      case aspMsgTypeSetNotifyReq_c:
  242:        msgStatus = Asp_SetNotifyReq(pMsg->msgData.req.aspSetNotifyReq.notifications);
  243:        break;
  244:  #endif
  245:  
  246:  
  247:  #if gAspPowerLevelCapability_d
  248:      case aspMsgTypeSetPowerLevel_c:
  249:        msgStatus = Asp_SetPowerLevel(pMsg->msgData.req.aspSetPowerLevelReq.powerLevel);
  250:        break;
  251:  
  252:      case aspMsgTypeGetPowerLevel_c:
  253:        msgStatus = Asp_GetPowerLevel();
  254:        break;
  255:  #endif
  256:  
  257:      case aspMsgTypeTelecTest_c:
  258:        ASP_TelecTest(pMsg->msgData.req.aspTelecTest.mode);
  259:        break;
  260:  
  261:      case aspMsgTypeTelecSetFreq_c:
  262:        ASP_TelecSetFreq(pMsg->msgData.req.aspTelecsetFreq.channel);
  263:        break;
  264:        
  265:      case aspMsgTypeTelecSendRawData_c:
  266:        if(pMsg->msgData.req.aspTelecSendRawData.length <= 125)
  267:        {
  268:           #ifdef PROCESSOR_MC1323X
  269:           ASP_TelecSendRawData((uint8_t*)&pMsg->msgData.req.aspTelecSendRawData);
  270:           #else
  271:           ASP_TelecSendRawData(pMsg->msgData.req.aspTelecSendRawData.length,
  272:                                (uint8_t*)&pMsg->msgData.req.aspTelecSendRawData.dataPtr);
  273:           #endif //PROCESSOR_MC1323X                              
  274:         }
  275:         else
  276:         {
  277:           msgStatus = gZbInvalidRequest_c; 
  278:         }
  279:        break;
  280:        
  281:  #ifdef PROCESSOR_MC1323X
  282:      case aspMsgTypeGetPpdMode_c:
  283:        Asp_GetPpdMode(&pMsg->msgData.req.aspPpdMode.ppdMode);              
  284:      break;
  285:      case aspMsgTypeSetPpdMode_c:
  286:        Asp_SetPpdMode(pMsg->msgData.req.aspPpdMode.ppdMode);
  287:      break;
  288:  #endif //PROCESSOR_MC1323X
  289:  
  290:      default:
  291:        msgStatus = gZbInvalidRequest_c;
  292:        break;
  293:  
  294:    }
  295:  
  296:    /* monitoring this task */
  297:    ZTC_TaskEventMonitor(gNwkASP_SAPHandlerId_c, (uint8_t *)pMsg, msgStatus);
  298:    return msgStatus;
  299:  }
  300:  
  301:  #endif                                  /* #if gZtcIncluded_d == 1 */
  302:  
