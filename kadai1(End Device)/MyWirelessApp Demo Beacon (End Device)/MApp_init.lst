*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /*****************************************************************************
    2:  * Applications' initialization module
    3:  *
    4:  * (c) Copyright 2006, Freescale, Inc. All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor Romania A/S.
   10:  *
   11:  *****************************************************************************/
   12:  
   13:  #include "Mapp_init.h"
   14:  #include "Mac_Globals.h"
   15:  #include "MacInit.h"
   16:  #include "NVM_Interface.h"
   17:  #if gZtcIncluded_d
   18:  #include "ZTCInterface.h"
   19:  #endif /* gZtcIncluded_d */
   20:  
   21:  /************************************************************************************
   22:  *************************************************************************************
   23:  * Private macros
   24:  *************************************************************************************
   25:  ************************************************************************************/
   26:  
   27:  
   28:  /************************************************************************************
   29:  *************************************************************************************
   30:  * Private prototypes
   31:  *************************************************************************************
   32:  ************************************************************************************/
   33:  
   34:  void IdleTask(event_t event);
   35:  void AppTask(event_t events);
   36:  tsTaskID_t gAppTaskID_c;
   37:  
   38:  /************************************************************************************
   39:  *************************************************************************************
   40:  * Private type definitions
   41:  *************************************************************************************
   42:  ************************************************************************************/
   43:  
   44:  /************************************************************************************
   45:  *************************************************************************************
   46:  * Private memory declarations
   47:  *************************************************************************************
   48:  ************************************************************************************/
   49:  
   50:  extern uint8_t aExtendedAddress[8];
   51:  extern uint8_t gState;
   52:  
   53:  #if gNvStorageIncluded_d
   54:  static bool_t receiverOn;
   55:  #endif
   56:  /************************************************************************************
   57:  *************************************************************************************
   58:  * Public functions
   59:  *************************************************************************************
   60:  ************************************************************************************/
   61:  extern void MacPhyInit_WriteExtAddress(uint8_t *pExtendedAddress);
   62:  
   63:  /*****************************************************************************
   64:  * main function
   65:  *
   66:  * Interface assumptions:
   67:  * 
   68:  * Return value:
   69:  * None
   70:  *****************************************************************************/
   71:  
   72:   void main(void)
   73:   {
   74:   #ifdef BOOTLOADER_ENABLED	
   75:    NVM_FindNVRAM();
   76:   #endif	
   77:   
   78:    /* Interrupts should already be off. This is probably redundant. */
   79:    IrqControlLib_DisableAllIrqs();
  0000 9b       [1]             SEI   
   80:    Platform_Init();    // Init platform
  0001 ac000000 [8]             CALL  Platform_Init
   81:    Init_802_15_4();
  0005 ac000000 [8]             CALL  Init_802_15_4
   82:  
   83:    TS_Init();  
  0009 ac000000 [8]             CALL  TS_Init
   84:    TMR_Init();                          /* Init the kernel. */
  000d ac000000 [8]             CALL  TMR_Init
   85:    NvModuleInit();
   86:    Uart_ModuleInit();
  0011 ac000000 [8]             CALL  Uart_ModuleInit
   87:    MacInit();
  0015 ac000000 [8]             CALL  MacInit
   88:    #if gZtcIncluded_d
   89:    Ztc_TaskInit();
   90:    #endif /* gZtcIncluded_d */ 
   91:  
   92:    /*initialize the application*/
   93:   
   94:    gAppTaskID_c = TS_CreateTask(gTsAppTaskPriority_c, AppTask);
  0019 a680     [2]             LDA   #-128
  001b 87       [2]             PSHA  
  001c 450000   [3]             LDHX  @AppTask
  001f 89       [2]             PSHX  
  0020 8b       [2]             PSHH  
  0021 a600     [2]             LDA   @AppTask:PAGE
  0023 87       [2]             PSHA  
  0024 ac000000 [8]             CALL  TS_CreateTask
  0028 a704     [2]             AIS   #4
  002a c70000   [4]             STA   gAppTaskID_c
   95:   
   96:    MApp_init();
  002d ac000000 [8]             CALL  MApp_init
   97:    /*do not allow the device to enter sleep mode*/
   98:    PWR_DisallowDeviceToSleep();   
  0031 ac000000 [8]             CALL  PWR_DisallowDeviceToSleep
   99:    /*All LED's are switched OFF*/
  100:    Led1Off();
  0035 1000     [5]             BSET  0,0
  101:    Led2Off();
  0037 1800     [5]             BSET  4,0
  102:    Led3Off();
  0039 1006     [5]             BSET  0,6
  103:    Led4Off();
  003b 1206     [5]             BSET  1,6
  104:    /* if the board is mc13213 SRB or NCB turn on LED5 */
  105:    #if (gTargetMC13213SRB_d == 1) || (gTargetMC13213NCB_d == 1) || ((gTarget_UserDefined_d == 1) && (!defined(PROCESSOR_MC1323X)) && (!defined(PROCESSOR_QE128)))
  106:      Led5On();
  107:    #endif
  108:    
  109:    /* Start the task scheduler. Does not return. */
  110:    TS_Scheduler(); 
  003d ac000000 [8]             CALL  TS_Scheduler
  111:   
  112:  }
  0041 8d       [7]             RTC   
  113:  
  114:  
  115:  #if gNvStorageIncluded_d
  116:  
  117:  void BUtl_SetReceiverOff(void)
  118:  {
  119:   /* This function is called by the NVM component at the start of the NV operation */
  120:   mlmeMessage_t msg;	  
  121:   bool_t value; 
  122:   /* get the receiver state */
  123:   
  124:   msg.msgType = gMlmeGetReq_c;
  125:   msg.msgData.getReq.pibAttribute = gMPibRxOnWhenIdle_c;
  126:   msg.msgData.getReq.pibAttributeValue = &value; 
  127:   (void)MSG_Send(NWK_MLME, &msg);
  128:   
  129:   if(value)
  130:   {
  131:    /* Turn off the receiver during NVM operation */
  132:    receiverOn = TRUE;
  133:    
  134:    value = FALSE;
  135:    msg.msgType = gMlmeSetReq_c;
  136:    msg.msgData.setReq.pibAttribute = gMPibRxOnWhenIdle_c;
  137:    msg.msgData.setReq.pibAttributeValue = &value;
  138:    (void)MSG_Send(NWK_MLME, &msg);
  139:   }
  140:   else
  141:   {
  142:    /* Receiver already turned off */
  143:    receiverOn = FALSE;
  144:   }
  145:   
  146:  }
  147:  
  148:  void BUtl_SetReceiverOn(void)
  149:  {
  150:   /* This function is called by the NVM component at the end of the NV operation */
  151:   mlmeMessage_t msg;	  
  152:   bool_t value = TRUE;
  153:   if(receiverOn == TRUE)
  154:   {  
  155:    /* Restore receiver state */
  156:    msg.msgType = gMlmeSetReq_c;
  157:    msg.msgData.setReq.pibAttribute = gMPibRxOnWhenIdle_c;
  158:    msg.msgData.setReq.pibAttributeValue = &value;
  159:    (void)MSG_Send(NWK_MLME, &msg);
  160:   } 
  161:  }
  162:  
  163:  #endif
  164:  
  165:  /*****************************************************************************
  166:  * Entry point to the idle task
  167:  *
  168:  * Interface assumptions:
  169:  * Cannot use any call by which this task has to be suspended.This task should
  170:  * always be ready to run if there are no other tasks in the system
  171:  * 
  172:  * Return value:
  173:  * None
  174:  *****************************************************************************/
  175:  
  176:  void IdleTask(event_t events)
  177:  {
  178:    /* Just to avoid the compiler warning */
  179:    (void)events;
  180:  
  181:   #if gNvStorageIncluded_d
  182:    /* Process NV Storage save-on-idle and save-on-count requests. */
  183:    NvIdle();
  184:   #endif
  185:  
  186:      
  187:    #if (gLpmIncluded_d == 1)
  188:    /*Low power management*/
  189:      if(PWR_CheckIfDeviceCanGoToSleep())    
  190:        PWR_EnterLowPower();
  191:    #endif /*gLpmIncluded_d*/         
  192:      
  193:  }
  0000 8d       [7]             RTC   
  194:  
  195:  
  196:  /*****************************************************************************
  197:  * Initialize the MAC 64 bit address
  198:  *
  199:  * Interface assumptions:
  200:  * None
  201:  * 
  202:  * Return value:
  203:  * None
  204:  *****************************************************************************/
  205:  void Init_MacExtendedAddress( void ) 
  206:  {
  0000 a7f8     [2]             AIS   #-8
  207:  
  208:    uint8_t tempExtAddress[8]= {mDefaultValueOfExtendedAddress_c};
  0002 a6ff     [2]             LDA   #-1
  0004 95       [2]             TSX   
  0005 f7       [2]             STA   ,X
  0006 e701     [3]             STA   1,X
  0008 e702     [3]             STA   2,X
  000a e703     [3]             STA   3,X
  000c e704     [3]             STA   4,X
  000e a6f9     [2]             LDA   #-7
  0010 e705     [3]             STA   5,X
  0012 6f06     [5]             CLR   6,X
  0014 a692     [2]             LDA   #-110
  0016 e707     [3]             STA   7,X
  209:    /*Check if Extended address is already generated(if the Extended Address 
  210:    is All "0xFF", it means that no extended address is genereted);If not set
  211:    it to the value chosen by application layer*/
  212:    if((aExtendedAddress[0] & aExtendedAddress[1]
  0018 c60000   [4]             LDA   aExtendedAddress
  001b c40001   [4]             AND   aExtendedAddress:1
  001e c40002   [4]             AND   aExtendedAddress:2
  0021 c40003   [4]             AND   aExtendedAddress:3
  0024 c40004   [4]             AND   aExtendedAddress:4
  0027 c40005   [4]             AND   aExtendedAddress:5
  002a c40006   [4]             AND   aExtendedAddress:6
  002d c40007   [4]             AND   aExtendedAddress:7
  0030 4c       [1]             INCA  
  0031 2604     [3]             BNE   L37 ;abs = 0037
  213:      & aExtendedAddress[2] & aExtendedAddress[3]
  214:      & aExtendedAddress[4] & aExtendedAddress[5]
  215:      & aExtendedAddress[6] & aExtendedAddress[7]) 
  216:      == 0xFF) 
  217:      {
  218:      /*Set the Extended Address From the App*/
  219:        MacPhyInit_WriteExtAddress(tempExtAddress);
  0033 ac000000 [8]             CALL  MacPhyInit_WriteExtAddress
  0037          L37:    
  220:      }
  221:  }
  0037 a708     [2]             AIS   #8
  0039 8d       [7]             RTC   
  222:  
  223:  /******************************************************************************
  224:  * BeeAppAssert
  225:  *
  226:  * Something failed in the stack or app that can't recover. Stop here. Mostly
  227:  * used during debug phase of product. Could be used
  228:  ******************************************************************************/
  229:  void BeeAppAssert
  230:    (
  231:    assertCode_t code /* IN: why the assert failed */
  232:    )
  233:  {
  0000 8b       [2]             PSHH  
  234:    volatile bool_t waitForever = code; /* just set to anything non-zero */
  0001 95       [2]             TSX   
  0002 f7       [2]             STA   ,X
  0003          L3:     
  235:    
  236:    while (waitForever)
  0003 7d       [3]             TST   ,X
  0004 26fd     [3]             BNE   L3 ;abs = 0003
  237:      { }
  238:  }
  0006 8a       [3]             PULH  
  0007 8d       [7]             RTC   
  239:  
  240:  /******************************************************************************
  241:  * Swap2Bytes - needed for ZTC
  242:  *
  243:  * Swaps two bytes
  244:  ******************************************************************************/
  245:  uint16_t Swap2Bytes(uint16_t iOldValue)
  246:  {
  0000 a7fe     [2]             AIS   #-2
  247:    uint16_t iValue;
  248:  
  249:    iValue = ((uint8_t *)&iOldValue)[1] << 8;
  250:    iValue += ((uint8_t *)&iOldValue)[0];
  0002 8b       [2]             PSHH  
  0003 9eef02   [4]             STX   2,SP
  0006 95       [2]             TSX   
  0007 6f02     [5]             CLR   2,X
  0009 86       [3]             PULA  
  000a e702     [3]             STA   2,X
  251:  
  252:    return iValue;
  000c 9efe01   [5]             LDHX  1,SP
  253:  }
  000f a702     [2]             AIS   #2
  0011 8d       [7]             RTC   
  254:  
  255:  /******************************************************************************
  256:  * Swap4Bytes - needed for ZTC
  257:  *
  258:  * Swaps two bytes
  259:  ******************************************************************************/
  260:  uint32_t Swap4Bytes(uint32_t iOldValue)
  261:  {
  0000 a7fc     [2]             AIS   #-4
  262:    uint32_t iValue;
  263:  
  264:    ((uint8_t*)&iValue)[0] = ((uint8_t *)&iOldValue)[3];
  0002 95       [2]             TSX   
  0003 e60a     [3]             LDA   10,X
  0005 f7       [2]             STA   ,X
  265:    ((uint8_t*)&iValue)[1] = ((uint8_t *)&iOldValue)[2];
  0006 e609     [3]             LDA   9,X
  0008 e701     [3]             STA   1,X
  266:    ((uint8_t*)&iValue)[2] = ((uint8_t *)&iOldValue)[1];
  000a e608     [3]             LDA   8,X
  000c e702     [3]             STA   2,X
  267:    ((uint8_t*)&iValue)[3] = ((uint8_t *)&iOldValue)[0];
  000e e607     [3]             LDA   7,X
  0010 e703     [3]             STA   3,X
  268:  
  269:    return iValue;
  0012 9efe0c   [5]             LDHX  12,SP
  0015 89       [2]             PSHX  
  0016 8b       [2]             PSHH  
  0017 95       [2]             TSX   
  0018 af02     [2]             AIX   #2
  001a a604     [2]             LDA   #4
  001c cd0000   [6]             JSR   _COPY
  270:  }
  001f a704     [2]             AIS   #4
  0021 8d       [7]             RTC   
  271:  /*******************************************************************************/
