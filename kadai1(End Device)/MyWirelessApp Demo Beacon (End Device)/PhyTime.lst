*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /************************************************************************************
    2:  * MC1323X: Implements PHY timing functionalities
    3:  *
    4:  * (c) Copyright 2009, Freescale, Inc.  All rights reserved.
    5:  *
    6:  * No part of this document must be reproduced in any form - including copied,
    7:  * transcribed, printed or by any electronic means - without specific written
    8:  * permission from Freescale Semiconductor.
    9:  *
   10:  ************************************************************************************/
   11:  
   12:  
   13:  /************************************************************************************
   14:  *************************************************************************************
   15:  * Includes
   16:  *************************************************************************************
   17:  ************************************************************************************/
   18:  #include "EmbeddedTypes.h"
   19:  #include "IoConfig.h"
   20:  
   21:  #include "PhyDebugMC1323X.h"
   22:  
   23:  
   24:  /************************************************************************************
   25:  *************************************************************************************
   26:  * Public functions
   27:  *************************************************************************************
   28:  ************************************************************************************/
   29:  
   30:  #ifdef MEMORY_MODEL_BANKED
   31:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
   32:  #else
   33:  #pragma CODE_SEG DEFAULT
   34:  #endif /* MEMORY_MODEL_BANKED */
   35:  
   36:  /***********************************************************************************/
   37:  
   38:  void PhyTimeSetEventTrigger(uint16_t startTime)
   39:  {
   40:    PP_PHY_CTL4    &= ~PP_PHY_CTL4_TMR2CMP_EN_BIT; // disable TMR2 compare
  0000 1347     [5]             BCLR  1,71
   41:    PP_PHY_CTL1    |=  PP_PHY_CTL1_TMRTRIGEN_BIT;  // enable autosequence start by TC2 match
  0002 1e44     [5]             BSET  7,68
   42:    PP_PHY_TC2PRIME =  startTime;
  0004 355a     [5]             STHX  90
   43:    PP_PHY_CTL4    |=  PP_PHY_CTL4_TMR2CMP_EN_BIT; // enable TMR2 compare
  0006 1247     [5]             BSET  1,71
   44:    PP_PHY_CTL4    &= ~PP_PHY_CTL4_TMR2MSK_BIT;    // unmask TMR2 interrupt
  0008 1b47     [5]             BCLR  5,71
   45:    PHY_DEBUG_LOG2(PDBG_SET_EVENT_TRIGGER, PP_PHY_TC2PRIMEH, PP_PHY_TC2PRIMEL);
   46:  }
  000a 81       [6]             RTS   
   47:  
   48:  /***********************************************************************************/
   49:  
   50:  void PhyTimeSetEventTimeout(zbClock24_t *pEndTime)
   51:  {
   52:  #ifdef PHY_PARAMETERS_VALIDATION
   53:    if(NULL == pEndTime)
   54:    {
   55:      return;
   56:    }
   57:  #endif // PHY_PARAMETERS_VALIDATION
   58:    PP_PHY_CTL4   &= ~PP_PHY_CTL4_TMR3CMP_EN_BIT; // disable TMR3 compare
  0000 1547     [5]             BCLR  2,71
   59:    PP_PHY_CTL2   |=  PP_PHY_CTL2_TC3TMOUT_BIT;   // enable autosequence stop by TC3 match
  0002 1c45     [5]             BSET  6,69
   60:    PP_PHY_T3CMP0  =  *(((uint8_t *)pEndTime)+3);
  0004 e603     [3]             LDA   3,X
  0006 b759     [3]             STA   89
   61:    PP_PHY_T3CMP8  =  *(((uint8_t *)pEndTime)+2);
  0008 e602     [3]             LDA   2,X
  000a b758     [3]             STA   88
   62:    PP_PHY_T3CMP16 =  *(((uint8_t *)pEndTime)+1);
  000c e601     [3]             LDA   1,X
  000e b757     [3]             STA   87
   63:    PP_PHY_CTL4   |=  PP_PHY_CTL4_TMR3CMP_EN_BIT; // enable TMR3 compare
  0010 1447     [5]             BSET  2,71
   64:    PP_PHY_CTL4   &= ~PP_PHY_CTL4_TMR3MSK_BIT;    // unmask TMR3 interrupt
  0012 1d47     [5]             BCLR  6,71
   65:    PHY_DEBUG_LOG3(PDBG_SET_EVENT_TIMEOUT, PP_PHY_T3CMP16, PP_PHY_T3CMP8, PP_PHY_T3CMP0);
   66:  }
  0014 81       [6]             RTS   
   67:  
   68:  /***********************************************************************************/
   69:  
   70:  void PhyTimeDisableEventTimeout(void)
   71:  {
   72:    PHY_DEBUG_LOG(PDBG_DISABLE_EVENT_TIMEOUT);
   73:    PP_PHY_CTL2   &= ~PP_PHY_CTL2_TC3TMOUT_BIT;
  0000 1d45     [5]             BCLR  6,69
   74:    PP_PHY_CTL4   &= ~PP_PHY_CTL4_TMR3CMP_EN_BIT;
  0002 1547     [5]             BCLR  2,71
   75:    PP_PHY_STATUS1 =  PP_PHY_STATUS1_TMR3_IRQ;
  0004 6e044d   [4]             MOV   #4,77
   76:  }
  0007 81       [6]             RTS   
   77:  
   78:  /***********************************************************************************/
   79:  
   80:  void PhyTimeReadClock(zbClock24_t *pRetClk)
   81:  {
   82:  #ifdef PHY_PARAMETERS_VALIDATION
   83:    if(NULL == pRetClk)
   84:    {
   85:      return;
   86:    }
   87:  #endif // PHY_PARAMETERS_VALIDATION
   88:    PHY_DEBUG_LOG(PDBG_READ_CLOCK);
   89:    *(((uint8_t *)pRetClk)+3) = PP_PHY_EVENTTMR0;
  0000 b653     [3]             LDA   83
  0002 e703     [3]             STA   3,X
   90:    *(((uint8_t *)pRetClk)+2) = PP_PHY_EVENTTMR8;
  0004 b652     [3]             LDA   82
  0006 e702     [3]             STA   2,X
   91:    *(((uint8_t *)pRetClk)+1) = PP_PHY_EVENTTMR16;
  0008 b651     [3]             LDA   81
  000a e701     [3]             STA   1,X
   92:    *(((uint8_t *)pRetClk)+0) = 0;
  000c 7f       [4]             CLR   ,X
   93:  }
  000d 81       [6]             RTS   
   94:  
   95:  /***********************************************************************************/
   96:  
   97:  void PhyTimeInitEventTimer(zbClock24_t *pAbsTime)
   98:  {
   99:  #ifdef PHY_PARAMETERS_VALIDATION
  100:    if(NULL == pAbsTime)
  101:    {
  102:      return;
  103:    }
  104:  #endif // PHY_PARAMETERS_VALIDATION
  105:    PHY_DEBUG_LOG(PDBG_INIT_EVENT_TIMER);
  106:    PP_PHY_T1CMP0  = *(((uint8_t *)pAbsTime)+3);
  0000 e603     [3]             LDA   3,X
  0002 c71842   [4]             STA   6210
  107:    PP_PHY_T1CMP8  = *(((uint8_t *)pAbsTime)+2);
  0005 e602     [3]             LDA   2,X
  0007 c71841   [4]             STA   6209
  108:    PP_PHY_T1CMP16 = *(((uint8_t *)pAbsTime)+1);
  000a e601     [3]             LDA   1,X
  000c c71840   [4]             STA   6208
  109:    PP_PHY_CTL2   |= PP_PHY_CTL2_TMRLOAD_BIT;   // self clearing bit
  000f 1445     [5]             BSET  2,69
  110:  }
  0011 81       [6]             RTS   
  111:  
  112:  /***********************************************************************************/
  113:  
  114:  #pragma CODE_SEG DEFAULT
  115:  
  116:  
  117:  
