*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /************************************************************************************
    2:  * This module contains the IRQ vector table
    3:  *
    4:  *
    5:  * (c) Copyright 2010, Freescale, Inc. All rights reserved.
    6:  *
    7:  *
    8:  * No part of this document must be reproduced in any form - including copied,
    9:  * transcribed, printed or by any electronic means - without specific written
   10:  * permission from Freescale Semiconductor.
   11:  ************************************************************************************/
   12:  
   13:  #include "EmbeddedTypes.h"
   14:  #if defined(PROCESSOR_MC1323X)
   15:  #include "Mc1323xHandler.h"
   16:  #else
   17:  #include "Mc1319xHandler.h"
   18:  #endif
   19:  #include "TMR_Interface.h"
   20:  #include "Uart_Interface.h"
   21:  #include "IIC_Interface.h"
   22:  #include "Cmt_Interface.h"
   23:  #if defined(PROCESSOR_MC1323X)
   24:  	#include "SPI_Interface.h"
   25:  	#include "ACC_Interface.h"
   26:  	#include "Touchpad_Interface.h"
   27:  #endif
   28:  #include "ApplicationConf.h"
   29:  #include "keyboard.h"
   30:  #include "IrqControlLib.h"
   31:  #include "PwrLib.h"
   32:  #include "crt0.h"
   33:  
   34:  
   35:  #ifndef gBeeStackIncluded_d
   36:  #define gBeeStackIncluded_d 0
   37:  #endif
   38:  
   39:  #ifndef gBeeStackIPIncluded_d
   40:  #define gBeeStackIPIncluded_d 0
   41:  #endif
   42:  
   43:  
   44:  #if gBeeStackIncluded_d
   45:  #include "BeeStackInit.h"
   46:  #endif
   47:  
   48:  #if gBeeStackIPIncluded_d
   49:  #include "BeeStackIPInit.h"
   50:  #endif
   51:  
   52:  /******************************************************************************
   53:  *******************************************************************************
   54:  * Private Macros
   55:  *******************************************************************************
   56:  ******************************************************************************/
   57:  
   58:  
   59:  /******************************************************************************
   60:  *******************************************************************************
   61:  * Private type definitions
   62:  *******************************************************************************
   63:  ******************************************************************************/
   64:  #ifdef MEMORY_MODEL_BANKED
   65:  typedef void __near(* __near ISR_func_t)(void);
   66:  #else
   67:  typedef void(* __near ISR_func_t)(void);
   68:  #endif
   69:  
   70:  
   71:  /******************************************************************************
   72:  *******************************************************************************
   73:  * Private Prototypes
   74:  *******************************************************************************
   75:  ******************************************************************************/
   76:  
   77:  #ifdef gUseBootloader_d
   78:    /* When bootloader is used, on QE128 and MC1323x, the interrupt vectors must be redirected 
   79:    from software */  
   80:    #if defined(PROCESSOR_QE128) || defined(PROCESSOR_MC1323X)
   81:      #pragma CODE_SEG IRQ_VECTOR_SECTION_DEFAULT
   82:      
   83:      void __interrupt near JumpFunctionISR31(void);
   84:      void __interrupt near JumpFunctionISR30(void);
   85:      void __interrupt near JumpFunctionISR29(void);
   86:      void __interrupt near JumpFunctionISR28(void);
   87:      void __interrupt near JumpFunctionISR27(void);
   88:      void __interrupt near JumpFunctionISR26(void);
   89:      void __interrupt near JumpFunctionISR25(void);
   90:      void __interrupt near JumpFunctionISR24(void);
   91:      void __interrupt near JumpFunctionISR23(void);
   92:      void __interrupt near JumpFunctionISR22(void);
   93:      void __interrupt near JumpFunctionISR21(void);
   94:      void __interrupt near JumpFunctionISR20(void);
   95:      void __interrupt near JumpFunctionISR19(void);
   96:      void __interrupt near JumpFunctionISR18(void);
   97:      void __interrupt near JumpFunctionISR17(void);
   98:      void __interrupt near JumpFunctionISR16(void);
   99:      void __interrupt near JumpFunctionISR15(void);
  100:      void __interrupt near JumpFunctionISR14(void);
  101:      void __interrupt near JumpFunctionISR13(void);
  102:      void __interrupt near JumpFunctionISR12(void);
  103:      void __interrupt near JumpFunctionISR11(void);
  104:      void __interrupt near JumpFunctionISR10(void);
  105:      void __interrupt near JumpFunctionISR09(void);
  106:      void __interrupt near JumpFunctionISR08(void);
  107:      void __interrupt near JumpFunctionISR07(void);
  108:      void __interrupt near JumpFunctionISR06(void);
  109:      void __interrupt near JumpFunctionISR05(void);
  110:      void __interrupt near JumpFunctionISR04(void);
  111:      void __interrupt near JumpFunctionISR03(void);
  112:      void __interrupt near JumpFunctionISR02(void);
  113:      void __interrupt near JumpFunctionISR01(void);
  114:      
  115:      #pragma CODE_SEG DEFAULT
  116:    #endif /* defined(PROCESSOR_QE128) || defined(PROCESSOR_MC1323X) */
  117:  #endif /* defined(gUseBootloader_d) */
  118:  
  119:  /******************************************************************************
  120:  *******************************************************************************
  121:  * Private Memory Declarations
  122:  *******************************************************************************
  123:  ******************************************************************************/
  124:  
  125:  /* Reset vector  */
  126:  #pragma CONST_SEG RESET_VECTOR_SECTION
  127:  
  128:  const ISR_func_t Reset_vector[] = 
  129:  
  130:  #ifdef gUseBootloader_d
  131:    {_BootEntryPoint};    // Vector 0    Reset vector
  132:  #else
  133:    {_Startup};           // Vector 0    Reset vector
  134:  #endif
  135:  
  136:  #pragma CONST_SEG DEFAULT
  137:  
  138:  
  139:  /* Interrupt vector table */
  140:  #pragma CONST_SEG IRQ_VECTOR_SECTION
  141:  
  142:  #if defined(gUseBootloader_d)&&( defined(PROCESSOR_QE128)|| defined(PROCESSOR_MC1323X))
  143:  
  144:  const ISR_func_t ISR_vectors[] =
  145:  /* When bootloader is used, on QE128 and MC1323x, the interrupt vectors must be redirected 
  146:      from software */  
  147:      
  148:  {
  149:        JumpFunctionISR31,
  150:        JumpFunctionISR30,
  151:        JumpFunctionISR29,
  152:        JumpFunctionISR28,
  153:        JumpFunctionISR27,
  154:        JumpFunctionISR26,
  155:        JumpFunctionISR25,
  156:        JumpFunctionISR24,
  157:        JumpFunctionISR23,
  158:        JumpFunctionISR22,
  159:        JumpFunctionISR21,
  160:        JumpFunctionISR20,
  161:        JumpFunctionISR19,
  162:        JumpFunctionISR18,
  163:        JumpFunctionISR17,
  164:        JumpFunctionISR16,
  165:        JumpFunctionISR15,
  166:        JumpFunctionISR14,
  167:        JumpFunctionISR13,
  168:        JumpFunctionISR12,
  169:        JumpFunctionISR11,
  170:        JumpFunctionISR10,
  171:        JumpFunctionISR09,
  172:        JumpFunctionISR08,
  173:        JumpFunctionISR07,
  174:        JumpFunctionISR06,
  175:        JumpFunctionISR05,
  176:        JumpFunctionISR04,
  177:        JumpFunctionISR03,
  178:        JumpFunctionISR02,
  179:        JumpFunctionISR01,
  180:  };
  181:  
  182:  #elif defined(PROCESSOR_QE128)
  183:  
  184:  /* ISR Vectors definition for HCS08QE128 */
  185:  const ISR_func_t ISR_vectors[] =
  186:  {
  187:          // Interrupt table
  188:          Default_Dummy_ISR,       // vector 31   - TPM3 overflow
  189:          Default_Dummy_ISR,       // vector 30   - TPM3 channel 5
  190:          Default_Dummy_ISR,       // vector 29   - TPM3 channel 4
  191:          Default_Dummy_ISR,       // vector 28   - TPM3 channel 3
  192:          Default_Dummy_ISR,       // vector 27   - TPM3 channel 2
  193:          Default_Dummy_ISR,       // vector 26   - TPM3 channel 1
  194:          Default_Dummy_ISR,       // vector 25   - TPM3 channel 0
  195:  #if (gLpmIncluded_d == 1)
  196:          PWRLib_RTIClock_ISR,     // vector 24   - Real time interrupt
  197:  #else
  198:          Default_Dummy_ISR,       // vector 24   - Real time interrupt
  199:  #endif
  200:          gUart2_TxIsr_c   ,       // vector 23   - SCI2 transmit
  201:          gUart2_RxIsr_c   ,       // vector 22   - SCI2 receive
  202:          gUart2_ErrorIsr_c,       // vector 21   - SCI2 error
  203:          Default_Dummy_ISR,       // vector 20   - Analog comparator x
  204:          Default_Dummy_ISR,       // vector 19   - ADC
  205:          
  206:          Switch_Press_ISR,        // vector 18   - Keyboard x pins
  207:  #if (gIIC_Enabled_d == 1)
  208:          IIC_Isr,                 // vector 17   - IICx control        
  209:  #else
  210:          Default_Dummy_ISR,       // vector 17   - IICx control
  211:  #endif
  212:  
  213:          gUart1_TxIsr_c,          // vector 16   - SCI1 transmit
  214:          gUart1_RxIsr_c,          // vector 15   - SCI1 receive
  215:          gUart1_ErrorIsr_c,       // vector 14   - SCI1 error
  216:  
  217:          Default_Dummy_ISR,       // vector 13   - SPI1
  218:          Default_Dummy_ISR,       // vector 12   - SPI2
  219:  
  220:          Default_Dummy_ISR,       // vector 11   - TPM2 overflow
  221:          Default_Dummy_ISR,       // vector 10   - TPM2 channel 2
  222:          Default_Dummy_ISR,       // vector 09   - TPM2 channel 1
  223:          Default_Dummy_ISR,       // vector 08   - TPM2 channel 0        
  224:  
  225:          Default_Dummy_ISR,       // vector 07   - TPM1 overflow
  226:          Default_Dummy_ISR,       // vector 06   - TPM1 channel 2
  227:          Default_Dummy_ISR,       // vector 05   - TPM1 channel 1
  228:          TMR_InterruptHandler,    // vector 04   - TPM1 channel 0
  229:  
  230:          Default_Dummy_ISR,       // vector 03   - Low voltage detect, Low voltage warning
  231:          MC1319xInterrupt,        // vector 02   - External IRQ (MC1319x interrupt)
  232:          Default_Dummy_ISR,       // vector 01   - Software interrupt (SWI)
  233:                                   // vector 00   - Reset (Watchdog timer, Low voltage detect, external pin, illegal opcode)
  234:  };
  235:  
  236:  #elif defined(PROCESSOR_MC1323X)
  237:  /* ISR Vectors definition for MC1323X */
  238:  const ISR_func_t ISR_vectors[] =
  239:  {
  240:          // Interrupt table
  241:          Default_Dummy_ISR,       // vector 31   - NOT A REAL VECTOR
  242:          Default_Dummy_ISR,       // vector 30   - NOT A REAL VECTOR
  243:          Default_Dummy_ISR,       // vector 29   - NOT A REAL VECTOR
  244:          Default_Dummy_ISR,       // vector 28   - NOT A REAL VECTOR
  245:          Default_Dummy_ISR,       // vector 27   - NOT A REAL VECTOR
  246:          Default_Dummy_ISR,       // vector 26   - NOT A REAL VECTOR
  247:          
  248:  #if (gLpmIncluded_d == 1)
  249:          PWRLib_RTIClock_ISR,     // vector 25   - Real time interrupt
  250:  #else
  251:          Default_Dummy_ISR,       // vector 25   - Real time interrupt
  252:  #endif
  253:          Switch_Press_ISR,        // vector 24   - KBI1
  254:  
  255:  #if ((gTouchpadIncluded_d == 1) && (gTP_Mode_c == gTP_KbiIsrMode_c))
  256:          TP_InterruptHandler,     // vector 23   - KBI2
  257:  #else       
  258:          Default_Dummy_ISR,       // vector 23   - KBI2
  259:  #endif
  260:  
  261:  #if (gIIC_Enabled_d == 1)        
  262:          IIC_Isr,                 // vector 22   - IIC 
  263:  #else
  264:          Default_Dummy_ISR,       // vector 22   - IIC
  265:  #endif
  266:          
  267:  #if ( gCmtIncluded_d == 1)       
  268:          CMT_InterruptHandler,    // vector 21   - CMT
  269:  #else
  270:          Default_Dummy_ISR,       // vector 21   - CMT
  271:  #endif        
  272:          gUart1_TxIsr_c,          // vector 20   - SCI1 transmit
  273:          gUart1_RxIsr_c,          // vector 19   - SCI1 receive        
  274:          gUart1_ErrorIsr_c,       // vector 18   - SCI1 error
  275:  #if(gSPI_Enabled_d == 1) 
  276:          SPI_Isr,                 // vector 17   - SPI      
  277:  #else       
  278:          Default_Dummy_ISR,       // vector 17   - SPI        
  279:  #endif 
  280:  
  281:          Default_Dummy_ISR,       // vector 16   - TPM4 overflow
  282:          Default_Dummy_ISR,       // vector 15   - TPM4 channel 0
  283:          
  284:          Default_Dummy_ISR,       // vector 14   - TPM3 overflow
  285:          Default_Dummy_ISR,       // vector 13   - TPM3 channel 0
  286:          
  287:          Default_Dummy_ISR,       // vector 12   - TPM2 overflow
  288:          Default_Dummy_ISR,       // vector 11   - TPM2 channel 0
  289:          
  290:          Default_Dummy_ISR,       // vector 10   - TPM1 overflow
  291:          TMR_InterruptHandler,    // vector 09   - TPM1 channel 0
  292:          
  293:          Default_Dummy_ISR,       // vector 08   - AES 128 Cipher      
  294:  
  295:          PhyHandlerRxWtrmrk_ISR,  // vector 07   - 802.15.4  Watermark
  296:          PhyHandlerTmr_ISR,       // vector 06   - 802.15.4  Timers
  297:          PhyHandlerTx_ISR,        // vector 05   - 802.15.4  Transmit
  298:          PhyHandlerRx_ISR,        // vector 04   - 802.15.4  Receive
  299:  
  300:          Default_Dummy_ISR,       // vector 03   - Low voltage detect, Low voltage warning
  301:  #if gAccelerometerSupported_d
  302:          ACC_Isr,                 // vector 02   - External IRQ 
  303:  #else
  304:          Default_Dummy_ISR,       // vector 02   - External IRQ 
  305:   #endif
  306:          Default_Dummy_ISR,       // vector 01   - Software interrupt (SWI)
  307:                                   // vector 00   - Reset (Watchdog timer, Low voltage detect, external pin, illegal opcode)
  308:  };
  309:  
  310:  
  311:  #else
  312:  /* ISR Vectors definition for HCS08 */
  313:  const ISR_func_t ISR_vectors[] =
  314:  {
  315:          // Interrupt table
  316:          Default_Dummy_ISR,       // vector 31   - NOT A REAL VECTOR
  317:          Default_Dummy_ISR,       // vector 30   - NOT A REAL VECTOR
  318:          Default_Dummy_ISR,       // vector 29   - NOT A REAL VECTOR
  319:          Default_Dummy_ISR,       // vector 28   - NOT A REAL VECTOR
  320:          Default_Dummy_ISR,       // vector 27   - NOT A REAL VECTOR
  321:          Default_Dummy_ISR,       // vector 26   - NOT A REAL VECTOR
  322:  #if (gLpmIncluded_d == 1)
  323:          PWRLib_RTIClock_ISR,     // vector 25   Real time interrupt
  324:  #else
  325:          Default_Dummy_ISR,       // vector 25   Real time interrupt
  326:  #endif
  327:  #if (gIIC_Enabled_d == 1)
  328:          IIC_Isr,                 // vector 24   IIC control
  329:  #else
  330:          Default_Dummy_ISR,       // vector 24   IIC control
  331:  #endif
  332:          
  333:          Default_Dummy_ISR,       // vector 23   AD conversion complete
  334:  
  335:          Switch_Press_ISR,        // vector 22    Keyboard pins
  336:  
  337:          gUart2_TxIsr_c,          // vector 21  Uart2 transmit
  338:          gUart2_RxIsr_c,          // vector 20  Uart2 receive
  339:          gUart2_ErrorIsr_c,       // vector 19  Uart2 error
  340:  
  341:          gUart1_TxIsr_c,          // vector 18  Uart1 transmit
  342:          gUart1_RxIsr_c,          // vector 17  Uart1 receive
  343:          gUart1_ErrorIsr_c,       // vector 16  Uart1 error
  344:  
  345:          Default_Dummy_ISR,       // vector 15   SPI
  346:  
  347:          Default_Dummy_ISR,       // vector 14   TPM2 overflow
  348:          Default_Dummy_ISR,       // vector 13   TPM2 channel 4
  349:          Default_Dummy_ISR,       // vector 12   TPM2 channel 3
  350:          Default_Dummy_ISR,       // vector 11   TPM2 channel 2
  351:          Default_Dummy_ISR,       // vector 10   TPM2 channel 1
  352:          Default_Dummy_ISR,       // vector 9    TPM2 channel 0
  353:  
  354:          Default_Dummy_ISR,       // vector 8    TPM1 overflow
  355:          Default_Dummy_ISR,       // vector 7    TPM1 channel 2
  356:          Default_Dummy_ISR,       // vector 6    TPM1 channel 1
  357:          TMR_InterruptHandler,    // vector 5    TPM1 channel 0
  358:  
  359:          FLL_Lost_Lock_ISR,       // vector 4    ICG (FLL lock of clock)
  360:          Default_Dummy_ISR,       // vector 3    Low voltage detect
  361:          MC1319xInterrupt,        // vector 2    External IRQ (MC1319x interrupt)
  362:          Default_Dummy_ISR,       // vector 1    Software interrupt (SWI)
  363:                                   // vector 0    Reset (Watchdog timer, Low voltage detect, external pin, illegal opcode)
  364:  };
  365:  
  366:  
  367:  
  368:  #endif
  369:  
  370:  // **************************************************************************
  371:  /******************************************************************************
  372:  *******************************************************************************
  373:  * Public Functions
  374:  *******************************************************************************
  375:  ******************************************************************************/
  376:  
  377:  
  378:  /******************************************************************************
  379:  *******************************************************************************
  380:  * Private Functions
  381:  *******************************************************************************
  382:  ******************************************************************************/
  383:  
  384:  #ifdef gUseBootloader_d
  385:    /* When bootloader is used, on QE128 and MC1323x, the interrupt vectors must be redirected 
  386:    from software */  
  387:    #if defined(PROCESSOR_QE128)
  388:      #pragma CODE_SEG IRQ_VECTOR_SECTION_DEFAULT
  389:        
  390:          void __interrupt near JumpFunctionISR31(void){ Default_Dummy_ISR(); };
  391:          void __interrupt near JumpFunctionISR30(void){ Default_Dummy_ISR(); };
  392:          void __interrupt near JumpFunctionISR29(void){ Default_Dummy_ISR(); };
  393:          void __interrupt near JumpFunctionISR28(void){ Default_Dummy_ISR(); };
  394:          void __interrupt near JumpFunctionISR27(void){ Default_Dummy_ISR(); };
  395:          void __interrupt near JumpFunctionISR26(void){ Default_Dummy_ISR(); };
  396:          void __interrupt near JumpFunctionISR25(void){ Default_Dummy_ISR(); };
  397:        #if (gLpmIncluded_d == 1)
  398:          void __interrupt near JumpFunctionISR24(void){ PWRLib_RTIClock_ISR(); };
  399:        #else
  400:          void __interrupt near JumpFunctionISR24(void){ Default_Dummy_ISR(); };
  401:        #endif
  402:          void __interrupt near JumpFunctionISR23(void){gUart2_TxIsr_c();};
  403:          void __interrupt near JumpFunctionISR22(void){gUart2_RxIsr_c();};
  404:          void __interrupt near JumpFunctionISR21(void){gUart2_ErrorIsr_c();};
  405:          void __interrupt near JumpFunctionISR20(void){Default_Dummy_ISR();};
  406:          void __interrupt near JumpFunctionISR19(void){Default_Dummy_ISR();};
  407:          void __interrupt near JumpFunctionISR18(void){Switch_Press_ISR();};
  408:        #if (gIIC_Enabled_d == 1)
  409:          void __interrupt near JumpFunctionISR17(void){IIC_Isr();};        
  410:        #else
  411:          void __interrupt near JumpFunctionISR17(void){Default_Dummy_ISR();};
  412:        #endif
  413:          void __interrupt near JumpFunctionISR16(void){gUart1_TxIsr_c();};
  414:          void __interrupt near JumpFunctionISR15(void){gUart1_RxIsr_c();};
  415:          void __interrupt near JumpFunctionISR14(void){gUart1_ErrorIsr_c();};
  416:          void __interrupt near JumpFunctionISR13(void){Default_Dummy_ISR();};
  417:          void __interrupt near JumpFunctionISR12(void){Default_Dummy_ISR();};
  418:          void __interrupt near JumpFunctionISR11(void){Default_Dummy_ISR();};
  419:          void __interrupt near JumpFunctionISR10(void){Default_Dummy_ISR();};
  420:          void __interrupt near JumpFunctionISR09(void){Default_Dummy_ISR();};
  421:          void __interrupt near JumpFunctionISR08(void){Default_Dummy_ISR();};        
  422:          void __interrupt near JumpFunctionISR07(void){Default_Dummy_ISR();};
  423:          void __interrupt near JumpFunctionISR06(void){Default_Dummy_ISR();};
  424:          void __interrupt near JumpFunctionISR05(void){Default_Dummy_ISR();};
  425:          void __interrupt near JumpFunctionISR04(void){TMR_InterruptHandler();};
  426:          void __interrupt near JumpFunctionISR03(void){Default_Dummy_ISR();};
  427:          void __interrupt near JumpFunctionISR02(void){MC1319xInterrupt();};
  428:          void __interrupt near JumpFunctionISR01(void){Default_Dummy_ISR();};    
  429:      
  430:      #pragma CODE_SEG DEFAULT 
  431:    #elif defined(PROCESSOR_MC1323X)
  432:      #pragma CODE_SEG IRQ_VECTOR_SECTION_DEFAULT
  433:      
  434:          void __interrupt near JumpFunctionISR31(void){Default_Dummy_ISR();};
  435:          void __interrupt near JumpFunctionISR30(void){Default_Dummy_ISR();};
  436:          void __interrupt near JumpFunctionISR29(void){Default_Dummy_ISR();};
  437:          void __interrupt near JumpFunctionISR28(void){Default_Dummy_ISR();};
  438:          void __interrupt near JumpFunctionISR27(void){Default_Dummy_ISR();};
  439:          void __interrupt near JumpFunctionISR26(void){Default_Dummy_ISR();};
  440:        #if (gLpmIncluded_d == 1)
  441:          void __interrupt near JumpFunctionISR25(void){PWRLib_RTIClock_ISR();};
  442:        #else
  443:          void __interrupt near JumpFunctionISR25(void){Default_Dummy_ISR();};
  444:        #endif
  445:          void __interrupt near JumpFunctionISR24(void){Switch_Press_ISR();};
  446:          void __interrupt near JumpFunctionISR23(void){Default_Dummy_ISR();};
  447:        #if (gIIC_Enabled_d == 1)        
  448:          void __interrupt near JumpFunctionISR22(void){IIC_Isr();};
  449:        #else
  450:          void __interrupt near JumpFunctionISR22(void){Default_Dummy_ISR();};
  451:        #endif
  452:        #if ( gCmtIncluded_d == 1)       
  453:          void __interrupt near JumpFunctionISR21(void){CMT_InterruptHandler();};
  454:        #else
  455:          void __interrupt near JumpFunctionISR21(void){Default_Dummy_ISR();};
  456:        #endif        
  457:          void __interrupt near JumpFunctionISR20(void){gUart1_TxIsr_c();};
  458:          void __interrupt near JumpFunctionISR19(void){gUart1_RxIsr_c();};       
  459:          void __interrupt near JumpFunctionISR18(void){gUart1_ErrorIsr_c();};
  460:          void __interrupt near JumpFunctionISR17(void){Default_Dummy_ISR();};        
  461:          void __interrupt near JumpFunctionISR16(void){Default_Dummy_ISR();};
  462:          void __interrupt near JumpFunctionISR15(void){Default_Dummy_ISR();};
  463:          void __interrupt near JumpFunctionISR14(void){Default_Dummy_ISR();};
  464:          void __interrupt near JumpFunctionISR13(void){Default_Dummy_ISR();};
  465:          void __interrupt near JumpFunctionISR12(void){Default_Dummy_ISR();};
  466:          void __interrupt near JumpFunctionISR11(void){Default_Dummy_ISR();};
  467:          void __interrupt near JumpFunctionISR10(void){Default_Dummy_ISR();};
  468:          void __interrupt near JumpFunctionISR09(void){TMR_InterruptHandler();};
  469:          void __interrupt near JumpFunctionISR08(void){Default_Dummy_ISR();};     
  470:          void __interrupt near JumpFunctionISR07(void){PhyHandlerRxWtrmrk_ISR();};
  471:          void __interrupt near JumpFunctionISR06(void){PhyHandlerTmr_ISR();};
  472:          void __interrupt near JumpFunctionISR05(void){PhyHandlerTx_ISR();};
  473:          void __interrupt near JumpFunctionISR04(void){PhyHandlerRx_ISR();};
  474:          void __interrupt near JumpFunctionISR03(void){Default_Dummy_ISR();};
  475:        #if (gTouchpadIncluded_d == 1)
  476:          void __interrupt near JumpFunctionISR02(void){TP_InterruptHandler();};
  477:        #else       
  478:          void __interrupt near JumpFunctionISR02(void){Default_Dummy_ISR();};
  479:        #endif
  480:          void __interrupt near JumpFunctionISR01(void){Default_Dummy_ISR();};
  481:          
  482:      #pragma CODE_SEG DEFAULT 
  483:    
  484:    #endif /* defined(PROCESSOR_QE128) || defined(PROCESSOR_MC1323X) */
  485:  #endif /* defined(gUseBootloader_d) */
  486:  
