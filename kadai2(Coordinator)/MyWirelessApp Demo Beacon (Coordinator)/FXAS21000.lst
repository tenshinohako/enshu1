*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /***********************************************************************************************\
    2:  * Freescale FXAS21000 Driver
    3:  *
    4:  * Filename: FXAS21000.c
    5:  *
    6:  *
    7:  * (c) Copyright 2009, Freescale, Inc.  All rights reserved.
    8:  *
    9:  * No part of this document must be reproduced in any form - including copied,
   10:  * transcribed, printed or by any electronic means - without specific written
   11:  * permission from Freescale Semiconductor.
   12:  *
   13:  \***********************************************************************************************/
   14:  
   15:  #include "IIC_Interface.h"
   16:  #include "IIC.h"
   17:  #include "IoConfig.h"
   18:  #include "IrqControlLib.h"
   19:  #include "TS_Interface.h"
   20:  #include "FunctionLib.h"
   21:  #include "PublicConst.h"
   22:  #include "MApp_init.h"
   23:  #include "FXAS21000.h"
   24:  
   25:  
   26:  /***********************************************************************************************\
   27:  * Public functions
   28:  \***********************************************************************************************/
   29:  
   30:  static tmrTimerID_t mFXAS21000TimerID = gTmrInvalidTimerID_c;
   31:  extern uint8_t FXAS21000_start_flag;
   32:  static start_print = 1;
   33:  
   34:  // *********************************************************
   35:  //  FXAS21000
   36:  // *********************************************************
   37:  
   38:  static dataFrom_FXAS21000_t mDataFrom_FXAS21000 = 
   39:  {                                                                
   40:    0x00, 
   41:    0x00,
   42:    0x00, 
   43:    0x00,
   44:    0x00
   45:  };
   46:  
   47:  /*********************************************************\
   48:  * Set MAG3110 call-back function
   49:  \*********************************************************/
   50:  void FXAS21000_SetCallBack(void (*pfCallBack)(void)){
   51:  	
   52:  	pfFXAS21000_CallBack = pfCallBack;
  0000 9efe05   [5]             LDHX  5,SP
  0003 960001   [5]             STHX  pfFXAS21000_CallBack:1
  0006 95       [2]             TSX   
  0007 e603     [3]             LDA   3,X
  0009 c70000   [4]             STA   pfFXAS21000_CallBack
   53:  	  	  
   54:  }
  000c 8d       [7]             RTC   
   55:  
   56:  // ==================================
   57:  // FXAS21000_int
   58:  // ==================================
   59:  void FXAS21000_int(void){
   60:    IIC_RegWrite(FXAS21000_SlaveAddressIIC,0x13,0x00);    // CTRL_REG1: Standby mode
  0000 a640     [2]             LDA   #64
  0002 87       [2]             PSHA  
  0003 ae13     [2]             LDX   #19
  0005 4f       [1]             CLRA  
  0006 ac000000 [8]             CALL  IIC_RegWrite
  000a 8a       [3]             PULH  
   61:    IIC_RegWrite(FXAS21000_SlaveAddressIIC,0x0D,0x00);    // CTRL_REG0: HPF=Off, 1600dps,
  000b a640     [2]             LDA   #64
  000d 87       [2]             PSHA  
  000e ae0d     [2]             LDX   #13
  0010 4f       [1]             CLRA  
  0011 ac000000 [8]             CALL  IIC_RegWrite
  0015 8a       [3]             PULH  
   62:    IIC_RegWrite(FXAS21000_SlaveAddressIIC,0x14,0x00);    // CTRL_REG2: Interrupt=Off
  0016 a640     [2]             LDA   #64
  0018 87       [2]             PSHA  
  0019 ae14     [2]             LDX   #20
  001b 4f       [1]             CLRA  
  001c ac000000 [8]             CALL  IIC_RegWrite
  0020 8a       [3]             PULH  
   63:    IIC_RegWrite(FXAS21000_SlaveAddressIIC,0x13,0x02);    // CTRL_REG1: ODR=200Hz, Active
  0021 a640     [2]             LDA   #64
  0023 87       [2]             PSHA  
  0024 ae13     [2]             LDX   #19
  0026 a602     [2]             LDA   #2
  0028 ac000000 [8]             CALL  IIC_RegWrite
  002c 8a       [3]             PULH  
   64:    mFXAS21000TimerID = TMR_AllocateTimer();
  002d ac000000 [8]             CALL  TMR_AllocateTimer
  0031 c70000   [4]             STA   mFXAS21000TimerID
   65:  }
  0034 8d       [7]             RTC   
   66:  
   67:  /*********************************************************\
   68:  * void FXAS21000_Start_Periodical_data(void) 
   69:  \*********************************************************/
   70:  void FXAS21000_Start_Periodical_data(void){
   71:  	TMR_StartIntervalTimer(mFXAS21000TimerID, mFXAS21000Interval_c,FXAS21000_Periodical_data);
  0000 c60000   [4]             LDA   mFXAS21000TimerID
  0003 87       [2]             PSHA  
  0004 ae64     [2]             LDX   #100
  0006 8c       [1]             CLRH  
  0007 89       [2]             PSHX  
  0008 8b       [2]             PSHH  
  0009 8b       [2]             PSHH  
  000a 8b       [2]             PSHH  
  000b 450000   [3]             LDHX  @FXAS21000_Periodical_data
  000e 89       [2]             PSHX  
  000f 8b       [2]             PSHH  
  0010 a600     [2]             LDA   @FXAS21000_Periodical_data:PAGE
  0012 87       [2]             PSHA  
  0013 ac000000 [8]             CALL  TMR_StartIntervalTimer
  0017 a708     [2]             AIS   #8
   72:  }
  0019 8d       [7]             RTC   
   73:  
   74:  /*********************************************************\
   75:  * void FXAS21000_Periodical_data(uint8_t timerId) 
   76:  \*********************************************************/
   77:  void FXAS21000_Periodical_data(uint8_t timerId){
  0000 a7f7     [2]             AIS   #-9
   78:  		
   79:    uint8_t rxData[7];
   80:    volatile int16_t Read_data_16bit;
   81:    
   82:    (void) timerId; /* prevent compiler warning */
   83:  
   84:    
   85:    rxData[0] = IIC_RegRead(FXAS21000_SlaveAddressIIC,0x00); // checking a STATUS-reg
  0002 ae40     [2]             LDX   #64
  0004 4f       [1]             CLRA  
  0005 ac000000 [8]             CALL  IIC_RegRead
  0009 95       [2]             TSX   
  000a f7       [2]             STA   ,X
   86:    
   87:    if( rxData[0] & 0x08 ){
  000b a508     [2]             BIT   #8
  000d 2750     [3]             BEQ   L5F ;abs = 005f
   88:        
   89:  	  IIC_RegReadN(FXAS21000_SlaveAddressIIC,0x01,0x06,&rxData[1]);      // Read data from $0x01 to 0x06
  000f a640     [2]             LDA   #64
  0011 87       [2]             PSHA  
  0012 a601     [2]             LDA   #1
  0014 87       [2]             PSHA  
  0015 a606     [2]             LDA   #6
  0017 af01     [2]             AIX   #1
  0019 ac000000 [8]             CALL  IIC_RegReadN
  001d a702     [2]             AIS   #2
   90:  	  
   91:  	  pfFXAS21000_CallBack();  // Set event in order to notify application in callback function.
  001f 320001   [5]             LDHX  pfFXAS21000_CallBack:1
  0022 c60000   [4]             LDA   pfFXAS21000_CallBack
  0025 8b       [2]             PSHH  
  0026 8b       [2]             PSHH  
  0027 8b       [2]             PSHH  
  0028 ac000000 [8]             CALL  _CALL_STAR08_FAR
   92:  	  
   93:  	  Read_data_16bit = (int16_t)(rxData[1]<<8);
  002c 95       [2]             TSX   
  002d e601     [3]             LDA   1,X
  002f ac00006f [8]             CALL  FXAS21000_Periodical_data:111
   94:  	  mDataFrom_FXAS21000.xOutReg =  ( Read_data_16bit + (int16_t)rxData[2] )>>2;
  0033 9eeb03   [4]             ADD   3,SP
  0036 ac000062 [8]             CALL  FXAS21000_Periodical_data:98
  003a 960000   [5]             STHX  mDataFrom_FXAS21000
   95:  	 
   96:  	  Read_data_16bit = (int16_t)(rxData[3]<<8);
  003d 95       [2]             TSX   
  003e e603     [3]             LDA   3,X
  0040 ac00006f [8]             CALL  FXAS21000_Periodical_data:111
   97:  	  mDataFrom_FXAS21000.yOutReg =  ( Read_data_16bit + (int16_t)rxData[4] )>>2; 
  0044 9eeb05   [4]             ADD   5,SP
  0047 ac000062 [8]             CALL  FXAS21000_Periodical_data:98
  004b 960002   [5]             STHX  mDataFrom_FXAS21000:2
   98:  	  
   99:  	  Read_data_16bit = (int16_t)(rxData[5]<<8);
  004e 95       [2]             TSX   
  004f e605     [3]             LDA   5,X
  0051 ac00006f [8]             CALL  FXAS21000_Periodical_data:111
  100:  	  mDataFrom_FXAS21000.zOutReg =  ( Read_data_16bit + (int16_t)rxData[6] )>>2; 
  0055 9eeb07   [4]             ADD   7,SP
  0058 ac000062 [8]             CALL  FXAS21000_Periodical_data:98
  005c 960004   [5]             STHX  mDataFrom_FXAS21000:4
  005f          L5F:    
  101:      
  102:  
  103:    }
  104:    
  105:  }
  005f a709     [2]             AIS   #9
  0061 8d       [7]             RTC   
  0062          L62:    
  0062 87       [2]             PSHA  
  0063 8b       [2]             PSHH  
  0064 86       [3]             PULA  
  0065 a900     [2]             ADC   #0
  0067 88       [3]             PULX  
  0068 47       [1]             ASRA  
  0069 56       [1]             RORX  
  006a 47       [1]             ASRA  
  006b 56       [1]             RORX  
  006c 87       [2]             PSHA  
  006d 8a       [3]             PULH  
  006e 8d       [7]             RTC   
  006f          L6F:    
  006f 87       [2]             PSHA  
  0070 4f       [1]             CLRA  
  0071 8a       [3]             PULH  
  0072 97       [1]             TAX   
  0073 9eff0b   [5]             STHX  11,SP
  0076 9efe0b   [5]             LDHX  11,SP
  0079 9f       [1]             TXA   
  007a 8d       [7]             RTC   
  106:  
  107:  
  108:  /*********************************************************\
  109:  * int16_t FXAS21000_CatchSensorData(uint8_t number)
  110:  \*********************************************************/
  111:  int16_t FXAS21000_CatchSensorData(uint8_t number){
  0000 a7fe     [2]             AIS   #-2
  112:  	
  113:  	int16_t catch_data;
  114:  	
  115:  	switch(number){
  0002 a103     [2]             CMP   #3
  0004 221c     [3]             BHI   L22 ;abs = 0022
  0006 410109   [4]             CBEQA #1,L12 ;abs = 0012
  0009 41020b   [4]             CBEQA #2,L17 ;abs = 0017
  000c a103     [2]             CMP   #3
  000e 2612     [3]             BNE   L22 ;abs = 0022
  0010 200a     [3]             BRA   L1C ;abs = 001c
  0012          L12:    
  116:  		case 1:
  117:  			catch_data = mDataFrom_FXAS21000.xOutReg;
  0012 320000   [5]             LDHX  mDataFrom_FXAS21000
  118:  		break;
  0015 2008     [3]             BRA   L1F ;abs = 001f
  0017          L17:    
  119:  		case 2:
  120:  			catch_data = mDataFrom_FXAS21000.yOutReg;
  0017 320002   [5]             LDHX  mDataFrom_FXAS21000:2
  121:  		break;
  001a 2003     [3]             BRA   L1F ;abs = 001f
  001c          L1C:    
  122:  		case 3:
  123:  			catch_data = mDataFrom_FXAS21000.zOutReg;
  001c 320004   [5]             LDHX  mDataFrom_FXAS21000:4
  001f          L1F:    
  001f 9eff01   [5]             STHX  1,SP
  0022          L22:    
  124:  		break;
  125:  		default :
  126:  		break;
  127:  	}
  128:  	
  129:      return catch_data;
  0022 9efe01   [5]             LDHX  1,SP
  130:      
  131:  }
  0025 a702     [2]             AIS   #2
  0027 8d       [7]             RTC   
  132:  
  133:  
  134:  /*********************************************************\
  135:  * void FXAS21000_Init(void)
  136:  \*********************************************************/
  137:  void FXAS21000_Init(void){
  138:  	  FXAS21000_SetCallBack(FXAS21000_CallBack);  
  0000 450000   [3]             LDHX  @FXAS21000_CallBack
  0003 89       [2]             PSHX  
  0004 8b       [2]             PSHH  
  0005 a600     [2]             LDA   @FXAS21000_CallBack:PAGE
  0007 87       [2]             PSHA  
  0008 ac000000 [8]             CALL  FXAS21000_SetCallBack
  000c a703     [2]             AIS   #3
  139:  	  FXAS21000_int();
  000e ac000000 [8]             CALL  FXAS21000_int
  140:  	  FXAS21000_start_flag = 1;
  0012 a601     [2]             LDA   #1
  0014 c70000   [4]             STA   FXAS21000_start_flag
  141:  }
  0017 8d       [7]             RTC   
  142:  
  143:  /*********************************************************\
  144:  * void FXAS21000_CallBack(void) 
  145:  \*********************************************************/
  146:  void FXAS21000_CallBack(void){
  147:  	
  148:  	TS_SendEvent(gAppTaskID_c, gAppEvt_FromFXAS21000_c);
  0000 c60000   [4]             LDA   gAppTaskID_c
  0003 450800   [3]             LDHX  #2048
  0006 ac000000 [8]             CALL  TS_SendEvent
  149:  	
  150:  }
  000a 8d       [7]             RTC   
  151:  
  152:  /*********************************************************\
  153:  * void FXAS21000_dump(event_t events)
  154:  \*********************************************************/
  155:  void FXAS21000_dump(event_t events){
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fd     [2]             AIS   #-3
  156:  
  157:  	volatile int16_t tmp;
  158:  	uint8_t  i;
  159:  	
  160:  	// Start to receive periodical data 
  161:  	if(FXAS21000_start_flag){
  0004 c60000   [4]             LDA   FXAS21000_start_flag
  0007 2708     [3]             BEQ   L11 ;abs = 0011
  162:  		FXAS21000_start_flag = 0;
  0009 4f       [1]             CLRA  
  000a c70000   [4]             STA   FXAS21000_start_flag
  163:  		FXAS21000_Start_Periodical_data();
  000d ac000000 [8]             CALL  FXAS21000_Start_Periodical_data
  0011          L11:    
  164:  	}
  165:  	
  166:  	if (events & gAppEvt_FromFXAS21000_c)
  0011 95       [2]             TSX   
  0012 e603     [3]             LDA   3,X
  0014 a508     [2]             BIT   #8
  0016 2771     [3]             BEQ   L89 ;abs = 0089
  167:  	{   
  168:  	    if(start_print){
  0018 320000   [5]             LDHX  start_print
  001b 271a     [3]             BEQ   L37 ;abs = 0037
  169:  	    	start_print = 0;
  001d 5f       [1]             CLRX  
  001e 8c       [1]             CLRH  
  001f 960000   [5]             STHX  start_print
  170:  			UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 
  0022 450000   [3]             LDHX  @"\012\015-----------------------------------------------\012\015"
  0025 ac00008c [8]             CALL  FXAS21000_dump:140
  171:  			UartUtil_Print("FXAS21000(12bit)------------------------------------", gAllowToBlock_d); 	
  0029 450000   [3]             LDHX  @"FXAS21000(12bit)------------------------------------"
  002c ac00008c [8]             CALL  FXAS21000_dump:140
  172:  			UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 		
  0030 450000   [3]             LDHX  @"\012\015-----------------------------------------------\012\015"
  0033 ac00008c [8]             CALL  FXAS21000_dump:140
  0037          L37:    
  173:  	    }
  174:  		for(i=1; i<4; i++){
  0037 a601     [2]             LDA   #1
  0039 95       [2]             TSX   
  003a f7       [2]             STA   ,X
  003b          L3B:    
  175:  			switch(i){			
  003b f6       [3]             LDA   ,X
  003c a103     [2]             CMP   #3
  003e 221d     [3]             BHI   L5D ;abs = 005d
  0040 410109   [4]             CBEQA #1,L4C ;abs = 004c
  0043 41020b   [4]             CBEQA #2,L51 ;abs = 0051
  0046 a103     [2]             CMP   #3
  0048 2613     [3]             BNE   L5D ;abs = 005d
  004a 200a     [3]             BRA   L56 ;abs = 0056
  004c          L4C:    
  176:  				case 1:
  177:  					
  178:  					UartUtil_Print("\n\rX axis : 0x", gAllowToBlock_d); 	
  004c 450000   [3]             LDHX  @"\012\015X axis : 0x"
  179:  				break;
  004f 2008     [3]             BRA   L59 ;abs = 0059
  0051          L51:    
  180:  				case 2:
  181:  					UartUtil_Print(" *0.2 [dps]  Y axis : 0x", gAllowToBlock_d);  
  0051 450000   [3]             LDHX  @" *0.2 [dps]  Y axis : 0x"
  182:  				break;
  0054 2003     [3]             BRA   L59 ;abs = 0059
  0056          L56:    
  183:  				case 3:
  184:  					UartUtil_Print(" *0.2 [dps]  Z axis : 0x", gAllowToBlock_d);  	
  0056 450000   [3]             LDHX  @" *0.2 [dps]  Z axis : 0x"
  0059          L59:    
  0059 ac00008c [8]             CALL  FXAS21000_dump:140
  005d          L5D:    
  185:  				break;
  186:  				
  187:  			}//switch(i){	 	
  188:  			
  189:  		    tmp = (uint16_t)FXAS21000_CatchSensorData(i);
  005d 95       [2]             TSX   
  005e f6       [3]             LDA   ,X
  005f ac000000 [8]             CALL  FXAS21000_CatchSensorData
  0063 9eff02   [5]             STHX  2,SP
  190:  			UartUtil_PrintHex((uint8_t *)&tmp, 2, 1); 	
  0066 95       [2]             TSX   
  0067 af01     [2]             AIX   #1
  0069 89       [2]             PSHX  
  006a 8b       [2]             PSHH  
  006b ae02     [2]             LDX   #2
  006d a601     [2]             LDA   #1
  006f ac000000 [8]             CALL  UartUtil_PrintHex
  0073 a702     [2]             AIS   #2
  191:  			
  192:  			if(i==3){
  0075 95       [2]             TSX   
  0076 f6       [3]             LDA   ,X
  0077 a103     [2]             CMP   #3
  0079 2607     [3]             BNE   L82 ;abs = 0082
  193:  				UartUtil_Print(" *0.2 [dps]", gAllowToBlock_d);  					
  007b 450000   [3]             LDHX  @" *0.2 [dps]"
  007e ac00008c [8]             CALL  FXAS21000_dump:140
  0082          L82:    
  0082 95       [2]             TSX   
  0083 7c       [4]             INC   ,X
  0084 f6       [3]             LDA   ,X
  0085 a104     [2]             CMP   #4
  0087 25b2     [3]             BCS   L3B ;abs = 003b
  0089          L89:    
  194:  			}
  195:  			
  196:  		} //for(i=1; i<4; i++){
  197:  		
  198:  		
  199:  	//	UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 		
  200:  	
  201:  	}
  202:  	
  203:  }
  0089 a705     [2]             AIS   #5
  008b 8d       [7]             RTC   
  008c          L8C:    
  008c a601     [2]             LDA   #1
  008e ac000000 [8]             CALL  UartUtil_Print
  0092 8d       [7]             RTC   
  204:  
  205:  
