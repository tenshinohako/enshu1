*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /*****************************************************************************
    2:  * Applications' initialization module
    3:  *
    4:  * (c) Copyright 2006, Freescale, Inc. All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor Romania A/S.
   10:  *
   11:  *****************************************************************************/
   12:  
   13:  #include "Mapp_init.h"
   14:  #include "Mac_Globals.h"
   15:  #include "MacInit.h"
   16:  #include "NVM_Interface.h"
   17:  #include "CMT_Interface.h"
   18:  #if gZtcIncluded_d
   19:  #include "ZTCInterface.h"
   20:  #endif /* gZtcIncluded_d */
   21:  
   22:  /************************************************************************************
   23:  *************************************************************************************
   24:  * Private macros
   25:  *************************************************************************************
   26:  ************************************************************************************/
   27:  
   28:  
   29:  /************************************************************************************
   30:  *************************************************************************************
   31:  * Private prototypes
   32:  *************************************************************************************
   33:  ************************************************************************************/
   34:  
   35:  void IdleTask(event_t event);
   36:  void AppTask(event_t events);
   37:  tsTaskID_t gAppTaskID_c;
   38:  
   39:  /************************************************************************************
   40:  *************************************************************************************
   41:  * Private type definitions
   42:  *************************************************************************************
   43:  ************************************************************************************/
   44:  
   45:  /************************************************************************************
   46:  *************************************************************************************
   47:  * Private memory declarations
   48:  *************************************************************************************
   49:  ************************************************************************************/
   50:  
   51:  extern uint8_t aExtendedAddress[8];
   52:  extern uint8_t gState;
   53:  
   54:  #if gNvStorageIncluded_d
   55:  static bool_t receiverOn;
   56:  #endif
   57:  /************************************************************************************
   58:  *************************************************************************************
   59:  * Public functions
   60:  *************************************************************************************
   61:  ************************************************************************************/
   62:  extern void MacPhyInit_WriteExtAddress(uint8_t *pExtendedAddress);
   63:  
   64:  /*****************************************************************************
   65:  * main function
   66:  *
   67:  * Interface assumptions:
   68:  * 
   69:  * Return value:
   70:  * None
   71:  *****************************************************************************/
   72:  
   73:   void main(void)
   74:   {
   75:   #ifdef BOOTLOADER_ENABLED	
   76:    NVM_FindNVRAM();
   77:   #endif	
   78:    bool_t tmp_bool;
   79:   
   80:    /* Interrupts should already be off. This is probably redundant. */
   81:    IrqControlLib_DisableAllIrqs();
  0000 9b       [1]             SEI   
   82:    Platform_Init();    // Init platform
  0001 ac000000 [8]             CALL  Platform_Init
   83:    Init_802_15_4();
  0005 ac000000 [8]             CALL  Init_802_15_4
   84:  
   85:    TS_Init();  
  0009 ac000000 [8]             CALL  TS_Init
   86:    TMR_Init();                          /* Init the kernel. */
  000d ac000000 [8]             CALL  TMR_Init
   87:    NvModuleInit();
   88:    Uart_ModuleInit();
  0011 ac000000 [8]             CALL  Uart_ModuleInit
   89:    MacInit();
  0015 ac000000 [8]             CALL  MacInit
   90:  
   91:    tmp_bool=CMT_Initialize(); //initialize IR
  0019 ac000000 [8]             CALL  CMT_Initialize
   92:  	
   93:    #if gZtcIncluded_d
   94:    Ztc_TaskInit();
   95:    #endif /* gZtcIncluded_d */ 
   96:  
   97:    /*initialize the application*/
   98:   
   99:    gAppTaskID_c = TS_CreateTask(gTsAppTaskPriority_c, AppTask);
  001d a680     [2]             LDA   #-128
  001f 87       [2]             PSHA  
  0020 450000   [3]             LDHX  @AppTask
  0023 89       [2]             PSHX  
  0024 8b       [2]             PSHH  
  0025 a600     [2]             LDA   @AppTask:PAGE
  0027 87       [2]             PSHA  
  0028 ac000000 [8]             CALL  TS_CreateTask
  002c a704     [2]             AIS   #4
  002e c70000   [4]             STA   gAppTaskID_c
  100:   
  101:    MApp_init();
  0031 ac000000 [8]             CALL  MApp_init
  102:    /*do not allow the device to enter sleep mode*/
  103:    PWR_DisallowDeviceToSleep();   
  0035 ac000000 [8]             CALL  PWR_DisallowDeviceToSleep
  104:    /*All LED's are switched OFF*/
  105:    Led1Off();
  0039 1000     [5]             BSET  0,0
  106:    Led2Off();
  003b 1800     [5]             BSET  4,0
  107:    Led3Off();
  003d 1006     [5]             BSET  0,6
  108:    Led4Off();
  003f 1206     [5]             BSET  1,6
  109:    /* if the board is mc13213 SRB or NCB turn on LED5 */
  110:    #if (gTargetMC13213SRB_d == 1) || (gTargetMC13213NCB_d == 1) || ((gTarget_UserDefined_d == 1) && (!defined(PROCESSOR_MC1323X)) && (!defined(PROCESSOR_QE128)))
  111:      Led5On();
  112:    #endif
  113:    
  114:    /* Start the task scheduler. Does not return. */
  115:    TS_Scheduler(); 
  0041 ac000000 [8]             CALL  TS_Scheduler
  116:   
  117:  }
  0045 8d       [7]             RTC   
  118:  
  119:  
  120:  #if gNvStorageIncluded_d
  121:  
  122:  void BUtl_SetReceiverOff(void)
  123:  {
  124:   /* This function is called by the NVM component at the start of the NV operation */
  125:   mlmeMessage_t msg;	  
  126:   bool_t value; 
  127:   /* get the receiver state */
  128:   
  129:   msg.msgType = gMlmeGetReq_c;
  130:   msg.msgData.getReq.pibAttribute = gMPibRxOnWhenIdle_c;
  131:   msg.msgData.getReq.pibAttributeValue = &value; 
  132:   (void)MSG_Send(NWK_MLME, &msg);
  133:   
  134:   if(value)
  135:   {
  136:    /* Turn off the receiver during NVM operation */
  137:    receiverOn = TRUE;
  138:    
  139:    value = FALSE;
  140:    msg.msgType = gMlmeSetReq_c;
  141:    msg.msgData.setReq.pibAttribute = gMPibRxOnWhenIdle_c;
  142:    msg.msgData.setReq.pibAttributeValue = &value;
  143:    (void)MSG_Send(NWK_MLME, &msg);
  144:   }
  145:   else
  146:   {
  147:    /* Receiver already turned off */
  148:    receiverOn = FALSE;
  149:   }
  150:   
  151:  }
  152:  
  153:  void BUtl_SetReceiverOn(void)
  154:  {
  155:   /* This function is called by the NVM component at the end of the NV operation */
  156:   mlmeMessage_t msg;	  
  157:   bool_t value = TRUE;
  158:   if(receiverOn == TRUE)
  159:   {  
  160:    /* Restore receiver state */
  161:    msg.msgType = gMlmeSetReq_c;
  162:    msg.msgData.setReq.pibAttribute = gMPibRxOnWhenIdle_c;
  163:    msg.msgData.setReq.pibAttributeValue = &value;
  164:    (void)MSG_Send(NWK_MLME, &msg);
  165:   } 
  166:  }
  167:  
  168:  #endif
  169:  
  170:  /*****************************************************************************
  171:  * Entry point to the idle task
  172:  *
  173:  * Interface assumptions:
  174:  * Cannot use any call by which this task has to be suspended.This task should
  175:  * always be ready to run if there are no other tasks in the system
  176:  * 
  177:  * Return value:
  178:  * None
  179:  *****************************************************************************/
  180:  
  181:  void IdleTask(event_t events)
  182:  {
  183:    /* Just to avoid the compiler warning */
  184:    (void)events;
  185:  
  186:   #if gNvStorageIncluded_d
  187:    /* Process NV Storage save-on-idle and save-on-count requests. */
  188:    NvIdle();
  189:   #endif
  190:  
  191:      
  192:    #if (gLpmIncluded_d == 1)
  193:    /*Low power management*/
  194:      if(PWR_CheckIfDeviceCanGoToSleep())    
  195:        PWR_EnterLowPower();
  196:    #endif /*gLpmIncluded_d*/         
  197:      
  198:  }
  0000 8d       [7]             RTC   
  199:  
  200:  
  201:  /*****************************************************************************
  202:  * Initialize the MAC 64 bit address
  203:  *
  204:  * Interface assumptions:
  205:  * None
  206:  * 
  207:  * Return value:
  208:  * None
  209:  *****************************************************************************/
  210:  void Init_MacExtendedAddress( void ) 
  211:  {
  0000 a7f8     [2]             AIS   #-8
  212:  
  213:    uint8_t tempExtAddress[8]= {mDefaultValueOfExtendedAddress_c};
  0002 a6ff     [2]             LDA   #-1
  0004 95       [2]             TSX   
  0005 f7       [2]             STA   ,X
  0006 e701     [3]             STA   1,X
  0008 e702     [3]             STA   2,X
  000a e703     [3]             STA   3,X
  000c e704     [3]             STA   4,X
  000e a6f9     [2]             LDA   #-7
  0010 e705     [3]             STA   5,X
  0012 6f06     [5]             CLR   6,X
  0014 a691     [2]             LDA   #-111
  0016 e707     [3]             STA   7,X
  214:    /*Check if Extended address is already generated(if the Extended Address 
  215:    is All "0xFF", it means that no extended address is genereted);If not set
  216:    it to the value chosen by application layer*/
  217:    if((aExtendedAddress[0] & aExtendedAddress[1]
  0018 c60000   [4]             LDA   aExtendedAddress
  001b c40001   [4]             AND   aExtendedAddress:1
  001e c40002   [4]             AND   aExtendedAddress:2
  0021 c40003   [4]             AND   aExtendedAddress:3
  0024 c40004   [4]             AND   aExtendedAddress:4
  0027 c40005   [4]             AND   aExtendedAddress:5
  002a c40006   [4]             AND   aExtendedAddress:6
  002d c40007   [4]             AND   aExtendedAddress:7
  0030 4c       [1]             INCA  
  0031 2604     [3]             BNE   L37 ;abs = 0037
  218:      & aExtendedAddress[2] & aExtendedAddress[3]
  219:      & aExtendedAddress[4] & aExtendedAddress[5]
  220:      & aExtendedAddress[6] & aExtendedAddress[7]) 
  221:      == 0xFF) 
  222:      {
  223:      /*Set the Extended Address From the App*/
  224:        MacPhyInit_WriteExtAddress(tempExtAddress);
  0033 ac000000 [8]             CALL  MacPhyInit_WriteExtAddress
  0037          L37:    
  225:      }
  226:  }
  0037 a708     [2]             AIS   #8
  0039 8d       [7]             RTC   
  227:  
  228:  /******************************************************************************
  229:  * BeeAppAssert
  230:  *
  231:  * Something failed in the stack or app that can't recover. Stop here. Mostly
  232:  * used during debug phase of product. Could be used
  233:  ******************************************************************************/
  234:  void BeeAppAssert
  235:    (
  236:    assertCode_t code /* IN: why the assert failed */
  237:    )
  238:  {
  0000 8b       [2]             PSHH  
  239:    volatile bool_t waitForever = code; /* just set to anything non-zero */
  0001 95       [2]             TSX   
  0002 f7       [2]             STA   ,X
  0003          L3:     
  240:    
  241:    while (waitForever)
  0003 7d       [3]             TST   ,X
  0004 26fd     [3]             BNE   L3 ;abs = 0003
  242:      { }
  243:  }
  0006 8a       [3]             PULH  
  0007 8d       [7]             RTC   
  244:  
  245:  /******************************************************************************
  246:  * Swap2Bytes - needed for ZTC
  247:  *
  248:  * Swaps two bytes
  249:  ******************************************************************************/
  250:  uint16_t Swap2Bytes(uint16_t iOldValue)
  251:  {
  0000 a7fe     [2]             AIS   #-2
  252:    uint16_t iValue;
  253:  
  254:    iValue = ((uint8_t *)&iOldValue)[1] << 8;
  255:    iValue += ((uint8_t *)&iOldValue)[0];
  0002 8b       [2]             PSHH  
  0003 9eef02   [4]             STX   2,SP
  0006 95       [2]             TSX   
  0007 6f02     [5]             CLR   2,X
  0009 86       [3]             PULA  
  000a e702     [3]             STA   2,X
  256:  
  257:    return iValue;
  000c 9efe01   [5]             LDHX  1,SP
  258:  }
  000f a702     [2]             AIS   #2
  0011 8d       [7]             RTC   
  259:  
  260:  /******************************************************************************
  261:  * Swap4Bytes - needed for ZTC
  262:  *
  263:  * Swaps two bytes
  264:  ******************************************************************************/
  265:  uint32_t Swap4Bytes(uint32_t iOldValue)
  266:  {
  0000 a7fc     [2]             AIS   #-4
  267:    uint32_t iValue;
  268:  
  269:    ((uint8_t*)&iValue)[0] = ((uint8_t *)&iOldValue)[3];
  0002 95       [2]             TSX   
  0003 e60a     [3]             LDA   10,X
  0005 f7       [2]             STA   ,X
  270:    ((uint8_t*)&iValue)[1] = ((uint8_t *)&iOldValue)[2];
  0006 e609     [3]             LDA   9,X
  0008 e701     [3]             STA   1,X
  271:    ((uint8_t*)&iValue)[2] = ((uint8_t *)&iOldValue)[1];
  000a e608     [3]             LDA   8,X
  000c e702     [3]             STA   2,X
  272:    ((uint8_t*)&iValue)[3] = ((uint8_t *)&iOldValue)[0];
  000e e607     [3]             LDA   7,X
  0010 e703     [3]             STA   3,X
  273:  
  274:    return iValue;
  0012 9efe0c   [5]             LDHX  12,SP
  0015 89       [2]             PSHX  
  0016 8b       [2]             PSHH  
  0017 95       [2]             TSX   
  0018 af02     [2]             AIX   #2
  001a a604     [2]             LDA   #4
  001c cd0000   [6]             JSR   _COPY
  275:  }
  001f a704     [2]             AIS   #4
  0021 8d       [7]             RTC   
  276:  /*******************************************************************************/
  277:  
