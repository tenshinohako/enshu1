*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /***********************************************************************************************\
    2:  
    3:  * Freescale MMA8652 Driver
    4:  *
    5:  * Filename: MMA8652.c
    6:  *
    7:  *
    8:  * (c) Copyright 2009, Freescale, Inc.  All rights reserved.
    9:  *
   10:  * No part of this document must be reproduced in any form - including copied,
   11:  * transcribed, printed or by any electronic means - without specific written
   12:  * permission from Freescale Semiconductor.
   13:  *
   14:  \***********************************************************************************************/
   15:  
   16:  #include "IIC_Interface.h"
   17:  #include "IIC.h"
   18:  #include "IoConfig.h"
   19:  #include "IrqControlLib.h"
   20:  #include "TS_Interface.h"
   21:  #include "FunctionLib.h"
   22:  #include "PublicConst.h"
   23:  #include "MApp_init.h"
   24:  #include "MMA8652.h"
   25:  
   26:  
   27:  static dataFrom_MMA8652_t mDataFrom_MMA8652 = 
   28:  {                                                                
   29:    0x00, 
   30:    0x00,
   31:    0x00, 
   32:    0x00,
   33:    0x00
   34:  };
   35:  
   36:  static tmrTimerID_t mMMA8652TimerID = gTmrInvalidTimerID_c;
   37:  
   38:  extern uint8_t MMA8652_start_flag;
   39:  
   40:  
   41:  /*********************************************************\
   42:  * void MMA8652_SetCallBack(void (*pfCallBack)(void))
   43:  \*********************************************************/
   44:  void MMA8652_SetCallBack(void (*pfCallBack)(void)) {
   45:  	
   46:  	pfMMA8652_CallBack = pfCallBack;
  0000 9efe05   [5]             LDHX  5,SP
  0003 960001   [5]             STHX  pfMMA8652_CallBack:1
  0006 95       [2]             TSX   
  0007 e603     [3]             LDA   3,X
  0009 c70000   [4]             STA   pfMMA8652_CallBack
   47:  	  	  
   48:  }
  000c 8d       [7]             RTC   
   49:  
   50:  /*********************************************************\
   51:  * void MMA8652_int(void)
   52:  \*********************************************************/
   53:  void MMA8652_int(void){
   54:  	
   55:  	IIC_RegWrite(MMA8652_SlaveAddressIIC,CTRL_REG1,0x00);                   // CTRL_REG1:   Standby mode
  0000 a63a     [2]             LDA   #58
  0002 87       [2]             PSHA  
  0003 ae2a     [2]             LDX   #42
  0005 4f       [1]             CLRA  
  0006 ac000000 [8]             CALL  IIC_RegWrite
  000a 8a       [3]             PULH  
   56:  	IIC_RegWrite(MMA8652_SlaveAddressIIC,XYZ_DATA_CFG_REG,FULL_SCALE_2G);   // XYZ_DATA_CFG:2g mode
  000b a63a     [2]             LDA   #58
  000d 87       [2]             PSHA  
  000e ae0e     [2]             LDX   #14
  0010 4f       [1]             CLRA  
  0011 ac000000 [8]             CALL  IIC_RegWrite
  0015 8a       [3]             PULH  
   57:  	IIC_RegWrite(MMA8652_SlaveAddressIIC,CTRL_REG2,MODS1_MASK);             // CTRL_REG2:   High Resolution mode
  0016 a63a     [2]             LDA   #58
  0018 87       [2]             PSHA  
  0019 ae2b     [2]             LDX   #43
  001b a602     [2]             LDA   #2
  001d ac000000 [8]             CALL  IIC_RegWrite
  0021 8a       [3]             PULH  
   58:  	IIC_RegWrite(MMA8652_SlaveAddressIIC,CTRL_REG1,(DR1_MASK|ACTIVE_MASK)); // CTRL_REG1:   ODR=200Hz(=5ms),Active mode
  0022 a63a     [2]             LDA   #58
  0024 87       [2]             PSHA  
  0025 ae2a     [2]             LDX   #42
  0027 a611     [2]             LDA   #17
  0029 ac000000 [8]             CALL  IIC_RegWrite
  002d 8a       [3]             PULH  
   59:  	mMMA8652TimerID = TMR_AllocateTimer();
  002e ac000000 [8]             CALL  TMR_AllocateTimer
  0032 c70000   [4]             STA   mMMA8652TimerID
   60:  	
   61:  }
  0035 8d       [7]             RTC   
   62:  
   63:  /*********************************************************\
   64:  * void MMA8652_Start_Periodical_data(void)
   65:  \*********************************************************/
   66:  void MMA8652_Start_Periodical_data(void) {
   67:  	TMR_StartIntervalTimer(mMMA8652TimerID, mMMA8652Interval_c,MMA8652_Periodical_data);
  0000 c60000   [4]             LDA   mMMA8652TimerID
  0003 87       [2]             PSHA  
  0004 4502bc   [3]             LDHX  #700
  0007 89       [2]             PSHX  
  0008 8b       [2]             PSHH  
  0009 4f       [1]             CLRA  
  000a 87       [2]             PSHA  
  000b 87       [2]             PSHA  
  000c 450000   [3]             LDHX  @MMA8652_Periodical_data
  000f 89       [2]             PSHX  
  0010 8b       [2]             PSHH  
  0011 a600     [2]             LDA   @MMA8652_Periodical_data:PAGE
  0013 87       [2]             PSHA  
  0014 ac000000 [8]             CALL  TMR_StartIntervalTimer
  0018 a708     [2]             AIS   #8
   68:  }
  001a 8d       [7]             RTC   
   69:  
   70:  
   71:  /*********************************************************\
   72:  * MMA8652_Data
   73:  \*********************************************************/
   74:  void MMA8652_Periodical_data(uint8_t timerId ) {
  0000 a7f7     [2]             AIS   #-9
   75:  	
   76:    uint8_t rxData[7];
   77:    volatile int16_t Read_data_16bit;
   78:  
   79:    (void) timerId; /* prevent compiler warning */
   80:  
   81:    rxData[0] = (IIC_RegRead(MMA8652_SlaveAddressIIC,STATUS_00_REG)); // checking a STATUS-reg
  0002 ae3a     [2]             LDX   #58
  0004 4f       [1]             CLRA  
  0005 ac000000 [8]             CALL  IIC_RegRead
  0009 95       [2]             TSX   
  000a f7       [2]             STA   ,X
   82:  	
   83:    if( rxData[0] & 0x08 ){
  000b a508     [2]             BIT   #8
  000d 2750     [3]             BEQ   L5F ;abs = 005f
   84:  	  
   85:  	  IIC_RegReadN(MMA8652_SlaveAddressIIC,OUT_X_MSB_REG, OUT_Z_LSB_REG, &rxData[1]); // Read data from $0x01 to 0x06
  000f a63a     [2]             LDA   #58
  0011 87       [2]             PSHA  
  0012 a601     [2]             LDA   #1
  0014 87       [2]             PSHA  
  0015 a606     [2]             LDA   #6
  0017 af01     [2]             AIX   #1
  0019 ac000000 [8]             CALL  IIC_RegReadN
  001d a702     [2]             AIS   #2
   86:    
   87:  	  pfMMA8652_CallBack();  // Set event in order to notify application in callback function. 
  001f 320001   [5]             LDHX  pfMMA8652_CallBack:1
  0022 c60000   [4]             LDA   pfMMA8652_CallBack
  0025 8b       [2]             PSHH  
  0026 8b       [2]             PSHH  
  0027 8b       [2]             PSHH  
  0028 ac000000 [8]             CALL  _CALL_STAR08_FAR
   88:  	  
   89:  	  Read_data_16bit = (int16_t)(rxData[1]<<8);
  002c 95       [2]             TSX   
  002d e601     [3]             LDA   1,X
  002f ac000073 [8]             CALL  MMA8652_Periodical_data:115
   90:  	  mDataFrom_MMA8652.xOutReg =  ( Read_data_16bit + (int16_t)rxData[2] ) >>4;
  0033 9eeb03   [4]             ADD   3,SP
  0036 ac000062 [8]             CALL  MMA8652_Periodical_data:98
  003a 960000   [5]             STHX  mDataFrom_MMA8652
   91:  	 
   92:  	  Read_data_16bit = (int16_t)(rxData[3]<<8);
  003d 95       [2]             TSX   
  003e e603     [3]             LDA   3,X
  0040 ac000073 [8]             CALL  MMA8652_Periodical_data:115
   93:  	  mDataFrom_MMA8652.yOutReg =  ( Read_data_16bit + (int16_t)rxData[4] ) >>4; 
  0044 9eeb05   [4]             ADD   5,SP
  0047 ac000062 [8]             CALL  MMA8652_Periodical_data:98
  004b 960002   [5]             STHX  mDataFrom_MMA8652:2
   94:  	  
   95:  	  Read_data_16bit = (int16_t)(rxData[5]<<8);
  004e 95       [2]             TSX   
  004f e605     [3]             LDA   5,X
  0051 ac000073 [8]             CALL  MMA8652_Periodical_data:115
   96:  	  mDataFrom_MMA8652.zOutReg =  ( Read_data_16bit + (int16_t)rxData[6] ) >>4; 
  0055 9eeb07   [4]             ADD   7,SP
  0058 ac000062 [8]             CALL  MMA8652_Periodical_data:98
  005c 960004   [5]             STHX  mDataFrom_MMA8652:4
  005f          L5F:    
   97:  	
   98:  		
   99:    }
  100:    
  101:  }
  005f a709     [2]             AIS   #9
  0061 8d       [7]             RTC   
  0062          L62:    
  0062 87       [2]             PSHA  
  0063 8b       [2]             PSHH  
  0064 86       [3]             PULA  
  0065 a900     [2]             ADC   #0
  0067 88       [3]             PULX  
  0068 47       [1]             ASRA  
  0069 56       [1]             RORX  
  006a 47       [1]             ASRA  
  006b 56       [1]             RORX  
  006c 47       [1]             ASRA  
  006d 56       [1]             RORX  
  006e 47       [1]             ASRA  
  006f 56       [1]             RORX  
  0070 87       [2]             PSHA  
  0071 8a       [3]             PULH  
  0072 8d       [7]             RTC   
  0073          L73:    
  0073 87       [2]             PSHA  
  0074 4f       [1]             CLRA  
  0075 8a       [3]             PULH  
  0076 97       [1]             TAX   
  0077 9eff0b   [5]             STHX  11,SP
  007a 9efe0b   [5]             LDHX  11,SP
  007d 9f       [1]             TXA   
  007e 8d       [7]             RTC   
  102:  
  103:  /*********************************************************\
  104:  * int16_t MMA8652_CatchSensorData(uint8_t number)
  105:  \*********************************************************/
  106:  int16_t MMA8652_CatchSensorData(uint8_t number){
  0000 a7fe     [2]             AIS   #-2
  107:  	
  108:  	int16_t catch_data;
  109:  	
  110:  	switch(number){
  0002 a103     [2]             CMP   #3
  0004 221c     [3]             BHI   L22 ;abs = 0022
  0006 410109   [4]             CBEQA #1,L12 ;abs = 0012
  0009 41020b   [4]             CBEQA #2,L17 ;abs = 0017
  000c a103     [2]             CMP   #3
  000e 2612     [3]             BNE   L22 ;abs = 0022
  0010 200a     [3]             BRA   L1C ;abs = 001c
  0012          L12:    
  111:  		case 1:
  112:  			catch_data = mDataFrom_MMA8652.xOutReg;
  0012 320000   [5]             LDHX  mDataFrom_MMA8652
  113:  		break;
  0015 2008     [3]             BRA   L1F ;abs = 001f
  0017          L17:    
  114:  		case 2:
  115:  			catch_data = mDataFrom_MMA8652.yOutReg;
  0017 320002   [5]             LDHX  mDataFrom_MMA8652:2
  116:  		break;
  001a 2003     [3]             BRA   L1F ;abs = 001f
  001c          L1C:    
  117:  		case 3:
  118:  			catch_data = mDataFrom_MMA8652.zOutReg;
  001c 320004   [5]             LDHX  mDataFrom_MMA8652:4
  001f          L1F:    
  001f 9eff01   [5]             STHX  1,SP
  0022          L22:    
  119:  		break;
  120:  		default :
  121:  		break;
  122:  	}
  123:  	
  124:      return catch_data;
  0022 9efe01   [5]             LDHX  1,SP
  125:      
  126:  }
  0025 a702     [2]             AIS   #2
  0027 8d       [7]             RTC   
  127:  
  128:  /*********************************************************\
  129:  * void MMA8652_Init(void)
  130:  \*********************************************************/
  131:  void MMA8652_Init(void){
  132:  	  MMA8652_SetCallBack(MMA8652_CallBack);  
  0000 450000   [3]             LDHX  @MMA8652_CallBack
  0003 89       [2]             PSHX  
  0004 8b       [2]             PSHH  
  0005 a600     [2]             LDA   @MMA8652_CallBack:PAGE
  0007 87       [2]             PSHA  
  0008 ac000000 [8]             CALL  MMA8652_SetCallBack
  000c a703     [2]             AIS   #3
  133:  	  MMA8652_int();
  000e ac000000 [8]             CALL  MMA8652_int
  134:  	  MMA8652_start_flag = 1;
  0012 a601     [2]             LDA   #1
  0014 c70000   [4]             STA   MMA8652_start_flag
  135:  }
  0017 8d       [7]             RTC   
  136:  
  137:  /*********************************************************\
  138:  * void MMA8652_CallBack(void)
  139:  \*********************************************************/
  140:  void MMA8652_CallBack(void){
  141:  	
  142:  	TS_SendEvent(gAppTaskID_c, gAppEvt_FromMMA8652_c);
  0000 c60000   [4]             LDA   gAppTaskID_c
  0003 450200   [3]             LDHX  #512
  0006 ac000000 [8]             CALL  TS_SendEvent
  143:  	
  144:  }
  000a 8d       [7]             RTC   
  145:  
  146:  /*********************************************************\
  147:  * void MMA8652_dump(event_t events)
  148:  \*********************************************************/
  149:  void MMA8652_dump(event_t events){
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fd     [2]             AIS   #-3
  150:  	
  151:  	volatile int16_t tmp;	
  152:  	uint8_t i;
  153:  	
  154:  	// Start to receive periodical data 
  155:  	if(MMA8652_start_flag){
  0004 c60000   [4]             LDA   MMA8652_start_flag
  0007 2708     [3]             BEQ   L11 ;abs = 0011
  156:  		MMA8652_start_flag = 0;
  0009 4f       [1]             CLRA  
  000a c70000   [4]             STA   MMA8652_start_flag
  157:  		MMA8652_Start_Periodical_data();
  000d ac000000 [8]             CALL  MMA8652_Start_Periodical_data
  0011          L11:    
  158:  	}
  159:  	
  160:  	
  161:  	if (events & gAppEvt_FromMMA8652_c)
  0011 95       [2]             TSX   
  0012 e603     [3]             LDA   3,X
  0014 a502     [2]             BIT   #2
  0016 2766     [3]             BEQ   L7E ;abs = 007e
  162:  	{   
  163:  		UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 
  0018 450000   [3]             LDHX  @"\012\015-----------------------------------------------\012\015"
  001b ac000081 [8]             CALL  MMA8652_dump:129
  164:  		
  165:  		for(i=1; i<4; i++){
  001f a601     [2]             LDA   #1
  0021 95       [2]             TSX   
  0022 f7       [2]             STA   ,X
  0023          L23:    
  166:  			switch(i){			
  0023 95       [2]             TSX   
  0024 f6       [3]             LDA   ,X
  0025 a103     [2]             CMP   #3
  0027 221b     [3]             BHI   L44 ;abs = 0044
  0029 410109   [4]             CBEQA #1,L35 ;abs = 0035
  002c 41020b   [4]             CBEQA #2,L3A ;abs = 003a
  002f a103     [2]             CMP   #3
  0031 2611     [3]             BNE   L44 ;abs = 0044
  0033 200a     [3]             BRA   L3F ;abs = 003f
  0035          L35:    
  167:  				case 1:
  168:  					UartUtil_Print("MMA8652(2g: Int2,Float10) \n\rX axis : 0x", gAllowToBlock_d); 
  0035 450000   [3]             LDHX  @"MMA8652(2g: Int2,Float10) \012\015X axis : 0x"
  169:  				break;
  0038 200d     [3]             BRA   L47 ;abs = 0047
  003a          L3A:    
  170:  				case 2:
  171:  					UartUtil_Print(" /1024 [g]\n\rY axis : 0x", gAllowToBlock_d);  
  003a 450000   [3]             LDHX  @" /1024 [g]\012\015Y axis : 0x"
  172:  				break;
  003d 2008     [3]             BRA   L47 ;abs = 0047
  003f          L3F:    
  173:  				case 3:
  174:  					UartUtil_Print(" /1024 [g]\n\rZ axis : 0x", gAllowToBlock_d);  		
  003f 450000   [3]             LDHX  @" /1024 [g]\012\015Z axis : 0x"
  175:  				break;
  0042 2003     [3]             BRA   L47 ;abs = 0047
  0044          L44:    
  176:  				default:
  177:  					UartUtil_Print("???????????????", gAllowToBlock_d);  		
  0044 450000   [3]             LDHX  @"???????????????"
  0047          L47:    
  0047 ac000081 [8]             CALL  MMA8652_dump:129
  178:  				break;
  179:  			}//switch(i){	 	
  180:  			
  181:  			tmp = MMA8652_CatchSensorData(i); 	
  004b 95       [2]             TSX   
  004c f6       [3]             LDA   ,X
  004d ac000000 [8]             CALL  MMA8652_CatchSensorData
  0051 9eff02   [5]             STHX  2,SP
  182:  			UartUtil_PrintHex((uint8_t *)&tmp, 2, 1); 	
  0054 95       [2]             TSX   
  0055 af01     [2]             AIX   #1
  0057 89       [2]             PSHX  
  0058 8b       [2]             PSHH  
  0059 ae02     [2]             LDX   #2
  005b a601     [2]             LDA   #1
  005d ac000000 [8]             CALL  UartUtil_PrintHex
  0061 a702     [2]             AIS   #2
  183:  			
  184:  			if(i==3){
  0063 95       [2]             TSX   
  0064 f6       [3]             LDA   ,X
  0065 a103     [2]             CMP   #3
  0067 2607     [3]             BNE   L70 ;abs = 0070
  185:  				UartUtil_Print(" /1024 [g]", gAllowToBlock_d);  					
  0069 450000   [3]             LDHX  @" /1024 [g]"
  006c ac000081 [8]             CALL  MMA8652_dump:129
  0070          L70:    
  0070 95       [2]             TSX   
  0071 7c       [4]             INC   ,X
  0072 f6       [3]             LDA   ,X
  0073 a104     [2]             CMP   #4
  0075 25ac     [3]             BCS   L23 ;abs = 0023
  186:  			}
  187:  			
  188:  		} //for(i=1; i<4; i++){
  189:  		
  190:  		
  191:  		UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 		
  0077 450000   [3]             LDHX  @"\012\015-----------------------------------------------\012\015"
  007a ac000081 [8]             CALL  MMA8652_dump:129
  007e          L7E:    
  192:  	
  193:  	}
  194:  	
  195:  	
  196:  }
  007e a705     [2]             AIS   #5
  0080 8d       [7]             RTC   
  0081          L81:    
  0081 a601     [2]             LDA   #1
  0083 ac000000 [8]             CALL  UartUtil_Print
  0087 8d       [7]             RTC   
  197:  
  198:  /***********************************************************************************************\
  199:  * Private functions
  200:  \***********************************************************************************************/
  201:  
