*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /***********************************************************************************************\
    2:  * Freescale MMA9553 Driver
    3:  *
    4:  * Filename: MMA9553.c
    5:  *
    6:  *
    7:  * (c) Copyright 2009, Freescale, Inc.  All rights reserved.
    8:  *
    9:  * No part of this document must be reproduced in any form - including copied,
   10:  * transcribed, printed or by any electronic means - without specific written
   11:  * permission from Freescale Semiconductor.
   12:  *
   13:  \***********************************************************************************************/
   14:  
   15:  #include "IIC_Interface.h"
   16:  #include "IIC.h"
   17:  #include "IoConfig.h"
   18:  #include "IrqControlLib.h"
   19:  #include "TS_Interface.h"
   20:  #include "FunctionLib.h"
   21:  #include "PublicConst.h"
   22:  #include "MApp_init.h"
   23:  #include "MMA9553.h"
   24:  
   25:  
   26:  /***********************************************************************************************\
   27:  *
   28:  \***********************************************************************************************/
   29:  static tmrTimerID_t mMMA9553TimerID = gTmrInvalidTimerID_c;
   30:  
   31:  extern uint8_t MMA9553_start_flag;
   32:  
   33:  
   34:  
   35:  // *********************************************************
   36:  //  void MMA9553_SetCallBack(void (*pfCallBack)(void))
   37:  // *********************************************************
   38:  void MMA9553_SetCallBack(void (*pfCallBack)(void)) {
   39:  	
   40:  	pfMMA9553CallBack = pfCallBack;
  0000 9efe05   [5]             LDHX  5,SP
  0003 960001   [5]             STHX  pfMMA9553CallBack:1
  0006 95       [2]             TSX   
  0007 e603     [3]             LDA   3,X
  0009 c70000   [4]             STA   pfMMA9553CallBack
   41:  	  	  
   42:  }
  000c 8d       [7]             RTC   
   43:  
   44:  // ================================================
   45:  // void MMA9553_Init(void)
   46:  // ================================================
   47:  void MMA9553_Init(void){
   48:    uint8_t err_cntr;
   49:  	
   50:    MMA9553_SetCallBack(MMA9553_CallBack);  
  0000 450000   [3]             LDHX  @MMA9553_CallBack
  0003 89       [2]             PSHX  
  0004 8b       [2]             PSHH  
  0005 a600     [2]             LDA   @MMA9553_CallBack:PAGE
  0007 87       [2]             PSHA  
  0008 ac000000 [8]             CALL  MMA9553_SetCallBack
  000c a703     [2]             AIS   #3
   51:    err_cntr = 0;
  000e 4f       [1]             CLRA  
   52:    
   53:    while( 0x00 != MMA9553_int() ){
  000f 21       [3]             SKIP1 L11 ;abs = 0011
  0010          L10:    
   54:  	   err_cntr++;
  0010 4c       [1]             INCA  
  0011          L11:    
  0011 87       [2]             PSHA  
  0012 ac000000 [8]             CALL  MMA9553_int
  0016 4d       [1]             TSTA  
  0017 cd0000   [6]             JSR   _PUSH_CC
  001a 95       [2]             TSX   
  001b e604     [3]             LDA   4,X
  001d cd0000   [6]             JSR   _POP_CC
  0020 8a       [3]             PULH  
  0021 26ed     [3]             BNE   L10 ;abs = 0010
   55:    }
   56:    
   57:    MMA9553_start_flag = 1;	
  0023 a601     [2]             LDA   #1
  0025 c70000   [4]             STA   MMA9553_start_flag
   58:    mMMA9553TimerID = TMR_AllocateTimer();
  0028 ac000000 [8]             CALL  TMR_AllocateTimer
  002c c70000   [4]             STA   mMMA9553TimerID
   59:  }
  002f 8d       [7]             RTC   
   60:  
   61:  
   62:  // ==================================
   63:  // MMA9553_int
   64:  // ==================================
   65:  static dataFrom_MMA9553_t dataFrom_MMA9553 = {                                                                
   66:    0x00, 
   67:    0x00, 
   68:    0x00,
   69:    0x00,
   70:    0x00,
   71:    0x00
   72:  };
   73:  
   74:  /*********************************************************\
   75:  * uint8_t MMA9553_int(void)
   76:  \*********************************************************/
   77:  uint8_t MMA9553_int(void){  
   78:    uint8_t error = 0;
   79:    
   80:    MMA9553_WakeUp();       // Wake up from Deep Sleep
  0000 ac000000 [8]             CALL  MMA9553_WakeUp
   81:    MMA9553_Disable();      // Disable the Pedometer application
  0004 ac000000 [8]             CALL  MMA9553_Disable
   82:    error = MMA9553_Run();
  0008 ac000000 [8]             CALL  MMA9553_Run
   83:     
   84:    if(error==0){
  000c 4d       [1]             TSTA  
  000d 2606     [3]             BNE   L15 ;abs = 0015
   85:      MMA9553_Enable();     // Enable the Pedometer application
  000f 87       [2]             PSHA  
  0010 ac000000 [8]             CALL  MMA9553_Enable
  0014 86       [3]             PULA  
  0015          L15:    
   86:    }
   87:    
   88:    return error;
   89:  }
  0015 8d       [7]             RTC   
   90:  
   91:  // ================================================
   92:  // uint8_t MMA9553_Run(void)
   93:  // ================================================
   94:  uint8_t MMA9553_Run(void){
  0000 a7fe     [2]             AIS   #-2
   95:  	
   96:    uint8_t error=1;
   97:    uint8_t i;
   98:    
   99:    for( i=0; i<20; i++ ){
  0002 95       [2]             TSX   
  0003 6f01     [5]             CLR   1,X
  0005 2003     [3]             BRA   LA ;abs = 000a
  0007          L7:     
  100:      if(error > 0){
  0007 7d       [3]             TST   ,X
  0008 2708     [3]             BEQ   L12 ;abs = 0012
  000a          LA:     
  101:        error = MMA9553_SetConfig();
  000a ac000000 [8]             CALL  MMA9553_SetConfig
  000e 95       [2]             TSX   
  000f f7       [2]             STA   ,X
  102:      }//if(res==1)
  0010 2003     [3]             BRA   L15 ;abs = 0015
  0012          L12:    
  103:      else{
  104:        error = 0;
  0012 7f       [4]             CLR   ,X
  105:        break;        // config done.
  0013 2008     [3]             BRA   L1D ;abs = 001d
  0015          L15:    
  0015 6c01     [5]             INC   1,X
  0017 e601     [3]             LDA   1,X
  0019 a114     [2]             CMP   #20
  001b 25ea     [3]             BCS   L7 ;abs = 0007
  001d          L1D:    
  106:      }
  107:    }
  108:    return error;       // 0=good
  001d f6       [3]             LDA   ,X
  109:  }
  001e a702     [2]             AIS   #2
  0020 8d       [7]             RTC   
  110:  
  111:  // ================================================
  112:  // void MMA9553_CallBack(void) 
  113:  // ================================================
  114:  void MMA9553_CallBack(void){	
  115:  	TS_SendEvent(gAppTaskID_c, gAppEvt_FromMMA9553_c);	
  0000 c60000   [4]             LDA   gAppTaskID_c
  0003 451000   [3]             LDHX  #4096
  0006 ac000000 [8]             CALL  TS_SendEvent
  116:  }
  000a 8d       [7]             RTC   
  117:  
  118:  
  119:  // ================================================
  120:  // void MMA9553_Start_Periodical_data(void)
  121:  // ================================================
  122:  void MMA9553_Start_Periodical_data(void) {
  123:  	TMR_StartIntervalTimer( mMMA9553TimerID, mMMA9553Interval_c,MMA9553_Periodical_data );
  0000 c60000   [4]             LDA   mMMA9553TimerID
  0003 87       [2]             PSHA  
  0004 4503e8   [3]             LDHX  #1000
  0007 89       [2]             PSHX  
  0008 8b       [2]             PSHH  
  0009 4f       [1]             CLRA  
  000a 87       [2]             PSHA  
  000b 87       [2]             PSHA  
  000c 450000   [3]             LDHX  @MMA9553_Periodical_data
  000f 89       [2]             PSHX  
  0010 8b       [2]             PSHH  
  0011 a600     [2]             LDA   @MMA9553_Periodical_data:PAGE
  0013 87       [2]             PSHA  
  0014 ac000000 [8]             CALL  TMR_StartIntervalTimer
  0018 a708     [2]             AIS   #8
  124:  }
  001a 8d       [7]             RTC   
  125:  
  126:  // ================================================
  127:  // int16_t MMA9553_CatchSensorData(uint8_t number)
  128:  // ================================================
  129:  int16_t MMA9553_CatchSensorData(uint8_t number){
  0000 a7fe     [2]             AIS   #-2
  130:  	
  131:  	volatile int16_t catch_data;
  132:  	  	  
  133:  	switch(number){
  0002 a106     [2]             CMP   #6
  0004 2234     [3]             BHI   L3A ;abs = 003a
  0006 410112   [4]             CBEQA #1,L1B ;abs = 001b
  0009 410214   [4]             CBEQA #2,L20 ;abs = 0020
  000c 410316   [4]             CBEQA #3,L25 ;abs = 0025
  000f 410418   [4]             CBEQA #4,L2A ;abs = 002a
  0012 41051a   [4]             CBEQA #5,L2F ;abs = 002f
  0015 a106     [2]             CMP   #6
  0017 2621     [3]             BNE   L3A ;abs = 003a
  0019 2019     [3]             BRA   L34 ;abs = 0034
  001b          L1B:    
  134:  		case 1:
  135:  			catch_data = dataFrom_MMA9553.Act_data;
  001b 320000   [5]             LDHX  dataFrom_MMA9553
  136:  		break;
  001e 2017     [3]             BRA   L37 ;abs = 0037
  0020          L20:    
  137:  		case 2:
  138:  			catch_data = dataFrom_MMA9553.Step_data;
  0020 320002   [5]             LDHX  dataFrom_MMA9553:2
  139:  		break;
  0023 2012     [3]             BRA   L37 ;abs = 0037
  0025          L25:    
  140:  		case 3:
  141:  			catch_data = dataFrom_MMA9553.Dist_data;
  0025 320004   [5]             LDHX  dataFrom_MMA9553:4
  142:  		break;
  0028 200d     [3]             BRA   L37 ;abs = 0037
  002a          L2A:    
  143:  		case 4:
  144:  			catch_data = dataFrom_MMA9553.Speed_data;
  002a 320006   [5]             LDHX  dataFrom_MMA9553:6
  145:  		break;
  002d 2008     [3]             BRA   L37 ;abs = 0037
  002f          L2F:    
  146:  		case 5:
  147:  			catch_data = dataFrom_MMA9553.Cal_data;
  002f 320008   [5]             LDHX  dataFrom_MMA9553:8
  148:  		break;
  0032 2003     [3]             BRA   L37 ;abs = 0037
  0034          L34:    
  149:  		case 6:
  150:  			catch_data = dataFrom_MMA9553.Sleep_cnt_data;
  0034 32000a   [5]             LDHX  dataFrom_MMA9553:10
  0037          L37:    
  0037 9eff01   [5]             STHX  1,SP
  003a          L3A:    
  151:  		break;
  152:  		default :
  153:  		break;
  154:  	}
  155:  	
  156:      return catch_data;
  003a 9efe01   [5]             LDHX  1,SP
  157:      
  158:  }
  003d a702     [2]             AIS   #2
  003f 8d       [7]             RTC   
  159:  
  160:  // ================================================
  161:  // void MMA9553_Periodical_data(uint8_t timerId)
  162:  // ================================================
  163:  void MMA9553_Periodical_data(uint8_t timerId)
  164:  {
  0000 a7e4     [2]             AIS   #-28
  165:  
  166:  	volatile int16_t Read_data_16bit = 0;
  0002 95       [2]             TSX   
  0003 6f01     [5]             CLR   1,X
  0005 6f02     [5]             CLR   2,X
  167:  	volatile uint8_t dumpstatus_data[4]={0x15, 0x30, 0x00, 0x0C};
  0007 a615     [2]             LDA   #21
  0009 e704     [3]             STA   4,X
  000b a630     [2]             LDA   #48
  000d e705     [3]             STA   5,X
  000f 6f06     [5]             CLR   6,X
  0011 a60c     [2]             LDA   #12
  0013 e707     [3]             STA   7,X
  168:  	volatile uint8_t rxData[20];
  169:  	volatile uint8_t check_status = 0;
  0015 6f03     [5]             CLR   3,X
  170:  	uint8_t  i;
  171:  	
  172:  	(void) timerId; /* prevent compiler warning */
  173:  	
  174:  
  175:  	for(i=0; i<20; i++){  // retry
  0017 4f       [1]             CLRA  
  0018 f7       [2]             STA   ,X
  0019          L19:    
  176:  		IIC_RegWriteN(MMA9553_IIC_ADDRESS,MMA9553_Mailbox,4,(uint8_t *)&dumpstatus_data);
  0019 a698     [2]             LDA   #-104
  001b 87       [2]             PSHA  
  001c 4f       [1]             CLRA  
  001d 87       [2]             PSHA  
  001e a604     [2]             LDA   #4
  0020 95       [2]             TSX   
  0021 af06     [2]             AIX   #6
  0023 ac000000 [8]             CALL  IIC_RegWriteN
  0027 a702     [2]             AIS   #2
  177:  		IIC_RegReadN(MMA9553_IIC_ADDRESS,0x00,16,(uint8_t *)&rxData); // Read data 
  0029 a698     [2]             LDA   #-104
  002b 87       [2]             PSHA  
  002c 4f       [1]             CLRA  
  002d 87       [2]             PSHA  
  002e a610     [2]             LDA   #16
  0030 95       [2]             TSX   
  0031 af0a     [2]             AIX   #10
  0033 ac000000 [8]             CALL  IIC_RegReadN
  0037 a702     [2]             AIS   #2
  178:  	    check_status =((rxData[1]&0x80)==0x80) & (rxData[2]==0x0C);   // check COCO and num of read bytes 		 
  0039 95       [2]             TSX   
  003a e609     [3]             LDA   9,X
  003c a480     [2]             AND   #-128
  003e 418002   [4]             CBEQA #-128,L43 ;abs = 0043
  0041 5f       [1]             CLRX  
  0042 65       [3]             SKIP2 L45 ;abs = 0045
  0043          L43:    
  0043 ae01     [2]             LDX   #1
  0045          L45:    
  0045 9ee60b   [4]             LDA   11,SP
  0048 410c02   [4]             CBEQA #12,L4D ;abs = 004d
  004b 4f       [1]             CLRA  
  004c 65       [3]             SKIP2 L4F ;abs = 004f
  004d          L4D:    
  004d a601     [2]             LDA   #1
  004f          L4F:    
  004f 89       [2]             PSHX  
  0050 95       [2]             TSX   
  0051 f4       [3]             AND   ,X
  0052 e704     [3]             STA   4,X
  179:  	    if(check_status){
  0054 6d04     [4]             TST   4,X
  0056 86       [3]             PULA  
  0057 2609     [3]             BNE   L62 ;abs = 0062
  0059 e601     [3]             LDA   1,X
  005b 4c       [1]             INCA  
  005c a114     [2]             CMP   #20
  005e e701     [3]             STA   1,X
  0060 25b7     [3]             BCS   L19 ;abs = 0019
  0062          L62:    
  180:  	      break;          // if no-error 
  181:  	    }	    	
  182:  	}
  183:  	
  184:  	while(check_status == 0x00){
  0062 95       [2]             TSX   
  0063 6d03     [4]             TST   3,X
  0065 27fb     [3]             BEQ   L62 ;abs = 0062
  185:  		// if it stays, error occurred....
  186:  	}
  187:  	
  188:  
  189:  	pfMMA9553CallBack();  // Set event in order to notify application in callback function.
  0067 320001   [5]             LDHX  pfMMA9553CallBack:1
  006a c60000   [4]             LDA   pfMMA9553CallBack
  006d 8b       [2]             PSHH  
  006e 8b       [2]             PSHH  
  006f 8b       [2]             PSHH  
  0070 ac000000 [8]             CALL  _CALL_STAR08_FAR
  190:  
  191:  	Read_data_16bit =  (int16_t)( rxData[4] & 0x07 );
  0074 95       [2]             TSX   
  0075 e60c     [3]             LDA   12,X
  0077 a407     [2]             AND   #7
  0079 8c       [1]             CLRH  
  007a 97       [1]             TAX   
  007b 9eff02   [5]             STHX  2,SP
  192:  	dataFrom_MMA9553.Act_data=  Read_data_16bit;
  007e 9efe02   [5]             LDHX  2,SP
  0081 960000   [5]             STHX  dataFrom_MMA9553
  193:  	
  194:  	Read_data_16bit = (int16_t)(rxData[6]<<8);
  0084 95       [2]             TSX   
  0085 e60e     [3]             LDA   14,X
  0087 ac0000ee [8]             CALL  MMA9553_Periodical_data:238
  195:  	dataFrom_MMA9553.Step_data = ( Read_data_16bit + (int16_t)rxData[7] );	
  008b 95       [2]             TSX   
  008c e60f     [3]             LDA   15,X
  008e ac0000dc [8]             CALL  MMA9553_Periodical_data:220
  0092 960002   [5]             STHX  dataFrom_MMA9553:2
  196:  
  197:  	Read_data_16bit = (int16_t)(rxData[8]<<8);
  0095 95       [2]             TSX   
  0096 e610     [3]             LDA   16,X
  0098 ac0000ee [8]             CALL  MMA9553_Periodical_data:238
  198:  	dataFrom_MMA9553.Dist_data = ( Read_data_16bit + (int16_t)rxData[9] );	
  009c 95       [2]             TSX   
  009d e611     [3]             LDA   17,X
  009f ac0000dc [8]             CALL  MMA9553_Periodical_data:220
  00a3 960004   [5]             STHX  dataFrom_MMA9553:4
  199:  	
  200:  	Read_data_16bit = (int16_t)(rxData[10]<<8);
  00a6 95       [2]             TSX   
  00a7 e612     [3]             LDA   18,X
  00a9 ac0000ee [8]             CALL  MMA9553_Periodical_data:238
  201:  	dataFrom_MMA9553.Speed_data = ( Read_data_16bit + (int16_t)rxData[11] );	
  00ad 95       [2]             TSX   
  00ae e613     [3]             LDA   19,X
  00b0 ac0000dc [8]             CALL  MMA9553_Periodical_data:220
  00b4 960006   [5]             STHX  dataFrom_MMA9553:6
  202:  
  203:  	Read_data_16bit = (int16_t)(rxData[12]<<8);
  00b7 95       [2]             TSX   
  00b8 e614     [3]             LDA   20,X
  00ba ac0000ee [8]             CALL  MMA9553_Periodical_data:238
  204:  	dataFrom_MMA9553.Cal_data = ( Read_data_16bit + (int16_t)rxData[13] );	
  00be 95       [2]             TSX   
  00bf e615     [3]             LDA   21,X
  00c1 ac0000dc [8]             CALL  MMA9553_Periodical_data:220
  00c5 960008   [5]             STHX  dataFrom_MMA9553:8
  205:  
  206:  	Read_data_16bit = (int16_t)(rxData[14]<<8);
  00c8 95       [2]             TSX   
  00c9 e616     [3]             LDA   22,X
  00cb ac0000ee [8]             CALL  MMA9553_Periodical_data:238
  207:  	dataFrom_MMA9553.Sleep_cnt_data = ( Read_data_16bit + (int16_t)rxData[15] );	
  00cf 95       [2]             TSX   
  00d0 e617     [3]             LDA   23,X
  00d2 ac0000dc [8]             CALL  MMA9553_Periodical_data:220
  00d6 96000a   [5]             STHX  dataFrom_MMA9553:10
  208:  	
  209:  }
  00d9 a71c     [2]             AIS   #28
  00db 8d       [7]             RTC   
  00dc          LDC:    
  00dc 9efe05   [5]             LDHX  5,SP
  00df 87       [2]             PSHA  
  00e0 9f       [1]             TXA   
  00e1 8b       [2]             PSHH  
  00e2 95       [2]             TSX   
  00e3 eb01     [3]             ADD   1,X
  00e5 e701     [3]             STA   1,X
  00e7 86       [3]             PULA  
  00e8 a900     [2]             ADC   #0
  00ea 87       [2]             PSHA  
  00eb 8a       [3]             PULH  
  00ec 88       [3]             PULX  
  00ed 8d       [7]             RTC   
  00ee          LEE:    
  00ee 87       [2]             PSHA  
  00ef 4f       [1]             CLRA  
  00f0 8a       [3]             PULH  
  00f1 97       [1]             TAX   
  00f2 9eff05   [5]             STHX  5,SP
  00f5 8d       [7]             RTC   
  210:  
  211:  // ==================================
  212:  // MMA9553_WakeUp
  213:  // ==================================
  214:  void MMA9553_WakeUp(void){
  0000 a7fb     [2]             AIS   #-5
  215:    const uint8_t wakeup_data[5]={0x12,0x20,0x06,0x01,0x00};
  0002 a612     [2]             LDA   #18
  0004 95       [2]             TSX   
  0005 f7       [2]             STA   ,X
  0006 a620     [2]             LDA   #32
  0008 e701     [3]             STA   1,X
  000a a606     [2]             LDA   #6
  000c e702     [3]             STA   2,X
  000e a601     [2]             LDA   #1
  0010 e703     [3]             STA   3,X
  0012 6f04     [5]             CLR   4,X
  216:    IIC_RegWriteN(MMA9553_IIC_ADDRESS,MMA9553_Mailbox,5,(uint8_t *)&wakeup_data);
  0014 a698     [2]             LDA   #-104
  0016 87       [2]             PSHA  
  0017 4f       [1]             CLRA  
  0018 87       [2]             PSHA  
  0019 a605     [2]             LDA   #5
  001b ac000000 [8]             CALL  IIC_RegWriteN
  217:  }
  001f a707     [2]             AIS   #7
  0021 8d       [7]             RTC   
  218:  
  219:  
  220:  // ==================================
  221:  // MMA9553_Disable
  222:  // ==================================
  223:  void MMA9553_Disable(void){
  0000 a7fb     [2]             AIS   #-5
  224:  	const uint8_t disable_data[5]={0x17,0x20,0x05,0x01,0x20};
  0002 a617     [2]             LDA   #23
  0004 95       [2]             TSX   
  0005 f7       [2]             STA   ,X
  0006 a620     [2]             LDA   #32
  0008 e701     [3]             STA   1,X
  000a ae05     [2]             LDX   #5
  000c 9eef03   [4]             STX   3,SP
  000f ae01     [2]             LDX   #1
  0011 9eef04   [4]             STX   4,SP
  0014 95       [2]             TSX   
  0015 e704     [3]             STA   4,X
  225:  	IIC_RegWriteN(MMA9553_IIC_ADDRESS,MMA9553_Mailbox,5,(uint8_t *)&disable_data);
  0017 a698     [2]             LDA   #-104
  0019 87       [2]             PSHA  
  001a 4f       [1]             CLRA  
  001b 87       [2]             PSHA  
  001c a605     [2]             LDA   #5
  001e ac000000 [8]             CALL  IIC_RegWriteN
  226:  }
  0022 a707     [2]             AIS   #7
  0024 8d       [7]             RTC   
  227:  
  228:  
  229:  // ==================================
  230:  // MMA9553_SetConfig
  231:  // ==================================
  232:  uint8_t MMA9553_SetConfig(void){
  0000 a7d6     [2]             AIS   #-42
  233:  	
  234:    volatile uint8_t i;
  235:    volatile uint8_t error;
  236:  	
  237:    const uint8_t config2_data[20]={
  238:  					0x15, 0x20, 0x00, 0x10,
  0002 a615     [2]             LDA   #21
  0004 95       [2]             TSX   
  0005 e716     [3]             STA   22,X
  0007 a620     [2]             LDA   #32
  0009 e717     [3]             STA   23,X
  000b 6f18     [5]             CLR   24,X
  000d a610     [2]             LDA   #16
  000f e719     [3]             STA   25,X
  239:  					MMA9553_MB4 , MMA9553_MB5 , MMA9553_MB6 , MMA9553_MB7 , 
  0011 ae0e     [2]             LDX   #14
  0013 9eef1b   [4]             STX   27,SP
  0016 ae74     [2]             LDX   #116
  0018 9eef1c   [4]             STX   28,SP
  001b ae11     [2]             LDX   #17
  001d 9eef1d   [4]             STX   29,SP
  0020 ae94     [2]             LDX   #-108
  0022 9eef1e   [4]             STX   30,SP
  240:  					MMA9553_MB8 , MMA9553_MB9 , MMA9553_MB10, MMA9553_MB11,
  0025 95       [2]             TSX   
  0026 6f1e     [5]             CLR   30,X
  0028 ae7f     [2]             LDX   #127
  002a 9eef20   [4]             STX   32,SP
  002d aea0     [2]             LDX   #-96
  002f 9eef21   [4]             STX   33,SP
  0032 95       [2]             TSX   
  0033 6f21     [5]             CLR   33,X
  241:  					MMA9553_MB12, MMA9553_MB13, MMA9553_MB14, MMA9553_MB15, 
  0035 aeaf     [2]             LDX   #-81
  0037 9eef23   [4]             STX   35,SP
  003a 53       [1]             COMX  
  003b 9eef24   [4]             STX   36,SP
  003e ae04     [2]             LDX   #4
  0040 9eef25   [4]             STX   37,SP
  0043 5a       [1]             DECX  
  0044 9eef26   [4]             STX   38,SP
  242:  					MMA9553_MB16, MMA9553_MB17, MMA9553_MB18, MMA9553_MB19
  0047 ae05     [2]             LDX   #5
  0049 9eef27   [4]             STX   39,SP
  004c 95       [2]             TSX   
  004d e727     [3]             STA   39,X
  004f 6f28     [5]             CLR   40,X
  0051 a60a     [2]             LDA   #10
  0053 e729     [3]             STA   41,X
  243:    	  	  	  	};  // config write data
  244:  	
  245:    volatile uint8_t rxData[20]={ 0x15, 0x10, 0x00, 0x10 }; // config read data
  0055 a615     [2]             LDA   #21
  0057 e702     [3]             STA   2,X
  0059 a610     [2]             LDA   #16
  005b e703     [3]             STA   3,X
  005d 6f04     [5]             CLR   4,X
  005f a610     [2]             LDA   #16
  0061 e705     [3]             STA   5,X
  0063 6f06     [5]             CLR   6,X
  0065 6f07     [5]             CLR   7,X
  0067 6f08     [5]             CLR   8,X
  0069 6f09     [5]             CLR   9,X
  006b 6f0a     [5]             CLR   10,X
  006d 6f0b     [5]             CLR   11,X
  006f 6f0c     [5]             CLR   12,X
  0071 6f0d     [5]             CLR   13,X
  0073 6f0e     [5]             CLR   14,X
  0075 6f0f     [5]             CLR   15,X
  0077 6f10     [5]             CLR   16,X
  0079 6f11     [5]             CLR   17,X
  007b 6f12     [5]             CLR   18,X
  007d 6f13     [5]             CLR   19,X
  007f 6f14     [5]             CLR   20,X
  0081 6f15     [5]             CLR   21,X
  246:   
  247:    IIC_RegWriteN(MMA9553_IIC_ADDRESS,MMA9553_Mailbox,20,(uint8_t *)&config2_data);// config write
  0083 a698     [2]             LDA   #-104
  0085 87       [2]             PSHA  
  0086 4f       [1]             CLRA  
  0087 87       [2]             PSHA  
  0088 a614     [2]             LDA   #20
  008a af16     [2]             AIX   #22
  008c ac000000 [8]             CALL  IIC_RegWriteN
  0090 a702     [2]             AIS   #2
  248:    IIC_RegWriteN(MMA9553_IIC_ADDRESS,MMA9553_Mailbox,4,(uint8_t *)&rxData); // config read,command
  0092 a698     [2]             LDA   #-104
  0094 87       [2]             PSHA  
  0095 4f       [1]             CLRA  
  0096 87       [2]             PSHA  
  0097 a604     [2]             LDA   #4
  0099 95       [2]             TSX   
  009a af04     [2]             AIX   #4
  009c ac000000 [8]             CALL  IIC_RegWriteN
  00a0 a702     [2]             AIS   #2
  249:    IIC_RegReadN(MMA9553_IIC_ADDRESS,0x00,20,(uint8_t *)&rxData);            // config read,data 
  00a2 a698     [2]             LDA   #-104
  00a4 87       [2]             PSHA  
  00a5 4f       [1]             CLRA  
  00a6 87       [2]             PSHA  
  00a7 a614     [2]             LDA   #20
  00a9 95       [2]             TSX   
  00aa af04     [2]             AIX   #4
  00ac ac000000 [8]             CALL  IIC_RegReadN
  00b0 a702     [2]             AIS   #2
  250:    
  251:    error = 0;
  00b2 95       [2]             TSX   
  00b3 6f01     [5]             CLR   1,X
  252:    
  253:    for(i=4; i<19; i++){
  00b5 a604     [2]             LDA   #4
  00b7 f7       [2]             STA   ,X
  00b8          LB8:    
  254:      if(config2_data[i]!=rxData[i]){
  00b8 f6       [3]             LDA   ,X
  00b9 af16     [2]             AIX   #22
  00bb 87       [2]             PSHA  
  00bc 9f       [1]             TXA   
  00bd 8b       [2]             PSHH  
  00be 95       [2]             TSX   
  00bf eb01     [3]             ADD   1,X
  00c1 e701     [3]             STA   1,X
  00c3 86       [3]             PULA  
  00c4 a900     [2]             ADC   #0
  00c6 ee02     [3]             LDX   2,X
  00c8 89       [2]             PSHX  
  00c9 95       [2]             TSX   
  00ca af04     [2]             AIX   #4
  00cc 87       [2]             PSHA  
  00cd 9ee602   [4]             LDA   2,SP
  00d0 9ee702   [4]             STA   2,SP
  00d3 9f       [1]             TXA   
  00d4 8b       [2]             PSHH  
  00d5 95       [2]             TSX   
  00d6 eb02     [3]             ADD   2,X
  00d8 e702     [3]             STA   2,X
  00da 86       [3]             PULA  
  00db a900     [2]             ADC   #0
  00dd 87       [2]             PSHA  
  00de ee02     [3]             LDX   2,X
  00e0 8a       [3]             PULH  
  00e1 fe       [3]             LDX   ,X
  00e2 8a       [3]             PULH  
  00e3 9f       [1]             TXA   
  00e4 9eee02   [4]             LDX   2,SP
  00e7 f1       [3]             CMP   ,X
  00e8 a702     [2]             AIS   #2
  00ea 2703     [3]             BEQ   LEF ;abs = 00ef
  255:          error++;	
  00ec 95       [2]             TSX   
  00ed 6c01     [5]             INC   1,X
  00ef          LEF:    
  00ef 95       [2]             TSX   
  00f0 7c       [4]             INC   ,X
  00f1 f6       [3]             LDA   ,X
  00f2 a113     [2]             CMP   #19
  00f4 25c2     [3]             BCS   LB8 ;abs = 00b8
  256:      } // if(config2_data[i]!=rxData[i]){  
  257:    } //for(i=4; i<19; i++){
  258:    
  259:    return error;  // 0=Good
  00f6 e601     [3]             LDA   1,X
  260:    
  261:    
  262:  }
  00f8 a72a     [2]             AIS   #42
  00fa 8d       [7]             RTC   
  263:  
  264:  
  265:  // ==================================
  266:  // void MMA9553_Enable(void)
  267:  // ==================================
  268:  void MMA9553_Enable(void){
  0000 a7fb     [2]             AIS   #-5
  269:  	 const uint8_t enable_data[5]={0x17,0x20,0x05,0x01,0x00};
  0002 a617     [2]             LDA   #23
  0004 95       [2]             TSX   
  0005 f7       [2]             STA   ,X
  0006 a620     [2]             LDA   #32
  0008 e701     [3]             STA   1,X
  000a a605     [2]             LDA   #5
  000c e702     [3]             STA   2,X
  000e ae01     [2]             LDX   #1
  0010 9eef04   [4]             STX   4,SP
  0013 95       [2]             TSX   
  0014 6f04     [5]             CLR   4,X
  270:  	 IIC_RegWriteN(MMA9553_IIC_ADDRESS,MMA9553_Mailbox,5,(uint8_t *)&enable_data);
  0016 ae98     [2]             LDX   #-104
  0018 89       [2]             PSHX  
  0019 5f       [1]             CLRX  
  001a 89       [2]             PSHX  
  001b 95       [2]             TSX   
  001c af02     [2]             AIX   #2
  001e ac000000 [8]             CALL  IIC_RegWriteN
  271:  }
  0022 a707     [2]             AIS   #7
  0024 8d       [7]             RTC   
  272:  
  273:  
  274:  // ==================================
  275:  // void MMA9553_dump(event_t events)
  276:  // ==================================
  277:  void MMA9553_dump(event_t events){
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fd     [2]             AIS   #-3
  278:  	
  279:  	volatile int16_t tmp;
  280:  	uint8_t i;
  281:  	
  282:  	// Start to receive periodical data 
  283:  	if(MMA9553_start_flag){
  0004 c60000   [4]             LDA   MMA9553_start_flag
  0007 2708     [3]             BEQ   L11 ;abs = 0011
  284:  		MMA9553_start_flag = 0;
  0009 4f       [1]             CLRA  
  000a c70000   [4]             STA   MMA9553_start_flag
  285:  		MMA9553_Start_Periodical_data();
  000d ac000000 [8]             CALL  MMA9553_Start_Periodical_data
  0011          L11:    
  286:  	}
  287:  	
  288:  	if (events & gAppEvt_FromMMA9553_c)
  0011 95       [2]             TSX   
  0012 e603     [3]             LDA   3,X
  0014 a510     [2]             BIT   #16
  0016 2771     [3]             BEQ   L89 ;abs = 0089
  289:  	{          	
  290:  
  291:  
  292:  		UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 
  0018 450000   [3]             LDHX  @"\012\015-----------------------------------------------\012\015"
  001b a601     [2]             LDA   #1
  001d ac000000 [8]             CALL  UartUtil_Print
  293:  		
  294:  		for(i=1; i<7; i++){
  0021 a601     [2]             LDA   #1
  0023 95       [2]             TSX   
  0024 f7       [2]             STA   ,X
  0025          L25:    
  295:  			switch(i){			
  0025 f6       [3]             LDA   ,X
  0026 a106     [2]             CMP   #6
  0028 2237     [3]             BHI   L61 ;abs = 0061
  002a 410112   [4]             CBEQA #1,L3F ;abs = 003f
  002d 410214   [4]             CBEQA #2,L44 ;abs = 0044
  0030 410316   [4]             CBEQA #3,L49 ;abs = 0049
  0033 410418   [4]             CBEQA #4,L4E ;abs = 004e
  0036 41051a   [4]             CBEQA #5,L53 ;abs = 0053
  0039 a106     [2]             CMP   #6
  003b 2624     [3]             BNE   L61 ;abs = 0061
  003d 2019     [3]             BRA   L58 ;abs = 0058
  003f          L3F:    
  296:  				case 1:
  297:  					UartUtil_Print("MMA9553 \n\rX Act_data : 0x", gAllowToBlock_d); 
  003f 450000   [3]             LDHX  @"MMA9553 \012\015X Act_data : 0x"
  298:  				break;
  0042 2017     [3]             BRA   L5B ;abs = 005b
  0044          L44:    
  299:  				case 2:
  300:  					UartUtil_Print("\n\rX Step_data : 0x", gAllowToBlock_d); 
  0044 450000   [3]             LDHX  @"\012\015X Step_data : 0x"
  301:  				break;	
  0047 2012     [3]             BRA   L5B ;abs = 005b
  0049          L49:    
  302:  				case 3:
  303:  					UartUtil_Print("\n\rX Dist_data : 0x", gAllowToBlock_d); 
  0049 450000   [3]             LDHX  @"\012\015X Dist_data : 0x"
  304:  				break;	
  004c 200d     [3]             BRA   L5B ;abs = 005b
  004e          L4E:    
  305:  				case 4:
  306:  					UartUtil_Print("\n\rX Speed_data : 0x", gAllowToBlock_d); 
  004e 450000   [3]             LDHX  @"\012\015X Speed_data : 0x"
  307:  				break;	
  0051 2008     [3]             BRA   L5B ;abs = 005b
  0053          L53:    
  308:  				case 5:
  309:  					UartUtil_Print("\n\rX Cal_data : 0x", gAllowToBlock_d); 
  0053 450000   [3]             LDHX  @"\012\015X Cal_data : 0x"
  310:  				break;	
  0056 2003     [3]             BRA   L5B ;abs = 005b
  0058          L58:    
  311:  				case 6:
  312:  					UartUtil_Print("\n\rX Sleep_cnt_data : 0x", gAllowToBlock_d); 
  0058 450000   [3]             LDHX  @"\012\015X Sleep_cnt_data : 0x"
  005b          L5B:    
  005b a601     [2]             LDA   #1
  005d ac000000 [8]             CALL  UartUtil_Print
  0061          L61:    
  313:  				break;	
  314:  				default:
  315:  				break;						
  316:  			} // switch(i){	
  317:  			    tmp = (uint16_t)MMA9553_CatchSensorData(i);
  0061 95       [2]             TSX   
  0062 f6       [3]             LDA   ,X
  0063 ac000000 [8]             CALL  MMA9553_CatchSensorData
  0067 9eff02   [5]             STHX  2,SP
  318:  				UartUtil_PrintHex((uint8_t *)&tmp, 2, 1); 				
  006a 95       [2]             TSX   
  006b af01     [2]             AIX   #1
  006d 89       [2]             PSHX  
  006e 8b       [2]             PSHH  
  006f ae02     [2]             LDX   #2
  0071 a601     [2]             LDA   #1
  0073 ac000000 [8]             CALL  UartUtil_PrintHex
  0077 a702     [2]             AIS   #2
  0079 95       [2]             TSX   
  007a 7c       [4]             INC   ,X
  007b f6       [3]             LDA   ,X
  007c a107     [2]             CMP   #7
  007e 25a5     [3]             BCS   L25 ;abs = 0025
  319:  			
  320:  		} // for(i=1; i<7; i++){
  321:  		
  322:  		UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 
  0080 450000   [3]             LDHX  @"\012\015-----------------------------------------------\012\015"
  0083 a601     [2]             LDA   #1
  0085 ac000000 [8]             CALL  UartUtil_Print
  0089          L89:    
  323:  				
  324:  		
  325:  	} // if (events & gAppEvt_FromMMA9553_c)
  326:  }
  0089 a705     [2]             AIS   #5
  008b 8d       [7]             RTC   
  327:  
  328:  
  329:  /***********************************************************************************************\
  330:  * Private functions
  331:  \***********************************************************************************************/
  332:  
  333:  
