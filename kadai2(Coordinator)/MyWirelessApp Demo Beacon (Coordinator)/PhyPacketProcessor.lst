*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /************************************************************************************
    2:  * MC1323X: Implements Packet Processor hardware access functionalities
    3:  * Handle initializations
    4:  *
    5:  * (c) Copyright 2009, Freescale, Inc.  All rights reserved.
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor.
   10:  *
   11:  ************************************************************************************/
   12:  
   13:  
   14:  /************************************************************************************
   15:  *************************************************************************************
   16:  * Includes
   17:  *************************************************************************************
   18:  ************************************************************************************/
   19:  #include "EmbeddedTypes.h"
   20:  #include "IoConfig.h"
   21:  #include "IrqControlLib.h"
   22:  #include "Phy.h"
   23:  #include "PhyDebugMC1323X.h"
   24:  #include "PlatformInit.h"
   25:  
   26:  
   27:  /************************************************************************************
   28:  *************************************************************************************
   29:  * Private macros
   30:  *************************************************************************************
   31:  ************************************************************************************/
   32:  
   33:  // Address mode indentifiers. Used for both network and MAC interfaces
   34:  #define gPhyAddrModeNoAddr_c        (0)
   35:  #define gPhyAddrModeInvalid_c       (1)
   36:  #define gPhyAddrMode16BitAddr_c     (2)
   37:  #define gPhyAddrMode64BitAddr_c     (3)
   38:  
   39:  // CTL2 register settings for HW CCA types
   40:  #define  PHY_PP_CCA_TYPE_LINEAR     (0<<3)
   41:  #define  PHY_PP_CCA_TYPE_CCA        (1<<3) // default HW setting
   42:  #define  PHY_PP_CCA_TYPE_ED         (2<<3)
   43:  
   44:  // PP_PHY_FRMREVTMR register settings for Event Timer prescaler
   45:  #define  PHY_PP_TMR_PRESCALER_2US   (2<<5)
   46:  #define  PHY_PP_TMR_PRESCALER_4US   (3<<5)
   47:  #define  PHY_PP_TMR_PRESCALER_8US   (4<<5)
   48:  #define  PHY_PP_TMR_PRESCALER_16US  (5<<5)
   49:  #define  PHY_PP_TMR_PRESCALER_32US  (6<<5)
   50:  #define  PHY_PP_TMR_PRESCALER_64US  (7<<5)
   51:  
   52:  #define PHY_RNG_DELAY 0x0271
   53:  /***********************************************************************************/
   54:  
   55:  #ifdef MAC_PHY_DEBUG  
   56:    #define  PP_PHY_CTL3_RX_WMRK_MSK_DEBUG   0
   57:  #else
   58:    #define  PP_PHY_CTL3_RX_WMRK_MSK_DEBUG   PP_PHY_CTL3_RX_WMRK_MSK_BIT
   59:  #endif // MAC_PHY_DEBUG
   60:  
   61:  /************************************************************************************
   62:  *************************************************************************************
   63:  * Private prototypes
   64:  *************************************************************************************
   65:  ************************************************************************************/
   66:  
   67:  #ifdef MEMORY_MODEL_BANKED
   68:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
   69:  #else
   70:  #pragma CODE_SEG DEFAULT
   71:  #endif /* MEMORY_MODEL_BANKED */
   72:  
   73:  extern void PhyPassRxParams(phyRxParams_t * pRxParams);
   74:  
   75:  /************************************************************************************
   76:  *************************************************************************************
   77:  * Private type definitions
   78:  *************************************************************************************
   79:  ************************************************************************************/
   80:  
   81:  /************************************************************************************
   82:  *************************************************************************************
   83:  * Public memory declarations
   84:  *************************************************************************************
   85:  ************************************************************************************/
   86:  
   87:  /************************************************************************************
   88:  *************************************************************************************
   89:  * Private memory declarations
   90:  *************************************************************************************
   91:  ************************************************************************************/
   92:  
   93:  /************************************************************************************
   94:  *************************************************************************************
   95:  * Public functions
   96:  *************************************************************************************
   97:  ************************************************************************************/
   98:  
   99:  volatile uint8_t i;
  100:  void PhyInit(void)
  101:  {
  102:    PHY_DEBUG_LOG(PDBG_PHY_INIT);
  103:    PhyPassRxParams(NULL);
  0000 5f       [1]             CLRX  
  0001 8c       [1]             CLRH  
  0002 cd0000   [6]             JSR   PhyPassRxParams
  104:  
  105:    // reset the TRX logic
  106:    IoIndirectWrite(PP_PHY_IAR_RESET, PP_PHY_IAR_BIT_TRCV_RST);
  0005 a624     [2]             LDA   #36
  0007 451856   [3]             LDHX  #6230
  000a e705     [3]             STA   5,X
  000c a680     [2]             LDA   #-128
  000e e706     [3]             STA   6,X
  107:  
  108:    //  PP_PHY_CTL2 unmask global TRX interrupts, enable 16 bit mode for TC2 - TC2 prime EN,
  109:    PP_PHY_CTL2 =    (PP_PHY_CTL2_TC2PRIME_EN_BIT | \
  0010 6e0945   [4]             MOV   #9,69
  110:                     (PP_PHY_CTL2_CCA_TYPE_MASK & PHY_PP_CCA_TYPE_CCA )) \
  111:                  & ~(PP_PHY_CTL2_TRCV_MSK_BIT    | \
  112:                      PP_PHY_CTL2_PANCORDNTR_BIT  | \
  113:                      PP_PHY_CTL2_TC3TMOUT_BIT    | \
  114:                      PP_PHY_CTL2_TMRLOAD_BIT     | \
  115:                      PP_PHY_CTL2_PROMISCUOUS_BIT);
  116:  
  117:    // clear all PP IRQ bits to avoid unexpected interrupts immediately after init
  118:    PP_PHY_STATUS1 =  PP_PHY_STATUS1_TMR4_IRQ | \
  0013 6e0f4d   [4]             MOV   #15,77
  119:                      PP_PHY_STATUS1_TMR3_IRQ | \
  120:                      PP_PHY_STATUS1_TMR2_IRQ | \
  121:                      PP_PHY_STATUS1_TMR1_IRQ;
  122:  
  123:    PP_PHY_STATUS2 =  PP_PHY_STATUS2_LO1UNLOCK_IRQ | \
  0016 6e7f4e   [4]             MOV   #127,78
  124:                      PP_PHY_STATUS2_FLTR_FAIL_IRQ | \
  125:                      PP_PHY_STATUS2_RX_WMRK_IRQ   | \
  126:                      PP_PHY_STATUS2_CCA_IRQ       | \
  127:                      PP_PHY_STATUS2_RX_IRQ        | \
  128:                      PP_PHY_STATUS2_TX_IRQ        | \
  129:                      PP_PHY_STATUS2_SEQ_IRQ;
  130:  
  131:  
  132:  #ifdef MAC_PHY_DEBUG  
  133:    //  for debug purposes only - log all incoming SFD's
  134:    PP_PHY_RXWTRMARK = 0;
  135:  #endif // MAC_PHY_DEBUG
  136:  
  137:  
  138:    //  PP_PHY_CTL1 default HW settings  + AUTOACK enabled
  139:    PP_PHY_CTL1 =     PP_PHY_CTL1_AUTOACK_BIT   & \
  0019 6e0844   [4]             MOV   #8,68
  140:                    ~(PP_PHY_CTL1_TMRTRIGEN_BIT | \
  141:                      PP_PHY_CTL1_SLOTTED_BIT   | \
  142:                      PP_PHY_CTL1_CCABFRTX_BIT  | \
  143:                      PP_PHY_CTL1_RXACKRQD_BIT  | \
  144:                      PP_PHY_CTL1_XCVSEQ_MASK);
  145:  
  146:    //  PP_PHY_CTL3 : disable all interrupts, but RxWtrMark for debug purposes
  147:    PP_PHY_CTL3  =    PP_PHY_CTL3_CRC_MSK_BIT       | \
  001c 6eff46   [4]             MOV   #-1,70
  148:                      PP_PHY_CTL3_CCA_MSK_BIT       | \
  149:                      PP_PHY_CTL3_RX_WMRK_MSK_DEBUG | \
  150:                      PP_PHY_CTL3_RX_MSK_BIT        | \
  151:                      PP_PHY_CTL3_FLTR_FAIL_MSK_BIT | \
  152:                      PP_PHY_CTL3_TX_MSK_BIT        | \
  153:                      PP_PHY_CTL3_LO1UNLOCK_MSK_BIT | \
  154:                      PP_PHY_CTL3_SEQ_MSK_BIT;
  155:  
  156:    //  PP_PHY_CTL4 : disable all timers and their interrupts
  157:    PP_PHY_CTL4  =   (PP_PHY_CTL4_TMR4MSK_BIT     | \
  001f 6ef047   [4]             MOV   #-16,71
  158:                      PP_PHY_CTL4_TMR3MSK_BIT     | \
  159:                      PP_PHY_CTL4_TMR2MSK_BIT     | \
  160:                      PP_PHY_CTL4_TMR1MSK_BIT)    & \
  161:                    ~(PP_PHY_CTL4_TMR4CMP_EN_BIT  | \
  162:                      PP_PHY_CTL4_TMR3CMP_EN_BIT  | \
  163:                      PP_PHY_CTL4_TMR2CMP_EN_BIT  | \
  164:                      PP_PHY_CTL4_TMR1CMP_EN_BIT);
  165:  
  166:    //  PP_PHY_FRMREVTMR
  167:    PP_PHY_FRMREVTMR = PP_PHY_FRMREVTMR_TMPRSC_MASK & PHY_PP_TMR_PRESCALER_16US;
  0022 a6a0     [2]             LDA   #-96
  0024 e701     [3]             STA   1,X
  168:  
  169:    PP_PHY_SCTL = ((0x0F << PP_PHY_SCTL_INDEX_POS) | \
  0026 6ef848   [4]             MOV   #-8,72
  170:                      PP_PHY_SCTL_ACK_FP_BIT)      & \
  171:                    ~(PP_PHY_SCTL_INDEX_DIS_BIT    | \
  172:                      PP_PHY_SCTL_INDEX_EN_BIT     | \
  173:                      PP_PHY_SCTL_SRC_ADDR_EN_BIT);
  174:  
  175:    PP_PHY_RXFRMFLT = PP_PHY_RXFRMFLT_CMD_FT_BIT   | \
  0029 a60b     [2]             LDA   #11
  002b f7       [2]             STA   ,X
  176:                      PP_PHY_RXFRMFLT_DATA_FT_BIT  | \
  177:                      PP_PHY_RXFRMFLT_BEACON_FT_BIT;
  178:  
  179:    //MC1323x IFR emulation
  180:    IoIndirectWrite(0x18, 0x48); //"cg_md_bw=1, cg_ct_force=8  (Project Sync 8875)"
  002c a618     [2]             LDA   #24
  002e e705     [3]             STA   5,X
  0030 a648     [2]             LDA   #72
  0032 e706     [3]             STA   6,X
  181:    IoIndirectWrite(0x06, 0x06); //"lo1_vco_buff_en=1, lo1_vco_buff_boost=1"
  0034 a606     [2]             LDA   #6
  0036 e705     [3]             STA   5,X
  0038 e706     [3]             STA   6,X
  182:    IoIndirectWrite(0x14, 0x75); //"ampmixer_iref=7,ampmixer_lobuf1_ibias=1,  ampmixer_lobuf1_vbias=1"
  003a a614     [2]             LDA   #20
  003c e705     [3]             STA   5,X
  003e a675     [2]             LDA   #117
  0040 e706     [3]             STA   6,X
  183:    IoIndirectWrite(0x1A, 0x49); //mixpad_sel=9
  0042 a61a     [2]             LDA   #26
  0044 e705     [3]             STA   5,X
  0046 a649     [2]             LDA   #73
  0048 e706     [3]             STA   6,X
  184:    IoIndirectWrite(0x3D, 0x07); //Increase RxACK Turnaround Time by 14 nS  (Project Sync 8949)
  004a a63d     [2]             LDA   #61
  004c e705     [3]             STA   5,X
  004e a607     [2]             LDA   #7
  0050 e706     [3]             STA   6,X
  185:    IoIndirectWrite(0x1D, 0x40); //mic_early (enable VREGM simul with VREGA)
  0052 a61d     [2]             LDA   #29
  0054 e705     [3]             STA   5,X
  0056 a640     [2]             LDA   #64
  0058 e706     [3]             STA   6,X
  186:    IoIndirectWrite(0x0F, 0x15); // VREGM trim
  005a a60f     [2]             LDA   #15
  005c e705     [3]             STA   5,X
  005e a615     [2]             LDA   #21
  0060 e706     [3]             STA   6,X
  187:  
  188:    //MC1323x setup
  189:    IoIndirectWrite(0x61, 0x01); // set vrega_en_ovrd_en
  0062 a661     [2]             LDA   #97
  0064 ad39     [5]             BSR   L9F ;abs = 009f
  190:    IoIndirectWrite(0x60, 0x01); // set vrega_en_ovrd
  0066 a660     [2]             LDA   #96
  0068 ad35     [5]             BSR   L9F ;abs = 009f
  191:    //MC1323x PSM manual calibration
  192:    //200 us delay
  193:    for(i=0;i<250;i++)
  006a 4f       [1]             CLRA  
  006b c70000   [4]             STA   i
  006e          L6E:    
  006e 450000   [3]             LDHX  @i
  0071 7c       [4]             INC   ,X
  0072 c60000   [4]             LDA   i
  0075 a1fa     [2]             CMP   #-6
  0077 25f5     [3]             BCS   L6E ;abs = 006e
  194:    {
  195:  	;
  196:    }
  197:    IoIndirectWrite(0x10, 0x2F); // psm manual calibration
  0079 a610     [2]             LDA   #16
  007b c7185b   [4]             STA   6235
  007e ae2f     [2]             LDX   #47
  0080 cf185c   [4]             STX   6236
  198:    IoIndirectWrite(0x10, 0x3F); // psm manual calibration
  0083 c7185b   [4]             STA   6235
  0086 a63f     [2]             LDA   #63
  0088 c7185c   [4]             STA   6236
  199:                                  
  200:    (void)PhyPlmeSetCurrentChannelRequest(0x0B); //2405 MHz
  008b a60b     [2]             LDA   #11
  008d cd0000   [6]             JSR   PhyPlmeSetCurrentChannelRequest
  201:    (void)PhyPlmeSetPwrLevelRequest(0x0C); //set the power level to 0dBm
  0090 a60c     [2]             LDA   #12
  0092 cd0000   [6]             JSR   PhyPlmeSetPwrLevelRequest
  202:    (void)PhyPpSetCcaThreshold(0x00);
  0095 4f       [1]             CLRA  
  0096 cd0000   [6]             JSR   PhyPpSetCcaThreshold
  203:  
  204:  #if (gPpdMode_d != gPpdModeOFF_d)  
  205:    PPD_InitPpdMode();
  206:  #endif //gPpdMode_d             
  207:    
  208:    PP_PHY_MAXFRMLEN = 0x7F;
  0099 a67f     [2]             LDA   #127
  009b c71855   [4]             STA   6229
  209:  }
  009e 81       [6]             RTS   
  009f          L9F:    
  009f c7185b   [4]             STA   6235
  00a2 a601     [2]             LDA   #1
  00a4 c7185c   [4]             STA   6236
  00a7 81       [6]             RTS   
  210:  
  211:  /***********************************************************************************/
  212:  
  213:  void    PhyPpSetPromiscuous(bool_t mode)
  214:  {
  215:    PHY_DEBUG_LOG(PDBG_PP_SET_PROMISC);
  216:    if(TRUE == mode)
  0000 4b09     [4]             DBNZA LB ;abs = 000b
  217:    {
  218:      PP_PHY_CTL2     |=   PP_PHY_CTL2_PROMISCUOUS_BIT;
  0002 1245     [5]             BSET  1,69
  219:      PP_PHY_RXFRMFLT |=   PP_PHY_RXFRMFLT_ACK_FT_BIT | PP_PHY_RXFRMFLT_NS_FT_BIT;
  0004 c61856   [4]             LDA   6230
  0007 aa14     [2]             ORA   #20
  220:    }
  0009 2007     [3]             BRA   L12 ;abs = 0012
  000b          LB:     
  221:    else
  222:    {
  223:      PP_PHY_CTL2     &=  ~PP_PHY_CTL2_PROMISCUOUS_BIT;
  000b 1345     [5]             BCLR  1,69
  224:      PP_PHY_RXFRMFLT &= ~(PP_PHY_RXFRMFLT_ACK_FT_BIT | PP_PHY_RXFRMFLT_NS_FT_BIT);
  000d c61856   [4]             LDA   6230
  0010 a4eb     [2]             AND   #-21
  0012          L12:    
  0012 c71856   [4]             STA   6230
  225:    }
  226:  }
  0015 81       [6]             RTS   
  227:  
  228:  /***********************************************************************************/
  229:  
  230:  
  231:  void    PhyAbort(void)
  232:  {
  0000 a7fe     [2]             AIS   #-2
  233:    uint8_t irqStatus;
  234:    volatile uint8_t time = 0;
  0002 95       [2]             TSX   
  0003 7f       [4]             CLR   ,X
  235:  #if (gPpdMode_d != gPpdModeOFF_d)      
  236:    volatile uint8_t temp;
  237:  #endif //(gPpdMode_d != gPpdModeOFF_d)    
  238:    
  239:    IrqControlLib_BackupIrqStatus(irqStatus);
  0004 85       [1]             TPA   
  0005 e701     [3]             STA   1,X
  240:    IrqControlLib_DisableAllIrqs();
  0007 9b       [1]             SEI   
  241:  
  242:    PHY_DEBUG_LOG(PDBG_PHY_ABORT);
  243:    
  244:    // disable timer trigger of the already programmed packet processor sequence, if any
  245:    PP_PHY_CTL1   &=  ~PP_PHY_CTL1_TMRTRIGEN_BIT;
  0008 1f44     [5]             BCLR  7,68
  246:    
  247:    // give the FSM enough time to start if it was triggered
  248:    time = PP_PHY_EVENTTMR0;
  000a b653     [3]             LDA   83
  000c f7       [2]             STA   ,X
  000d          LD:     
  249:    while((PP_PHY_EVENTTMR0 - time) < 2);
  000d b653     [3]             LDA   83
  000f f0       [3]             SUB   ,X
  0010 a102     [2]             CMP   #2
  0012 25f9     [3]             BCS   LD ;abs = 000d
  250:  
  251:    // make sure that we abort in HW only if the sequence was actually started (tmr triggered)
  252:    if((gIdle_c != PhyGetSeqState()) && (PP_PHY_FSM != 0))
  0014 b644     [3]             LDA   68
  0016 a507     [2]             BIT   #7
  0018 2710     [3]             BEQ   L2A ;abs = 002a
  001a c6185a   [4]             LDA   6234
  001d 270b     [3]             BEQ   L2A ;abs = 002a
  253:    {
  254:  #if (gPpdMode_d != gPpdModeOFF_d)      
  255:      // set the HW sequencer to idle state
  256:      temp = IoIndirectRead(0x17);
  257:      IoIndirectWrite(0x17, 0x00);   //disable the PPD
  258:  #endif //(gPpdMode_d != gPpdModeOFF_d)    
  259:      
  260:      
  261:      PP_PHY_CTL1 &= ~PP_PHY_CTL1_XCVSEQ_MASK;  
  001f b644     [3]             LDA   68
  0021 a4f8     [2]             AND   #-8
  0023 b744     [3]             STA   68
  0025          L25:    
  262:      
  263:  #if (gPpdMode_d != gPpdModeOFF_d)        
  264:      IoIndirectWrite(0x17, temp); //restore the PPD mode
  265:  #endif //(gPpdMode_d != gPpdModeOFF_d)        
  266:      
  267:      while (PP_PHY_FSM != 0)
  0025 c6185a   [4]             LDA   6234
  0028 26fb     [3]             BNE   L25 ;abs = 0025
  002a          L2A:    
  268:      ;
  269:    }
  270:    
  271:    
  272:  
  273:    // mask SEQ interrupt
  274:    PP_PHY_CTL3   |=  PP_PHY_CTL3_SEQ_MSK_BIT;
  002a 1046     [5]             BSET  0,70
  275:    
  276:    // stop timers
  277:    PP_PHY_CTL2   &=  ~PP_PHY_CTL2_TC3TMOUT_BIT;
  002c 1d45     [5]             BCLR  6,69
  278:    PP_PHY_CTL4   &= ~(PP_PHY_CTL4_TMR3CMP_EN_BIT | PP_PHY_CTL4_TMR2CMP_EN_BIT);
  002e b647     [3]             LDA   71
  0030 a4f9     [2]             AND   #-7
  0032 b747     [3]             STA   71
  279:    PP_PHY_CTL4   |=   PP_PHY_CTL4_TMR2MSK_BIT    | PP_PHY_CTL4_TMR3MSK_BIT;     // mask TMR2 and TMR3 interrupts
  0034 b647     [3]             LDA   71
  0036 aa60     [2]             ORA   #96
  0038 b747     [3]             STA   71
  280:    
  281:    PhyPassRxParams(NULL); 
  003a 5f       [1]             CLRX  
  003b 8c       [1]             CLRH  
  003c cd0000   [6]             JSR   PhyPassRxParams
  282:  
  283:    // clear all PP IRQ bits to avoid unexpected interrupts
  284:    PP_PHY_STATUS1  = PP_PHY_STATUS1;
  003f 4e4d4d   [5]             MOV   77,77
  285:    PP_PHY_STATUS2  = PP_PHY_STATUS2;
  0042 4e4e4e   [5]             MOV   78,78
  286:  
  287:    IrqControlLib_RestoreIrqStatus(irqStatus);
  0045 95       [2]             TSX   
  0046 e601     [3]             LDA   1,X
  0048 84       [1]             TAP   
  288:  }
  0049 a702     [2]             AIS   #2
  004b 81       [6]             RTS   
  289:  
  290:  /***********************************************************************************/
  291:  
  292:  void    PhyPpSetPanId(uint8_t *pPanId)
  293:  {
  294:    PHY_DEBUG_LOG(PDBG_PP_SET_PANID);
  295:  
  296:  #ifdef PHY_PARAMETERS_VALIDATION
  297:    if(NULL == pPanId)
  298:    {
  299:      return;
  300:    }
  301:  #endif // PHY_PARAMETERS_VALIDATION
  302:  
  303:    PP_PHY_PANIDH = pPanId[1];
  0000 e601     [3]             LDA   1,X
  0002 b75e     [3]             STA   94
  304:    PP_PHY_PANIDL = pPanId[0];
  0004 7e5f     [5]             MOV   X+,95
  305:  }
  0006 81       [6]             RTS   
  306:  
  307:  /***********************************************************************************/
  308:  
  309:  void    PhyPpSetShortAddr(uint8_t *pShortAddr)
  310:  {
  311:    PHY_DEBUG_LOG(PDBG_PP_SET_SHORTADDR);
  312:    
  313:  #ifdef PHY_PARAMETERS_VALIDATION
  314:    if(NULL == pShortAddr)
  315:    {
  316:      return;
  317:    }
  318:  #endif // PHY_PARAMETERS_VALIDATION
  319:  
  320:    PP_PHY_SHRTADDRH = pShortAddr[1];
  0000 e601     [3]             LDA   1,X
  0002 b75c     [3]             STA   92
  321:    PP_PHY_SHRTADDRL = pShortAddr[0];
  0004 7e5d     [5]             MOV   X+,93
  322:  }
  0006 81       [6]             RTS   
  323:  
  324:  /***********************************************************************************/
  325:  
  326:  void    PhyPpSetLongAddr(uint8_t *pLongAddr)
  327:  {
  328:    PHY_DEBUG_LOG(PDBG_PP_SET_LONGADDR);
  329:  
  330:  #ifdef PHY_PARAMETERS_VALIDATION
  331:    if(NULL == pLongAddr)
  332:    {
  333:      return;
  334:    }
  335:  #endif // PHY_PARAMETERS_VALIDATION
  336:  
  337:    PP_PHY_LONGADR0  = pLongAddr[0];
  0000 f6       [3]             LDA   ,X
  0001 c71854   [4]             STA   6228
  338:    PP_PHY_LONGADR8  = pLongAddr[1];
  0004 e601     [3]             LDA   1,X
  0006 c71853   [4]             STA   6227
  339:    PP_PHY_LONGADR16 = pLongAddr[2];
  0009 e602     [3]             LDA   2,X
  000b c71852   [4]             STA   6226
  340:    PP_PHY_LONGADR24 = pLongAddr[3];
  000e e603     [3]             LDA   3,X
  0010 c71851   [4]             STA   6225
  341:    PP_PHY_LONGADR32 = pLongAddr[4];
  0013 e604     [3]             LDA   4,X
  0015 c71850   [4]             STA   6224
  342:    PP_PHY_LONGADR40 = pLongAddr[5];
  0018 e605     [3]             LDA   5,X
  001a c7184f   [4]             STA   6223
  343:    PP_PHY_LONGADR48 = pLongAddr[6];
  001d e606     [3]             LDA   6,X
  001f c7184e   [4]             STA   6222
  344:    PP_PHY_LONGADR56 = pLongAddr[7];
  0022 e607     [3]             LDA   7,X
  0024 c7184d   [4]             STA   6221
  345:  }
  0027 81       [6]             RTS   
  346:  
  347:  /***********************************************************************************/
  348:  
  349:  void    PhyPpSetMacRole(bool_t macRole)
  350:  {
  351:    PHY_DEBUG_LOG(PDBG_PP_SET_MACROLE);
  352:    if(gMacRole_PanCoord_c == macRole)
  0000 4b03     [4]             DBNZA L5 ;abs = 0005
  353:    {
  354:      PP_PHY_CTL2 |=  PP_PHY_CTL2_PANCORDNTR_BIT;
  0002 1a45     [5]             BSET  5,69
  355:    }
  0004 81       [6]             RTS   
  0005          L5:     
  356:    else
  357:    {
  358:      PP_PHY_CTL2 &= ~PP_PHY_CTL2_PANCORDNTR_BIT;
  0005 1b45     [5]             BCLR  5,69
  359:    }
  360:  }
  0007 81       [6]             RTS   
  361:  
  362:  /***********************************************************************************/
  363:  
  364:  void    PhyPpSetCcaThreshold(uint8_t ccaThreshold)
  365:  {
  366:    PP_PHY_CCATHRSHD = ccaThreshold;
  0000 c71858   [4]             STA   6232
  367:  }
  0003 81       [6]             RTS   
  368:  
  369:  /***********************************************************************************/
  370:  
  371:  bool_t  PhyPpIsTxAckDataPending(void)
  372:  {
  373:    if(PP_PHY_STATUS1 & PP_PHY_STATUS1_SRCADDR_BIT)
  0000 0b4d03   [5]             BRCLR 5,77,L6 ;abs = 0006
  374:    {
  375:      return TRUE;
  0003 a601     [2]             LDA   #1
  0005 81       [6]             RTS   
  0006          L6:     
  376:    }
  377:    return FALSE;
  0006 4f       [1]             CLRA  
  378:  }
  0007 81       [6]             RTS   
  379:  
  380:  /***********************************************************************************/
  381:  
  382:  bool_t  PhyPpIsRxAckDataPending(void)
  383:  {
  384:    if(PP_PHY_STATUS2 & PP_PHY_STATUS2_FRPEND_BIT)
  0000 0f4e03   [5]             BRCLR 7,78,L6 ;abs = 0006
  385:    {
  386:      return TRUE;
  0003 a601     [2]             LDA   #1
  0005 81       [6]             RTS   
  0006          L6:     
  387:    }
  388:    return FALSE;
  0006 4f       [1]             CLRA  
  389:  }
  0007 81       [6]             RTS   
  390:  
  391:  /***********************************************************************************/
  392:  
  393:  bool_t  PhyPpIsPollIndication(void)
  394:  {
  395:    if(PP_PHY_STATUS1 & PP_PHY_STATUS1_PI_BIT)
  0000 094d03   [5]             BRCLR 4,77,L6 ;abs = 0006
  396:    {
  397:      return TRUE;
  0003 a601     [2]             LDA   #1
  0005 81       [6]             RTS   
  0006          L6:     
  398:    }
  399:    return FALSE;
  0006 4f       [1]             CLRA  
  400:  }
  0007 81       [6]             RTS   
  401:  
  402:  /***********************************************************************************/
  403:  
  404:  void    PhyPp_AddToIndirect(uint8_t index, uint8_t *pPanId, uint8_t *pAddr, uint8_t AddrMode)
  405:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 87       [2]             PSHA  
  0003 a7fb     [2]             AIS   #-5
  406:    uint16_t mAddrChecksum, tmp16;
  407:    uint8_t  iAddr;
  408:  
  409:    PHY_DEBUG_LOG1(PDBG_PP_ADD_INDIRECT, index);
  410:  
  411:  #ifdef PHY_PARAMETERS_VALIDATION
  412:    if((NULL == pPanId) || (NULL == pAddr))
  413:    {
  414:      return;
  415:    }
  416:    if( (gPhyAddrMode64BitAddr_c != AddrMode) && (gPhyAddrMode16BitAddr_c != AddrMode) )
  417:    {
  418:      return;
  419:    }
  420:  #endif // PHY_PARAMETERS_VALIDATION
  421:  
  422:    mAddrChecksum  =  * pPanId;
  0005 9efe0b   [5]             LDHX  11,SP
  0008 f6       [3]             LDA   ,X
  0009 8c       [1]             CLRH  
  000a 97       [1]             TAX   
  000b 9eff01   [5]             STHX  1,SP
  423:    mAddrChecksum |= (*(pPanId+1))<<8;
  000e 9efe0b   [5]             LDHX  11,SP
  0011 e601     [3]             LDA   1,X
  0013 97       [1]             TAX   
  0014 4f       [1]             CLRA  
  0015 9eea02   [4]             ORA   2,SP
  0018 9ee702   [4]             STA   2,SP
  001b 9f       [1]             TXA   
  001c 95       [2]             TSX   
  001d fa       [3]             ORA   ,X
  001e f7       [2]             STA   ,X
  424:    if( gPhyAddrMode16BitAddr_c == AddrMode )
  001f e605     [3]             LDA   5,X
  0021 a102     [2]             CMP   #2
  0023 2603     [3]             BNE   L28 ;abs = 0028
  425:    {
  426:      // chksum = (dstPANID + dstAddr[15:0]) % 65536
  427:      iAddr = 1;
  0025 a601     [2]             LDA   #1
  428:    } 
  0027 65       [3]             SKIP2 L2A ;abs = 002a
  0028          L28:    
  429:    else // 64 bit address mode
  430:    {
  431:      // chksum = (dstPANID + dstAddr[15: 0]) % 65536
  432:      // chksum = (chksum   + dstAddr[31:15]) % 65536
  433:      // chksum = (chksum   + dstAddr[47:32]) % 65536
  434:      // chksum = (chksum   + dstAddr[63:48]) % 65536
  435:      iAddr = 4;
  0028 a604     [2]             LDA   #4
  002a          L2A:    
  002a e702     [3]             STA   2,X
  002c          L2C:    
  436:    }
  437:  
  438:    do
  439:    {
  440:      tmp16  =  * pAddr;
  002c 9efe07   [5]             LDHX  7,SP
  002f f6       [3]             LDA   ,X
  0030 89       [2]             PSHX  
  0031 8c       [1]             CLRH  
  0032 97       [1]             TAX   
  0033 9eff05   [5]             STHX  5,SP
  441:      tmp16 |= (*(pAddr+1))<<8;
  0036 9efe08   [5]             LDHX  8,SP
  0039 e601     [3]             LDA   1,X
  003b 97       [1]             TAX   
  003c 4f       [1]             CLRA  
  003d 9eea06   [4]             ORA   6,SP
  0040 87       [2]             PSHA  
  0041 9f       [1]             TXA   
  0042 9eea06   [4]             ORA   6,SP
  442:      mAddrChecksum += tmp16;
  0045 87       [2]             PSHA  
  0046 9ee602   [4]             LDA   2,SP
  0049 9eeb05   [4]             ADD   5,SP
  004c 9ee705   [4]             STA   5,SP
  004f 86       [3]             PULA  
  0050 9ee903   [4]             ADC   3,SP
  0053 9ee703   [4]             STA   3,SP
  443:      
  444:      pAddr += 2;
  0056 9eee02   [4]             LDX   2,SP
  0059 af02     [2]             AIX   #2
  005b 9eff09   [5]             STHX  9,SP
  445:      iAddr--;
  005e 95       [2]             TSX   
  005f 6a04     [5]             DEC   4,X
  446:    } while(iAddr != 0);
  0061 a702     [2]             AIS   #2
  0063 26c7     [3]             BNE   L2C ;abs = 002c
  447:  
  448:    PP_PHY_SCTL = ((index << PP_PHY_SCTL_INDEX_POS) | PP_PHY_SCTL_SRC_ADDR_EN_BIT) & ~(PP_PHY_SCTL_INDEX_DIS_BIT  |   PP_PHY_SCTL_INDEX_EN_BIT  | PP_PHY_SCTL_ACK_FP_BIT);
  0065 e60e     [3]             LDA   14,X
  0067 62       [1]             NSA   
  0068 a4f0     [2]             AND   #-16
  006a aa04     [2]             ORA   #4
  006c b748     [3]             STA   72
  449:    PP_PHY_SADRSUMD = mAddrChecksum;
  006e 9efe01   [5]             LDHX  1,SP
  0071 3549     [5]             STHX  73
  450:    PP_PHY_SCTL = ((index << PP_PHY_SCTL_INDEX_POS) | PP_PHY_SCTL_SRC_ADDR_EN_BIT  |   PP_PHY_SCTL_INDEX_EN_BIT)  & ~(PP_PHY_SCTL_INDEX_DIS_BIT | PP_PHY_SCTL_ACK_FP_BIT);
  0073 aa02     [2]             ORA   #2
  0075 b748     [3]             STA   72
  451:  }
  0077 a708     [2]             AIS   #8
  0079 81       [6]             RTS   
  452:  
  453:  /***********************************************************************************/
  454:  
  455:  void     PhyPp_RemoveFromIndirect(uint8_t index)
  456:  {
  457:    PHY_DEBUG_LOG1(PDBG_PP_REMOVE_INDIRECT, index);
  458:    PP_PHY_SCTL = ((index << PP_PHY_SCTL_INDEX_POS) | PP_PHY_SCTL_SRC_ADDR_EN_BIT  |   PP_PHY_SCTL_INDEX_DIS_BIT) & ~(PP_PHY_SCTL_INDEX_EN_BIT  | PP_PHY_SCTL_ACK_FP_BIT);
  0000 62       [1]             NSA   
  0001 a4f0     [2]             AND   #-16
  0003 aa05     [2]             ORA   #5
  0005 b748     [3]             STA   72
  459:  }
  0007 81       [6]             RTS   
  460:  
  461:  /***********************************************************************************/
  462:  
  463:  uint8_t PhyPpReadLatestIndex(void)
  464:  {
  465:    uint8_t retVal;
  466:    retVal = (PP_PHY_SCTL >> PP_PHY_SCTL_INDEX_POS);
  0000 b648     [3]             LDA   72
  0002 62       [1]             NSA   
  0003 a40f     [2]             AND   #15
  467:    PHY_DEBUG_LOG1(PDBG_PP_READ_LATEST_INDEX, retVal);
  468:    return retVal;
  469:  }
  0005 81       [6]             RTS   
  470:  
  471:  /***********************************************************************************/
  472:  
  473:  void    PhyEnableBER(void)
  474:  {
  475:    IoIndirectWrite(PP_PHY_IAR_DIG_TESTMODE,  PP_PHY_IAR_BIT_FPGA_EN |  PP_PHY_IAR_BIT_IDEAL_PSM_EN | PP_PHY_IAR_BIT_MODE_TMUX_EN | PP_PHY_IAR_BIT_BER_EN);
  0000 a659     [2]             LDA   #89
  0002 c7185b   [4]             STA   6235
  0005 a60f     [2]             LDA   #15
  0007 c7185c   [4]             STA   6236
  476:  }
  000a 81       [6]             RTS   
  477:  
  478:  /***********************************************************************************/
  479:  
  480:  void    PhyDisableBER(void)
  481:  {
  482:    IoIndirectWrite(PP_PHY_IAR_DIG_TESTMODE,  PP_PHY_IAR_BIT_FPGA_EN |  PP_PHY_IAR_BIT_IDEAL_PSM_EN | PP_PHY_IAR_BIT_MODE_TMUX_EN);
  0000 a659     [2]             LDA   #89
  0002 c7185b   [4]             STA   6235
  0005 a607     [2]             LDA   #7
  0007 c7185c   [4]             STA   6236
  483:  }
  000a 81       [6]             RTS   
  484:  
  485:  /***********************************************************************************/
  486:  
  487:  void PhyGetRandomNo(uint32_t *pRandomNo) {
  0000 a7f3     [2]             AIS   #-13
  488:        
  489:    uint32_t startTime, endTime;
  490:    uint8_t  *ptr = (uint8_t *)pRandomNo;
  0002 9eff02   [5]             STHX  2,SP
  491:    uint8_t  i = 4, iar60save, iar61save;
  0005 a604     [2]             LDA   #4
  0007 95       [2]             TSX   
  0008 f7       [2]             STA   ,X
  492:    
  493:     //slightly alter the FRACL register for increasing the randomness
  494:    PP_PHY_LO1FRACL ++;
  0009 45184a   [3]             LDHX  #6218
  000c 7c       [4]             INC   ,X
  000d cd0096   [6]             JSR   L96 ;abs = 0096
  495:    
  496:    // backup 0x60 and 0x61 IARs
  497:    iar60save = IoIndirectRead(0x60);
  0010 45185b   [3]             LDHX  #6235
  0013 e601     [3]             LDA   1,X
  0015 9ee708   [4]             STA   8,SP
  498:    iar61save = IoIndirectRead(0x61);
  0018 a661     [2]             LDA   #97
  001a f7       [2]             STA   ,X
  001b ee01     [3]             LDX   1,X
  001d 9eef09   [4]             STX   9,SP
  499:    
  500:  
  501:     // Turn ON the override enable
  502:    IoIndirectWrite(0x61, 0x07);
  0020 c7185b   [4]             STA   6235
  0023 a607     [2]             LDA   #7
  0025 c7185c   [4]             STA   6236
  0028 ad6c     [5]             BSR   L96 ;abs = 0096
  503:     // override method
  504:    IoIndirectWrite(0x60, 0x07);
  002a a607     [2]             LDA   #7
  002c c7185c   [4]             STA   6236
  505:    
  506:    PhyTimeReadClock(&startTime);        
  002f 95       [2]             TSX   
  0030 af09     [2]             AIX   #9
  0032 cd0000   [6]             JSR   PhyTimeReadClock
  0035          L35:    
  507:    PhyTimeReadClock(&endTime);  
  508:    
  509:     // wait 10000 symbols
  510:    while( ((endTime - startTime) & 0x00FFFFFF) < PHY_RNG_DELAY) {
  511:      PhyTimeReadClock(&endTime);              
  0035 95       [2]             TSX   
  0036 af03     [2]             AIX   #3
  0038 cd0000   [6]             JSR   PhyTimeReadClock
  003b 95       [2]             TSX   
  003c af09     [2]             AIX   #9
  003e 89       [2]             PSHX  
  003f 8b       [2]             PSHH  
  0040 affa     [2]             AIX   #-6
  0042 cd0000   [6]             JSR   _LSUB
  0045 95       [2]             TSX   
  0046 cd0000   [6]             JSR   _LAND_RC
  0049 00ffffff         DC.L  16777215
  004d 95       [2]             TSX   
  004e cd0000   [6]             JSR   _LCMP_RC
  0051 00000271         DC.L  625
  0055 a708     [2]             AIS   #8
  0057 25dc     [3]             BCS   L35 ;abs = 0035
  0059 ad3b     [5]             BSR   L96 ;abs = 0096
  512:    }
  513:    
  514:     // override method
  515:    IoIndirectWrite(0x60, 0x03);  
  005b a603     [2]             LDA   #3
  005d c7185c   [4]             STA   6236
  516:    
  517:    PP_PHY_INDACCIDX = 0x0A;  
  0060 a60a     [2]             LDA   #10
  0062 c7185b   [4]             STA   6235
  518:    while(i--) {
  0065 200c     [3]             BRA   L73 ;abs = 0073
  0067          L67:    
  519:      *ptr++ = PP_PHY_INDACCREG;
  0067 9efe02   [5]             LDHX  2,SP
  006a c6185c   [4]             LDA   6236
  006d f7       [2]             STA   ,X
  006e af01     [2]             AIX   #1
  0070 9eff02   [5]             STHX  2,SP
  0073          L73:    
  0073 95       [2]             TSX   
  0074 f6       [3]             LDA   ,X
  0075 97       [1]             TAX   
  0076 4a       [1]             DECA  
  0077 9ee701   [4]             STA   1,SP
  007a 5d       [1]             TSTX  
  007b 26ea     [3]             BNE   L67 ;abs = 0067
  520:    }
  521:    
  522:    PP_PHY_LO1FRACL --;
  007d 45184a   [3]             LDHX  #6218
  0080 7a       [4]             DEC   ,X
  0081 ad13     [5]             BSR   L96 ;abs = 0096
  523:    
  524:    //restore IARs 0x60 and 0x61
  525:    IoIndirectWrite(0x60, iar60save);
  0083 95       [2]             TSX   
  0084 e607     [3]             LDA   7,X
  0086 c7185c   [4]             STA   6236
  526:    IoIndirectWrite(0x61, iar61save);
  0089 a661     [2]             LDA   #97
  008b c7185b   [4]             STA   6235
  008e e608     [3]             LDA   8,X
  0090 c7185c   [4]             STA   6236
  527:  }
  0093 a70d     [2]             AIS   #13
  0095 81       [6]             RTS   
  0096          L96:    
  0096 a660     [2]             LDA   #96
  0098 c7185b   [4]             STA   6235
  009b 81       [6]             RTS   
  528:  
  529:  /***********************************************************************************/
  530:  
  531:  void    PhyEnableTxNoModulation(void)
  532:  {
  533:    uint8_t tmp = IoIndirectRead(0x13);
  0000 a613     [2]             LDA   #19
  0002 c7185b   [4]             STA   6235
  0005 c6185c   [4]             LDA   6236
  534:    IoIndirectWrite(0x13, tmp | 0x80);
  0008 ae13     [2]             LDX   #19
  000a cf185b   [4]             STX   6235
  000d aa80     [2]             ORA   #-128
  000f c7185c   [4]             STA   6236
  535:  }
  0012 81       [6]             RTS   
  536:  
  537:  /***********************************************************************************/
  538:  
  539:  void    PhyDisableTxNoModulation(void)
  540:  {
  541:    uint8_t tmp = IoIndirectRead(0x13);
  0000 a613     [2]             LDA   #19
  0002 c7185b   [4]             STA   6235
  0005 c6185c   [4]             LDA   6236
  542:    IoIndirectWrite(0x13, tmp & 0x7F);
  0008 ae13     [2]             LDX   #19
  000a cf185b   [4]             STX   6235
  000d a47f     [2]             AND   #127
  000f c7185c   [4]             STA   6236
  543:  }
  0012 81       [6]             RTS   
  544:  
  545:  /***********************************************************************************/
  546:  
  547:  /************************************************************************************
  548:  *************************************************************************************
  549:  * Module debug stuff
  550:  *************************************************************************************
  551:  ************************************************************************************/
  552:  
  553:  #pragma CODE_SEG DEFAULT
  554:  
