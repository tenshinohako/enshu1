*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /***********************************************************************************************\
    2:   Freescale MAG3110 Driver
    3:  *
    4:  * Filename: MAG3110.c
    5:  *
    6:  *
    7:  * (c) Copyright 2009, Freescale, Inc.  All rights reserved.
    8:  *
    9:  * No part of this document must be reproduced in any form - including copied,
   10:  * transcribed, printed or by any electronic means - without specific written
   11:  * permission from Freescale Semiconductor.
   12:  *
   13:  \***********************************************************************************************/
   14:  
   15:  
   16:  #include "IIC_Interface.h"
   17:  #include "IIC.h"
   18:  #include "IoConfig.h"
   19:  #include "IrqControlLib.h"
   20:  #include "TS_Interface.h"
   21:  #include "FunctionLib.h"
   22:  #include "PublicConst.h"
   23:  #include "MApp_init.h"
   24:  #include "MAG3110.h"
   25:  
   26:  
   27:  /***********************************************************************************************\
   28:  * Public functions
   29:  \***********************************************************************************************/
   30:  
   31:  
   32:  
   33:  extern uint8_t MAG3110_start_flag;
   34:  
   35:  
   36:  static dataFrom_MAG3110_t mDataFrom_MAG3110 = 
   37:  {                                                                
   38:    0x00, 
   39:    0x00,
   40:    0x00, 
   41:    0x00,
   42:    0x00
   43:  };
   44:  
   45:  
   46:  static tmrTimerID_t mMAG3110TimerID = gTmrInvalidTimerID_c;
   47:  
   48:  /*********************************************************\
   49:  * Set MAG3110 call-back function
   50:  \*********************************************************/
   51:  void MAG3110_SetCallBack(void (*pfCallBack)(void)) {
   52:  	
   53:  	pfMAG3110_CallBack = pfCallBack;
  0000 9efe05   [5]             LDHX  5,SP
  0003 960001   [5]             STHX  pfMAG3110_CallBack:1
  0006 95       [2]             TSX   
  0007 e603     [3]             LDA   3,X
  0009 c70000   [4]             STA   pfMAG3110_CallBack
   54:  	  	  
   55:  }
  000c 8d       [7]             RTC   
   56:  
   57:  /*********************************************************\
   58:  * void MAG3110_int(void)
   59:  \*********************************************************/
   60:  void MAG3110_int(void){
   61:    IIC_RegWrite(MAG3110_SlaveAddressIIC,MAG3110_CTRL_REG1,0x00);    // CTRL_REG1: Standby mode 
  0000 a61c     [2]             LDA   #28
  0002 87       [2]             PSHA  
  0003 ae10     [2]             LDX   #16
  0005 4f       [1]             CLRA  
  0006 ac000000 [8]             CALL  IIC_RegWrite
  000a 8a       [3]             PULH  
   62:    IIC_RegWrite(MAG3110_SlaveAddressIIC,MAG3110_CTRL_REG2,MAG3110_CTRL_REG2_AUTO_MRST_EN_MASK);    // CTRL_REG2: RAW=0
  000b a61c     [2]             LDA   #28
  000d 87       [2]             PSHA  
  000e ae11     [2]             LDX   #17
  0010 a680     [2]             LDA   #-128
  0012 ac000000 [8]             CALL  IIC_RegWrite
  0016 8a       [3]             PULH  
   63:    IIC_RegWrite(MAG3110_SlaveAddressIIC,MAG3110_CTRL_REG1,0x19);    // CTRL_REG1: Standby mode   
  0017 a61c     [2]             LDA   #28
  0019 87       [2]             PSHA  
  001a ae10     [2]             LDX   #16
  001c a619     [2]             LDA   #25
  001e ac000000 [8]             CALL  IIC_RegWrite
  0022 8a       [3]             PULH  
   64:    mMAG3110TimerID = TMR_AllocateTimer();
  0023 ac000000 [8]             CALL  TMR_AllocateTimer
  0027 c70000   [4]             STA   mMAG3110TimerID
   65:  }
  002a 8d       [7]             RTC   
   66:  
   67:  void MAG3110_Start_Periodical_data(void) {
   68:  	TMR_StartIntervalTimer(mMAG3110TimerID, mMAG3110Interval_c,MAG3110_Periodical_data);
  0000 c60000   [4]             LDA   mMAG3110TimerID
  0003 87       [2]             PSHA  
  0004 4502bc   [3]             LDHX  #700
  0007 89       [2]             PSHX  
  0008 8b       [2]             PSHH  
  0009 4f       [1]             CLRA  
  000a 87       [2]             PSHA  
  000b 87       [2]             PSHA  
  000c 450000   [3]             LDHX  @MAG3110_Periodical_data
  000f 89       [2]             PSHX  
  0010 8b       [2]             PSHH  
  0011 a600     [2]             LDA   @MAG3110_Periodical_data:PAGE
  0013 87       [2]             PSHA  
  0014 ac000000 [8]             CALL  TMR_StartIntervalTimer
  0018 a708     [2]             AIS   #8
   69:  }
  001a 8d       [7]             RTC   
   70:  
   71:  /*********************************************************\
   72:  * MAG3110 read data
   73:  \*********************************************************/
   74:  void MAG3110_Periodical_data(uint8_t timerId) 
   75:  {
  0000 a7f7     [2]             AIS   #-9
   76:  		
   77:    uint8_t rxData[7];
   78:    volatile int16_t Read_data_16bit;
   79:    
   80:    (void) timerId; /* prevent compiler warning */
   81:  
   82:    
   83:    rxData[0] = IIC_RegRead(MAG3110_SlaveAddressIIC,MAG3110_DR); // checking a STATUS-reg
  0002 ae1c     [2]             LDX   #28
  0004 4f       [1]             CLRA  
  0005 ac000000 [8]             CALL  IIC_RegRead
  0009 95       [2]             TSX   
  000a f7       [2]             STA   ,X
   84:    
   85:    if( rxData[0] & 0x08){
  000b a508     [2]             BIT   #8
  000d 2750     [3]             BEQ   L5F ;abs = 005f
   86:        
   87:  	  IIC_RegReadN(MAG3110_SlaveAddressIIC,MAG3110_OUT_X_MSB,MAG3110_OUT_Z_LSB,&rxData[1]);      // Read data from $0x01 to 0x06
  000f a61c     [2]             LDA   #28
  0011 87       [2]             PSHA  
  0012 a601     [2]             LDA   #1
  0014 87       [2]             PSHA  
  0015 a606     [2]             LDA   #6
  0017 af01     [2]             AIX   #1
  0019 ac000000 [8]             CALL  IIC_RegReadN
  001d a702     [2]             AIS   #2
   88:  	  
   89:  	  pfMAG3110_CallBack();  // Set event in order to notify application in callback function.
  001f 320001   [5]             LDHX  pfMAG3110_CallBack:1
  0022 c60000   [4]             LDA   pfMAG3110_CallBack
  0025 8b       [2]             PSHH  
  0026 8b       [2]             PSHH  
  0027 8b       [2]             PSHH  
  0028 ac000000 [8]             CALL  _CALL_STAR08_FAR
   90:  	  
   91:  	  Read_data_16bit = (int16_t)(rxData[1]<<8);
  002c 95       [2]             TSX   
  002d e601     [3]             LDA   1,X
  002f ac000062 [8]             CALL  MAG3110_Periodical_data:98
   92:  	  mDataFrom_MAG3110.xOutReg =  ( Read_data_16bit + (int16_t)rxData[2] );
  0033 9eeb03   [4]             ADD   3,SP
  0036 ac00006e [8]             CALL  MAG3110_Periodical_data:110
  003a 960000   [5]             STHX  mDataFrom_MAG3110
   93:  	 
   94:  	  Read_data_16bit = (int16_t)(rxData[3]<<8);
  003d 95       [2]             TSX   
  003e e603     [3]             LDA   3,X
  0040 ac000062 [8]             CALL  MAG3110_Periodical_data:98
   95:  	  mDataFrom_MAG3110.yOutReg =  ( Read_data_16bit + (int16_t)rxData[4] ); 
  0044 9eeb05   [4]             ADD   5,SP
  0047 ac00006e [8]             CALL  MAG3110_Periodical_data:110
  004b 960002   [5]             STHX  mDataFrom_MAG3110:2
   96:  	  
   97:  	  Read_data_16bit = (int16_t)(rxData[5]<<8);
  004e 95       [2]             TSX   
  004f e605     [3]             LDA   5,X
  0051 ac000062 [8]             CALL  MAG3110_Periodical_data:98
   98:  	  mDataFrom_MAG3110.zOutReg =  ( Read_data_16bit + (int16_t)rxData[6] ); 
  0055 9eeb07   [4]             ADD   7,SP
  0058 ac00006e [8]             CALL  MAG3110_Periodical_data:110
  005c 960004   [5]             STHX  mDataFrom_MAG3110:4
  005f          L5F:    
   99:      
  100:  
  101:    }
  102:    
  103:  }
  005f a709     [2]             AIS   #9
  0061 8d       [7]             RTC   
  0062          L62:    
  0062 87       [2]             PSHA  
  0063 4f       [1]             CLRA  
  0064 8a       [3]             PULH  
  0065 97       [1]             TAX   
  0066 9eff0b   [5]             STHX  11,SP
  0069 9efe0b   [5]             LDHX  11,SP
  006c 9f       [1]             TXA   
  006d 8d       [7]             RTC   
  006e          L6E:    
  006e 87       [2]             PSHA  
  006f 8b       [2]             PSHH  
  0070 86       [3]             PULA  
  0071 a900     [2]             ADC   #0
  0073 87       [2]             PSHA  
  0074 8a       [3]             PULH  
  0075 88       [3]             PULX  
  0076 8d       [7]             RTC   
  104:  
  105:  /*********************************************************\
  106:  * int16_t MAG3110_CatchSensorData(uint8_t number)
  107:  \*********************************************************/
  108:  int16_t MAG3110_CatchSensorData(uint8_t number){
  0000 a7fe     [2]             AIS   #-2
  109:  	
  110:  	int16_t catch_data;
  111:  	
  112:  	switch(number){
  0002 a103     [2]             CMP   #3
  0004 221c     [3]             BHI   L22 ;abs = 0022
  0006 410109   [4]             CBEQA #1,L12 ;abs = 0012
  0009 41020b   [4]             CBEQA #2,L17 ;abs = 0017
  000c a103     [2]             CMP   #3
  000e 2612     [3]             BNE   L22 ;abs = 0022
  0010 200a     [3]             BRA   L1C ;abs = 001c
  0012          L12:    
  113:  		case 1:
  114:  			catch_data = mDataFrom_MAG3110.xOutReg;
  0012 320000   [5]             LDHX  mDataFrom_MAG3110
  115:  		break;
  0015 2008     [3]             BRA   L1F ;abs = 001f
  0017          L17:    
  116:  		case 2:
  117:  			catch_data = mDataFrom_MAG3110.yOutReg;
  0017 320002   [5]             LDHX  mDataFrom_MAG3110:2
  118:  		break;
  001a 2003     [3]             BRA   L1F ;abs = 001f
  001c          L1C:    
  119:  		case 3:
  120:  			catch_data = mDataFrom_MAG3110.zOutReg;
  001c 320004   [5]             LDHX  mDataFrom_MAG3110:4
  001f          L1F:    
  001f 9eff01   [5]             STHX  1,SP
  0022          L22:    
  121:  		break;
  122:  		default :
  123:  		break;
  124:  	}
  125:  	
  126:      return catch_data;
  0022 9efe01   [5]             LDHX  1,SP
  127:      
  128:  }
  0025 a702     [2]             AIS   #2
  0027 8d       [7]             RTC   
  129:  
  130:  /*********************************************************\
  131:  * void MAG3110_Init(void)
  132:  \*********************************************************/
  133:  void MAG3110_Init(void){
  134:      MAG3110_SetCallBack(MAG3110_CallBack);  
  0000 450000   [3]             LDHX  @MAG3110_CallBack
  0003 89       [2]             PSHX  
  0004 8b       [2]             PSHH  
  0005 a600     [2]             LDA   @MAG3110_CallBack:PAGE
  0007 87       [2]             PSHA  
  0008 ac000000 [8]             CALL  MAG3110_SetCallBack
  000c a703     [2]             AIS   #3
  135:      MAG3110_int();
  000e ac000000 [8]             CALL  MAG3110_int
  136:      MAG3110_start_flag = 1;	
  0012 a601     [2]             LDA   #1
  0014 c70000   [4]             STA   MAG3110_start_flag
  137:  }
  0017 8d       [7]             RTC   
  138:  
  139:  /*********************************************************\
  140:  * void MAG3110_CallBack(void) 
  141:  \*********************************************************/
  142:  void MAG3110_CallBack(void){
  143:  	
  144:  	TS_SendEvent(gAppTaskID_c, gAppEvt_FromMAG3110_c);
  0000 c60000   [4]             LDA   gAppTaskID_c
  0003 450400   [3]             LDHX  #1024
  0006 ac000000 [8]             CALL  TS_SendEvent
  145:  	
  146:  }
  000a 8d       [7]             RTC   
  147:  
  148:  /*********************************************************\
  149:  * void MAG3110_dump(event_t events)
  150:  \*********************************************************/
  151:  void MAG3110_dump(event_t events){
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 a7fd     [2]             AIS   #-3
  152:  	
  153:  	volatile int16_t tmp;
  154:  	uint8_t i;
  155:  	
  156:  	// Start to receive periodical data 
  157:  	if(MAG3110_start_flag){
  0004 c60000   [4]             LDA   MAG3110_start_flag
  0007 2708     [3]             BEQ   L11 ;abs = 0011
  158:  		MAG3110_start_flag = 0;
  0009 4f       [1]             CLRA  
  000a c70000   [4]             STA   MAG3110_start_flag
  159:  		MAG3110_Start_Periodical_data();
  000d ac000000 [8]             CALL  MAG3110_Start_Periodical_data
  0011          L11:    
  160:  	}
  161:  	
  162:  	if (events & gAppEvt_FromMAG3110_c)
  0011 95       [2]             TSX   
  0012 e603     [3]             LDA   3,X
  0014 a504     [2]             BIT   #4
  0016 2766     [3]             BEQ   L7E ;abs = 007e
  163:  		{   
  164:  			UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 
  0018 450000   [3]             LDHX  @"\012\015-----------------------------------------------\012\015"
  001b ac000081 [8]             CALL  MAG3110_dump:129
  165:  			
  166:  			for(i=1; i<4; i++){
  001f a601     [2]             LDA   #1
  0021 95       [2]             TSX   
  0022 f7       [2]             STA   ,X
  0023          L23:    
  167:  				switch(i){			
  0023 95       [2]             TSX   
  0024 f6       [3]             LDA   ,X
  0025 a103     [2]             CMP   #3
  0027 221b     [3]             BHI   L44 ;abs = 0044
  0029 410109   [4]             CBEQA #1,L35 ;abs = 0035
  002c 41020b   [4]             CBEQA #2,L3A ;abs = 003a
  002f a103     [2]             CMP   #3
  0031 2611     [3]             BNE   L44 ;abs = 0044
  0033 200a     [3]             BRA   L3F ;abs = 003f
  0035          L35:    
  168:  					case 1:
  169:  						UartUtil_Print("MAG3110(16bit) \n\rX axis : 0x", gAllowToBlock_d); 
  0035 450000   [3]             LDHX  @"MAG3110(16bit) \012\015X axis : 0x"
  170:  					break;
  0038 200d     [3]             BRA   L47 ;abs = 0047
  003a          L3A:    
  171:  					case 2:
  172:  						UartUtil_Print(" *0.1 [uT]\n\rY axis : 0x", gAllowToBlock_d);  
  003a 450000   [3]             LDHX  @" *0.1 [uT]\012\015Y axis : 0x"
  173:  					break;
  003d 2008     [3]             BRA   L47 ;abs = 0047
  003f          L3F:    
  174:  					case 3:
  175:  						UartUtil_Print(" *0.1 [uT]\n\rZ axis : 0x", gAllowToBlock_d);  	
  003f 450000   [3]             LDHX  @" *0.1 [uT]\012\015Z axis : 0x"
  176:  					break;
  0042 2003     [3]             BRA   L47 ;abs = 0047
  0044          L44:    
  177:  					default:
  178:  						UartUtil_Print("???????????????", gAllowToBlock_d);  		
  0044 450000   [3]             LDHX  @"???????????????"
  0047          L47:    
  0047 ac000081 [8]             CALL  MAG3110_dump:129
  179:  					break;
  180:  				}//switch(i){	 	
  181:  				
  182:  				tmp = MAG3110_CatchSensorData(i); 	
  004b 95       [2]             TSX   
  004c f6       [3]             LDA   ,X
  004d ac000000 [8]             CALL  MAG3110_CatchSensorData
  0051 9eff02   [5]             STHX  2,SP
  183:  				UartUtil_PrintHex((uint8_t *)&tmp, 2, 1); 	
  0054 95       [2]             TSX   
  0055 af01     [2]             AIX   #1
  0057 89       [2]             PSHX  
  0058 8b       [2]             PSHH  
  0059 ae02     [2]             LDX   #2
  005b a601     [2]             LDA   #1
  005d ac000000 [8]             CALL  UartUtil_PrintHex
  0061 a702     [2]             AIS   #2
  184:  				
  185:  				if(i==3){
  0063 95       [2]             TSX   
  0064 f6       [3]             LDA   ,X
  0065 a103     [2]             CMP   #3
  0067 2607     [3]             BNE   L70 ;abs = 0070
  186:  					UartUtil_Print(" *0.1 [uT]", gAllowToBlock_d); 					
  0069 450000   [3]             LDHX  @" *0.1 [uT]"
  006c ac000081 [8]             CALL  MAG3110_dump:129
  0070          L70:    
  0070 95       [2]             TSX   
  0071 7c       [4]             INC   ,X
  0072 f6       [3]             LDA   ,X
  0073 a104     [2]             CMP   #4
  0075 25ac     [3]             BCS   L23 ;abs = 0023
  187:  				}
  188:  				
  189:  			} //for(i=1; i<4; i++){
  190:  			
  191:  			
  192:  			UartUtil_Print("\n\r-----------------------------------------------\n\r", gAllowToBlock_d); 		
  0077 450000   [3]             LDHX  @"\012\015-----------------------------------------------\012\015"
  007a ac000081 [8]             CALL  MAG3110_dump:129
  007e          L7E:    
  193:  		
  194:  		}
  195:  	
  196:  }
  007e a705     [2]             AIS   #5
  0080 8d       [7]             RTC   
  0081          L81:    
  0081 a601     [2]             LDA   #1
  0083 ac000000 [8]             CALL  UartUtil_Print
  0087 8d       [7]             RTC   
  197:  	
  198:  
  199:  
  200:  
