*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /*****************************************************************************
    2:  * Implementation of the non-volatile storage module flash controller HAL.
    3:  *
    4:  * (c) Copyright 2006, Freescale, Inc. All rights reserved.
    5:  *
    6:  *
    7:  * No part of this document must be reproduced in any form - including copied,
    8:  * transcribed, printed or by any electronic means - without specific written
    9:  * permission from Freescale Semiconductor.
   10:  *
   11:  *****************************************************************************/
   12:  
   13:  /* Unsigned char is sometimes used in this module instead of uint8_t. The
   14:   * C standard guarantees that sizeof(char) == 1, and that this is the most
   15:   * basic unit of memory. That guarantee is sometimes valuable when working
   16:   * with memory hardware.
   17:   */
   18:  
   19:  /* Power supply variations can make both reading an writing flash unreliable,
   20:   * but there is no means available to this code to monitor power.
   21:   */
   22:  
   23:  #include "EmbeddedTypes.h"
   24:  #include "IrqControlLib.h"
   25:  
   26:  #include "NV_FlashHAL.h"
   27:  
   28:  /*****************************************************************************
   29:  ******************************************************************************
   30:  * Private macros
   31:  ******************************************************************************
   32:  *****************************************************************************/
   33:  #define mIllegalOpCode_c  0x82
   34:  /*****************************************************************************
   35:  ******************************************************************************
   36:  * Private prototypes
   37:  ******************************************************************************
   38:  *****************************************************************************/
   39:  #if gNvStorageIncluded_d
   40:  static void NvHalCopyCode(void);
   41:  static void NvHalClearCode(void);
   42:  /* Low level function to send a command to the flash hardware controller. */
   43:  /* Returns TRUE if the controller does not report an error. */
   44:  
   45:  /* Place it in NON_BANKED memory */
   46:  #ifdef MEMORY_MODEL_BANKED
   47:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
   48:  #else
   49:  #pragma CODE_SEG DEFAULT
   50:  #endif /* MEMORY_MODEL_BANKED */
   51:  #if gNvByteAtATimeProgramming_d == 1
   52:  static bool_t NvHalExecuteFlashCmd
   53:    (
   54:    uint8_t data,             /* IN: Data to be written */
   55:    void *pDestination,       /* IN: Address where data has to be written */
   56:    uint8_t flashCommand      /* IN: Flash command to be executed */
   57:    );
   58:  #else
   59:  static bool_t NvHalExecuteFlashCmd
   60:    (
   61:    uint8_t data,             /* IN: Data to be written */
   62:    void *pDestination,       /* IN: Address where data has to be written */
   63:    uint8_t flashCommand,     /* IN: Flash command to be executed */
   64:    uint8_t loopIndex
   65:    );
   66:  #endif
   67:  #pragma CODE_SEG DEFAULT
   68:  
   69:  #else
   70:  #define NvHalCopyCode()
   71:  #define NvHalClearCode()
   72:  #define NvHalExecuteFlashCmd(data, pDestination, flashCommand) FALSE
   73:  #endif /* gNvStorageIncluded_d */
   74:  /*****************************************************************************
   75:  ******************************************************************************
   76:  * Private type definitions
   77:  ******************************************************************************
   78:  *****************************************************************************/
   79:  
   80:  /*****************************************************************************
   81:  ******************************************************************************
   82:  * Private memory declarations
   83:  ******************************************************************************
   84:  *****************************************************************************/
   85:  
   86:  #if gNvStorageIncluded_d
   87:  #if !gNvByteAtATimeProgramming_d
   88:  #pragma DATA_SEG NV_SECTOR_BUFFER
   89:  /* The linker command file overlays this buffer with the end of the stack. */
   90:  /* The size of this buffer is determined by the flash controller hardware. */
   91:  static unsigned char maNvSectorBuffer[ 64 ];
   92:  #pragma DATA_SEG DEFAULT
   93:  #endif                                  /* #if !gNvByteAtATimeProgramming_d */
   94:  #endif /* gNvStorageIncluded_d */
   95:  
   96:  #if gNvStorageIncluded_d
   97:  #pragma DATA_SEG NV_CODE_BUFFER
   98:  /* The linker command file overlays this buffer with the end of the stack. */
   99:  /* ***WARNING*** Be careful with this one. A new version of the compiler, */
  100:  /* or changes to compiler options, could change the size needed. Check */
  101:  /* the link map to ensure that there's enough space. */
  102:  static unsigned char NvRAMCodeSpace[ mNvSizeof_NV_CODE_BUFFER_c ];
  103:  #pragma DATA_SEG DEFAULT
  104:  #endif /* gNvStorageIncluded_d */
  105:  
  106:  /* Define the NV storage pages. */
  107:  /* The addresses are defined in the project *.prm (linker command) file. */
  108:  /* To support one data set, there must be at least two pages available. */
  109:  #if gNvStorageIncluded_d
  110:  #pragma CONST_SEG NV_STORAGE_PAGE_0
  111:  NvRawPage_t const mNvPage0 = gNvmPageDefaultInit_c;
  112:  #pragma CONST_SEG DEFAULT
  113:  
  114:  #pragma CONST_SEG NV_STORAGE_PAGE_1
  115:  NvRawPage_t const mNvPage1 = gNvmPageDefaultInit_c;
  116:  #pragma CONST_SEG DEFAULT
  117:  
  118:  #if gNvNumberOfRawPages_c >= 3
  119:  #pragma CONST_SEG NV_STORAGE_PAGE_2
  120:  NvRawPage_t const mNvPage2 = gNvmPageDefaultInit_c;
  121:  #pragma CONST_SEG DEFAULT
  122:  #endif
  123:  
  124:  #if gNvNumberOfRawPages_c >= 4
  125:  #pragma CONST_SEG NV_STORAGE_PAGE_3
  126:  NvRawPage_t const mNvPage3 = gNvmPageDefaultInit_c;
  127:  #pragma CONST_SEG DEFAULT
  128:  #endif
  129:  #endif /* gNvStorageIncluded_d */
  130:  
  131:  /* Pointer to a utility function, copied to RAM, to execute flash commands. */
  132:  #if gNvStorageIncluded_d
  133:  pfNvHalExecuteFlashCmd_t pfNvHalExecuteFlashCmd;
  134:  #endif /* gNvStorageIncluded_d */
  135:  
  136:  /*****************************************************************************
  137:  ******************************************************************************
  138:  * Public memory definitions
  139:  ******************************************************************************
  140:  *****************************************************************************/
  141:  
  142:  /* Array of NV storage page addresses. */
  143:  /* *warning* There should be one more flash page than there are NV data sets. */
  144:  /* IMPORTANT: This table must be in ROM. The startup code (crt0 and */
  145:  /* PlatformInit) needs to search NV storage for a data structure that */
  146:  /* contains setup parameters for the CPU, and needs to know where the NV */
  147:  /* storage pages are located. */
  148:  #if gNvStorageIncluded_d
  149:  unsigned char *const maNvRawPageAddressTable[ gNvNumberOfRawPages_c ] = {
  150:    mNvPage0,
  151:    mNvPage1,
  152:  #if gNvNumberOfRawPages_c >= 3
  153:    mNvPage2,
  154:  #endif
  155:  #if gNvNumberOfRawPages_c >= 4
  156:    mNvPage3
  157:  #endif
  158:  };
  159:  #endif /* gNvStorageIncluded_d */
  160:  
  161:  /*****************************************************************************
  162:  ******************************************************************************
  163:  * Public functions
  164:  ******************************************************************************
  165:  *****************************************************************************/
  166:  
  167:  /* Erase a flash page, given a page address in the NVM and an erase command
  168:   * (a page or the whole flash).
  169:  
  170:   * The HCS08 flash controller can get confused if two successive writes are 
  171:   * done to the same location in flash without an erase between them.
  172:  
  173:   * Unfortunately, the HCS08 flash controller does not provide any completely
  174:   * reliable way to know if a page has been erased. An erased page will contain
  175:   * 0xFF in every byte. It is possible to write 0xFF to every byte of a page,
  176:   * which would be indistinguishable from an erased page, except that the
  177:   * flash controller would get confused if the same bytes were written to again.
  178:  
  179:   * Looking for all 0xFF's is the best that can be done. The NV storage code
  180:   * must never write such a page, and it is only possible to hope that nobody
  181:   * else does, either.
  182:  
  183:   * If this page looks like it has already been erased, don't erase it again.
  184:   * This costs time and code space, but saves erase cycles and extends the
  185:   * life of the flash memory.
  186:  
  187:   * If erasing fails after retries, there isn't anything that can be done
  188:   * about it. An error return would not be useful.
  189:   */
  190:  #if gNvStorageIncluded_d
  191:  void NvHalErasePage
  192:  (
  193:  	unsigned char const *pPageAddress,
  194:  	uint8_t eraseCommand
  195:  )
  196:  {
  197:  	uint8_t ccr;
  198:  	NvSize_t i;
  199:  	index_t retries = mNvFlashCmdRetries_c;
  200:  
  201:  	/* Erase the complete page starting in the given address */
  202:  	for ( i = 0; i < gNvRawPageSize_c; ++i )
  203:  	{
  204:  		/* If the info is equal to 0xFF it is possible that the page has been
  205:  			erased before, to avoid confusing the NV driver lets no write the same in
  206:  			the same byte twice. */
  207:  		if ( pPageAddress[ i ] == 0xFF )
  208:  			continue;
  209:  
  210:  		/* Avoid Iterrumptions */
  211:  		IrqControlLib_BackupIrqStatus( ccr );
  212:  		IrqControlLib_DisableAllIrqs();
  213:  
  214:  		/* Copy to RAM the function that work directly to flash. */
  215:  		NvHalCopyCode();
  216:  
  217:  		/* Keep trying a fixed amount of times or until success. */
  218:  		while ( retries-- )
  219:  		{
  220:  			/* Erase the page. */
  221:  #if gNvByteAtATimeProgramming_d
  222:  			if ( pfNvHalExecuteFlashCmd( 0, ( void * ) pPageAddress, eraseCommand ))
  223:  #else
  224:  			if ( pfNvHalExecuteFlashCmd( 0, ( void * ) pPageAddress, eraseCommand, sizeof( maNvSectorBuffer)))
  225:  #endif
  226:  				break;
  227:  		}/* while ( retries-- ) */
  228:  		NvHalClearCode();
  229:  
  230:  		/* Enalbe interruptions again */
  231:  		IrqControlLib_RestoreIrqStatus( ccr );
  232:  		return;
  233:  
  234:  	}/* for ( i = 0; i < gNvRawPageSize_c; ++i ) */
  235:  }/* NvHalErasePage() */
  236:  #endif /* gNvStorageIncluded_d */
  237:  
  238:  /*****************************************************************************/
  239:  #if gNvStorageIncluded_d
  240:  void NvHalInit
  241:  (
  242:  	void
  243:  )
  244:  {
  245:  	/* Initialize the flash controller. */
  246:  	FSTAT = FPVIOL | FACCERR | FSECERR;  /* Clear errors. */
  247:  #ifndef PROCESSOR_MC1323X
  248:  	FCDIV = ( 0x40 | (( uint8_t )( gHardwareParameters.Bus_Frequency_In_MHz / 2 ) + 2 ));
  249:  #endif
  250:  	FCNFG = FCNFGValue_c;
  251:  }/* NvHalInit() */
  252:  #endif /* gNvStorageIncluded_d */
  253:  
  254:  /*****************************************************************************/
  255:  /* Read data from a specified offset within a given address of a page of NV storage.
  256:  
  257:   * IN: The address of the NVM page to read.
  258:   * IN: The offset in the page where to star reading the data.
  259:   * IN: The pointer in memory where to copy the data.
  260:   * IN: The amount of bytes to read.
  261:  
  262:   * OUT: NONE.
  263:  */
  264:  #if gNvStorageIncluded_d
  265:  void NvHalRead
  266:  (
  267:  	unsigned char const *pPageAddress,  /* IN: The address of the NVM page to read. */
  268:  	NvSize_t srcPageOffset,             /* IN: The offset in the page where to star
  269:  	                                           reading the data. */
  270:  	unsigned char *pDst,                /* IN: The pointer in memory where to copy
  271:  	                                           the data. */
  272:  	NvSize_t dstLen                     /* IN: The amount of bytes to read. */
  273:  )
  274:  {
  275:  	/* Point in to a specific address of the given page address. */
  276:  	unsigned char *pSrc = (unsigned char *)(pPageAddress + srcPageOffset);
  277:  
  278:  	/* FLib_MemCpy() can't handle a 16 bit size. */
  279:  	while ( dstLen-- )
  280:  	{
  281:  		/* Copy one byte a the time of the given byte Length. */
  282:  		*pDst++ = *pSrc++;
  283:  	}
  284:  }/* NvHalRead() */
  285:  #endif /* gNvStorageIncluded_d */
  286:  /****************************************************************************/
  287:  
  288:  /* Write data to a specified offset within a given address of a NV storage page.
  289:   * The caller must insure that a full page of data is written, across more than
  290:   * one call to NvWrite() if necessary.
  291:   * Since this routine only writes partial pages, it does not do retries. Return
  292:   * TRUE if the write succeeded; FALSE if the flash controller reported an error.
  293:  
  294:   * IN: The address of the memory page where to write.
  295:   * IN: The offset inside the given page address.
  296:   * IN: The address from where the data will be copied.
  297:   * IN: The amount of byte to copy in.
  298:  
  299:   * OUT: TRUE if succes and FALSE in any other case.
  300:  */
  301:  #if gNvStorageIncluded_d
  302:  bool_t NvHalWrite
  303:  (
  304:  	unsigned char const *pPageAddress,
  305:  	NvSize_t dstPageOffset,
  306:  	unsigned char *pSource,
  307:  	NvSize_t sourceLen
  308:  )
  309:  {
  310:  	uint8_t ccr;
  311:  	unsigned char *pDst;
  312:  	bool_t status;
  313:  #if !gNvByteAtATimeProgramming_d
  314:  	/* This variable is only used in block-mode writing. */
  315:  	index_t sectorOffset;
  316:  #endif
  317:  
  318:  	/* Status returned for the write action. */
  319:  	status = TRUE;
  320:  
  321:  #if gNvByteAtATimeProgramming_d
  322:  	/* Using the Byte-at-the-time mode the pointer goes directly to the offset in
  323:  		the NVM page. */
  324:  	pDst = pPageAddress + dstPageOffset;
  325:  
  326:  	/* Unable Interrumptions. */
  327:  	IrqControlLib_BackupIrqStatus( ccr );
  328:  	IrqControlLib_DisableAllIrqs();
  329:  
  330:  	/* Copy the function into RAM, so it canbe executed form there. */
  331:  	NvHalCopyCode();
  332:  
  333:  	while ( status && sourceLen-- )
  334:  	{
  335:  		/* Copy one byte at the time into NVM. */
  336:  		status = pfNvHalExecuteFlashCmd( *pSource++, ( void * ) pDst++, mNvFlashByteProgramCmd_c );
  337:  	}
  338:  	
  339:    NvHalClearCode();
  340:  	/* Return the previously backup IRQ status for normal execution. */
  341:  	IrqControlLib_RestoreIrqStatus( ccr );
  342:  
  343:  #else  /* Use the block mode instead. */
  344:  	/* Move a byte to the static sector buffer. If the buffer is now full, send
  345:  		it's contents to the controller command function. Map the offset to the
  346:  		sector buffer. */
  347:  	sectorOffset = ( index_t ) ( dstPageOffset & ( sizeof( maNvSectorBuffer ) - 1 ));
  348:  
  349:  	/* While we haven't done the full set of bytes keep going. */
  350:  	while ( status && sourceLen-- )
  351:  	{
  352:  		/* Fill up the logical sector buffer. */
  353:  		maNvSectorBuffer[ sectorOffset++ ] = *pSource++;
  354:  
  355:  		/* If the logical sector buffer is full, write it into NVM. */
  356:  		if ( sectorOffset == sizeof( maNvSectorBuffer ))
  357:  		{
  358:  			/* The given offset of the logical sector buffer needs to be maped into
  359:  				the NVM physical offset.*/
  360:  			pDst = (unsigned char *)( pPageAddress + (dstPageOffset & ~( sizeof( maNvSectorBuffer ) -1 )) );
  361:  
  362:  			/* Backup and disable the interruptions. */
  363:  			IrqControlLib_BackupIrqStatus( ccr );
  364:  			IrqControlLib_DisableAllIrqs();
  365:  
  366:  			/* Copy the routine into RAM to execute it form there instead that NVM. */
  367:  			NvHalCopyCode();
  368:  
  369:  			/* Execute the NVM command and catch the status of it */
  370:  			status = pfNvHalExecuteFlashCmd( maNvSectorBuffer[ 0 ], ( void * ) pDst, mNvFlashBurstProgramCmd_c, 0 );
  371:  			
  372:        NvHalClearCode();
  373:  			/* Restore previous IRQ information back to normal. */
  374:  			IrqControlLib_RestoreIrqStatus( ccr );
  375:  
  376:  			/* Set the new offset in the physical NVM page for the next write. */
  377:  			dstPageOffset += sizeof( maNvSectorBuffer );
  378:  
  379:  			/* We already write into NVM, so the next time the logical sector buffer
  380:  				must be filled form address Zero and on. */
  381:  			sectorOffset = 0;
  382:  		}/* if ( sectorOffset == ... */
  383:  	}/* while ( status && sourceLen-- ) */
  384:  #endif
  385:  
  386:  	return status;
  387:  }/* NvHalWrite() */
  388:  #endif /* gNvStorageIncluded_d */
  389:  
  390:  /****************************************************************************/
  391:  
  392:  /* Write data to a specified offset within a given address of a NV storage page.
  393:   * Return
  394:   * TRUE if the write succeeded; FALSE if the flash controller reported an error.
  395:  
  396:   * IN: The address of the memory page where to write.
  397:   * IN: The offset inside the given page address.
  398:   * IN: The address from where the data will be copied.
  399:   * IN: The amount of byte to copy in.
  400:  
  401:   * OUT: TRUE if succes and FALSE in any other case.
  402:  */
  403:  #if (gNvStorageIncluded_d && gNvMultiStorageIncluded_d )
  404:  bool_t NvHalUnbufferedWrite
  405:  (
  406:  	uint8_t const *pPageAddress,
  407:  	NvSize_t dstPageOffset,
  408:  	uint8_t *pSource,
  409:  	NvSize_t sourceLen
  410:  )
  411:  {
  412:  	uint8_t ccr;
  413:  	uint8_t const *pDst;
  414:  	bool_t status;
  415:  #if !gNvByteAtATimeProgramming_d
  416:  	/* This variable is only used in block-mode writing. */
  417:  	index_t sectorOffset;
  418:  #endif
  419:  
  420:  	/* Status returned for the write action. */
  421:  	status = TRUE;
  422:  
  423:  #if gNvByteAtATimeProgramming_d
  424:  	/* Using the Byte-at-the-time mode the pointer goes directly to the offset in
  425:  		the NVM page. */
  426:  	pDst = pPageAddress + dstPageOffset;
  427:  
  428:  	/* Unable Interrumptions. */
  429:  	IrqControlLib_BackupIrqStatus( ccr );
  430:  	IrqControlLib_DisableAllIrqs();
  431:  
  432:  	/* Copy the function into RAM, so it canbe executed form there. */
  433:  	NvHalCopyCode();
  434:  
  435:  	while ( status && sourceLen-- )
  436:  	{
  437:  		/* Copy one byte at the time into NVM. */
  438:  		status = pfNvHalExecuteFlashCmd( *pSource++, ( void * ) pDst++, mNvFlashByteProgramCmd_c );
  439:  	}
  440:  	
  441:    NvHalClearCode();
  442:  	/* Return the previously backup IRQ status for normal execution. */
  443:  	IrqControlLib_RestoreIrqStatus( ccr );
  444:  
  445:  #else  /* Use the block mode instead. */
  446:  
  447:  	pDst = pPageAddress + dstPageOffset;	
  448:  	sectorOffset = ( index_t ) ( sizeof( maNvSectorBuffer ));
  449:  	pSource += ((sourceLen > sizeof( maNvSectorBuffer )) ? sizeof( maNvSectorBuffer ):sourceLen )  - 1;
  450:  
  451:  	/* While we haven't done the full set of bytes keep going. */
  452:  	while ( status && sourceLen-- ) 
  453:  	{
  454:  	  maNvSectorBuffer[--sectorOffset ] = *pSource--;
  455:  	  if((sourceLen == 0) || (sectorOffset == 0)) 
  456:  	   {
  457:  	   	IrqControlLib_BackupIrqStatus( ccr );
  458:  			IrqControlLib_DisableAllIrqs();
  459:  
  460:  			/* Copy the routine into RAM to execute it form there instead that NVM. */
  461:  			NvHalCopyCode();
  462:  
  463:  			/* Execute the NVM command and catch the status of it */
  464:  			status = pfNvHalExecuteFlashCmd( maNvSectorBuffer[ sectorOffset ], ( void * ) pDst, mNvFlashBurstProgramCmd_c, sectorOffset );
  465:  			
  466:        NvHalClearCode();
  467:  			/* Restore previous IRQ information back to normal. */
  468:  			IrqControlLib_RestoreIrqStatus( ccr );
  469:        if(sourceLen) 
  470:          {
  471:           pSource +=  sizeof( maNvSectorBuffer ) + 1;
  472:           pSource += (sourceLen > sizeof( maNvSectorBuffer ) ? sizeof( maNvSectorBuffer ):sourceLen )  - 1;
  473:           sectorOffset = ( index_t ) ( sizeof( maNvSectorBuffer ));
  474:           pDst += sizeof( maNvSectorBuffer );
  475:          }
  476:  	   }
  477:  	}
  478:  	
  479:  	
  480:  #endif
  481:  
  482:  	return status;
  483:  }/* NvHalWrite() */
  484:  #endif /* (gNvStorageIncluded_d && gNvMultiStorageIncluded_d ) */
  485:  
  486:  /****************************************************************************/
  487:  
  488:  /* WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
  489:   *
  490:   * There is no generally supported way to take the size of a function.
  491:   * Some compilers support sizeof() a dereferenced function pointer, but
  492:   * some don't. The CodeWarrior v5.1 HCS08 compiler does not.
  493:   *
  494:   * The NvHalExecuteFlashCmd() function is copied from code space to RAM.
  495:   * At least enough RAM space must be reserved for it in the linker command
  496:   * file (*.prm for HCS08 CodeWarrior v5.1). The #define below matches the
  497:   * starting and ending RAM addresses in the prm file.
  498:   *
  499:   * If a different compiler is used, or the compiler version changes, or
  500:   * the compiler options change, there may not be enough RAM space, which
  501:   * may lead to some hard-to-find bugs.
  502:   *
  503:   * WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
  504:   */
  505:  
  506:  #if gNvStorageIncluded_d
  507:  static void NvHalCopyCode(void)
  508:  {
  509:  	index_t i;
  510:  	unsigned char *pCodeInROM;
  511:  
  512:  #if gNvDebug_d
  513:  /*
  514:  	The flash HAL uses a data buffer and a code area mapped by the linker
  515:  	command file to overlay part of the stack. Check that the stack is
  516:  	short enough to leave space for these areas.
  517:  	Compilers are not constrained to allocate frame variables in declaration
  518:  	order, so it isn't knowable which local variable is further down the
  519:  	stack. The compiler may also push temporaries onto the stack. Make sure
  520:  	that there's some extra space to allow for this.
  521:  */
  522:  	if ( NvRAMCodeSpace + sizeof( NvRAMCodeSpace) + 32 >= &i )
  523:  	{
  524:  		volatile bool_t waitForever = TRUE;
  525:  		while ( waitForever );
  526:  	}
  527:  #endif
  528:  
  529:  /* Copy the function code into RAM, avoiding the default convetion. */
  530:  #pragma MESSAGE DISABLE C1805  /* Non standard conversion used */
  531:  	/* Set a function pointer into the RAM segment. */
  532:  	pfNvHalExecuteFlashCmd = ( pfNvHalExecuteFlashCmd_t ) NvRAMCodeSpace;
  533:  
  534:  	/* Use byte at the time copy porcedure, so point into the place where the
  535:  		function will be copied. */
  536:  	pCodeInROM = ( uint8_t * ) NvHalExecuteFlashCmd;
  537:  
  538:  	/* One byte at the time starting copying the function into RAM */
  539:  	for ( i = 0; i < mNvSizeof_NV_CODE_BUFFER_c; ++i )
  540:  	{
  541:  		NvRAMCodeSpace[ i ] = pCodeInROM[ i ];
  542:  	}
  543:  }
  544:  #endif /* gNvStorageIncluded_d */
  545:  
  546:  /****************************************************************************/
  547:  
  548:  
  549:  #if gNvStorageIncluded_d
  550:  static void NvHalClearCode(void)
  551:  {
  552:  	index_t i;
  553:  	for ( i = 0; i < mNvSizeof_NV_CODE_BUFFER_c; ++i )
  554:  	{
  555:  		NvRAMCodeSpace[ i ] = mIllegalOpCode_c;
  556:  	}
  557:  }
  558:  #endif /* gNvStorageIncluded_d */
  559:  
  560:  
  561:  
  562:  /****************************************************************************
  563:  * Giving a command to the flash controller may disturb read access to flash
  564:  * addresses. This function is copied into RAM so it can run even if flash is
  565:  * not accessible.
  566:  *
  567:  * Retries here are not a good idea, both because it would add mode code that
  568:  * would reside in scarce RAM, and because some commands cannot be retried
  569:  * without doing something else first. In particular, no byte of flash should
  570:  * be written more than once without an erase between the write commands.
  571:  *
  572:  * This function should only be called while interrupts are disabled.
  573:  *
  574:  * Returns TRUE  if the command worked;
  575:  *         FALSE if the flash controller reported an error.
  576:  *****************************************************************************/
  577:  
  578:  #if gNvStorageIncluded_d
  579:  
  580:  /* Place it in NON_BANKED memory */
  581:  #ifdef MEMORY_MODEL_BANKED
  582:  #pragma CODE_SEG __NEAR_SEG NON_BANKED
  583:  #else
  584:  #pragma CODE_SEG DEFAULT
  585:  #endif /* MEMORY_MODEL_BANKED */
  586:  
  587:  #if gNvByteAtATimeProgramming_d
  588:  /* This version uses byte-at-a-time programming. */
  589:  static bool_t NvHalExecuteFlashCmd
  590:  (
  591:  	uint8_t data,             /* IN: Data to be written */
  592:  	void *pDestination,       /* IN: Address where data has to be written */
  593:  	uint8_t flashCommand      /* IN: Flash command to be executed */
  594:  )
  595:  {
  596:  	/* Wait for flash to be ready for a command. */
  597:  	while ( !( FSTAT & FCCF ))
  598:  	{/* Do nothing for a while. */}
  599:  
  600:  	/* Clear all errors. */
  601:  	FSTAT = FPVIOL | FACCERR | FSECERR;
  602:  
  603:  	/* Write data to flash. This is required by the flash controller, even
  604:  		for commands that don't modify data. */
  605:  	*( unsigned char * ) pDestination = data;
  606:  
  607:  	/* Load command register with flash command. */
  608:  	FCMD = flashCommand;
  609:  
  610:  	/* Launch the command. */
  611:  	FSTAT = FCBEF;
  612:  
  613:  	/* Wait 4 bus cycles. */
  614:  	__asm nop;
  615:  	__asm nop;
  616:  	__asm nop;
  617:  	__asm nop;
  618:  
  619:  	/* Wait for the command to complete. */
  620:  	while ( !( FSTAT & FCCF ))
  621:  	{/* Do nothing for a while. */}
  622:  
  623:  	if ( FSTAT & ( FPVIOL | FACCERR | FSECERR))
  624:  	{
  625:  		return FALSE;  /* An error bit is set. */
  626:  	}
  627:  
  628:  	return TRUE;
  629:  }/* NvHalExecuteFlashCmd() */
  630:  
  631:  #else  /* #if gNvByteAtATimeProgramming_d */
  632:  
  633:  /* This version uses burst programming. */
  634:  
  635:  /* Code space is vital in this routine. Speed is also important; the flash
  636:   * controller won't wait forever for the next byte of a burst. Thus, burst
  637:   * programming is handled with a loop here, but in an odd way. To save
  638:   * space, the caller must provide the initial value of the loop index.
  639:   * To use a flash command other than burst mode programming, call with the
  640:   * loop index >= sizeof( maNvSectorBuffer ). The loop will end after the
  641:   * first time through.
  642:   */
  643:  static bool_t NvHalExecuteFlashCmd
  644:  (
  645:  	uint8_t data,          /* IN: Data to be written */
  646:  	void *pDestination,    /* IN: Address where data has to be written */
  647:  	uint8_t flashCommand,  /* IN: Flash command to be executed */
  648:  	uint8_t loopIndex      /* IN: Initial loop index. */
  649:  )
  650:  {
  651:  	/* Wait for flash to be ready for a command. */
  652:  	while ( !( FSTAT & FCCF ))
  653:  	{/* Do nothing for a while. */}
  654:  
  655:  	/* Clear all errors. */
  656:  	FSTAT = FPVIOL | FACCERR | FSECERR;
  657:  
  658:  	for (;/* Do it until a break point is reached. */;)
  659:  	{
  660:  		/* Write data to flash. This is required by the flash controller, even */
  661:  		/* for commands that don't modify data. */
  662:  		*( unsigned char * ) pDestination = data;
  663:  
  664:  		/* Load command register with flash command. */
  665:  		FCMD = flashCommand;
  666:  
  667:  		/* Launch the command. */
  668:  		FSTAT = FCBEF;
  669:  
  670:  		/* Get the next byte form the logical sector buffer. */
  671:  		data = maNvSectorBuffer[ ++loopIndex ];
  672:  		if ( loopIndex >= sizeof( maNvSectorBuffer ))
  673:  		{
  674:  			/* If we are done get out */
  675:  			break;
  676:  		}
  677:  
  678:  		/* Wait for the command buffer to clear. */
  679:  		while ( !( FSTAT & FCBEF ))
  680:  		{/* Do nothing for a while. */}
  681:  
  682:  	}/* for (;;) */
  683:  
  684:  	/* Wait for the command to complete. */
  685:  	while ( !( FSTAT & FCCF ))
  686:  	{/* Do nothing for a while. */}
  687:  
  688:  	if ( FSTAT & ( FPVIOL | FACCERR | FSECERR))
  689:  	{
  690:  		/* If somethig got wrong, the set and return error. */
  691:  		return FALSE;  /* An error bit is set. */
  692:  	}
  693:  
  694:  	/* We are totally done return success. */
  695:  	return TRUE;
  696:  }/* NvHalExecuteFlashCmd() */
  697:  #endif  /* #if !gNvByteAtATimeProgramming_d else */
  698:  
  699:  #pragma CODE_SEG DEFAULT
  700:  #endif /* gNvStorageIncluded_d */
  701:  
  702:  /* EOF */
  703:  
