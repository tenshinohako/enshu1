*** EVALUATION ***
ANSI-C/cC++ Compiler for HC08 V-5.0.41 Build 12319, Nov 15 2012

    1:  /************************************************************************************
    2:  * Includes the UART Utils.
    3:  *
    4:  * (c) Copyright 2007, Freescale, Inc. All rights reserved.
    5:  *
    6:  * No part of this document must be reproduced in any form - including copied,
    7:  * transcribed, printed or by any electronic means - without specific written
    8:  * permission from Freescale Semiconductor.
    9:  *
   10:  ************************************************************************************/
   11:  #include "EmbeddedTypes.h"
   12:  #include "UartUtil.h"
   13:  #include "UART_Interface.h"
   14:  #include "Uart.h"
   15:  
   16:  #ifndef mSCIxS1_TDRE_c
   17:  #define mSCIxS1_TDRE_c      0x80        /* Transmit Data Register Empty Flag. */
   18:  #endif
   19:  
   20:  /******************************************************************************/
   21:  /******************************************************************************/
   22:  
   23:  /************************************************************************************
   24:  *************************************************************************************
   25:  * Private macros
   26:  *************************************************************************************
   27:  ************************************************************************************/
   28:  
   29:  /************************************************************************************
   30:  *************************************************************************************
   31:  * Private prototypes
   32:  *************************************************************************************/
   33:  #ifdef MEMORY_MODEL_BANKED
   34:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
   35:  void UartUtil_TxCallbackPaged(unsigned char const *pBuf);
   36:  #pragma CODE_SEG DEFAULT
   37:  #endif
   38:  /************************************************************************************
   39:  *************************************************************************************
   40:  * Private type definitions
   41:  *************************************************************************************
   42:  ************************************************************************************/
   43:  
   44:  /************************************************************************************
   45:  *************************************************************************************
   46:  * Public memory declarations
   47:  *************************************************************************************
   48:  ************************************************************************************/
   49:   
   50:  /************************************************************************************
   51:  *************************************************************************************
   52:  * Private memory declarations
   53:  *************************************************************************************
   54:  ************************************************************************************/
   55:  
   56:  /************************************************************************************
   57:  *************************************************************************************
   58:  * Public functions
   59:  *************************************************************************************
   60:  ************************************************************************************/
   61:  
   62:  #if gUart1_Enabled_d || gUart2_Enabled_d
   63:  
   64:  void UartUtil_TxCallback(unsigned char const *pBuf)
   65:  {
   66:    #ifdef MEMORY_MODEL_BANKED
   67:      UartUtil_TxCallbackPaged(pBuf);
  0000 ac000000 [8]             CALL  UartUtil_TxCallbackPaged
   68:    #else
   69:      (void) pBuf;
   70:    #endif
   71:  }
  0004 8d       [7]             RTC   
   72:  
   73:  /************************************************************************************/
   74:  
   75:  #ifdef MEMORY_MODEL_BANKED
   76:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
   77:  void UartUtil_TxCallbackPaged(unsigned char const *pBuf)
   78:  {
   79:    (void) pBuf;
   80:  }
  0000 8d       [7]             RTC   
   81:  #pragma CODE_SEG DEFAULT
   82:  #endif
   83:  
   84:  /************************************************************************************/
   85:  
   86:  #ifdef MEMORY_MODEL_BANKED
   87:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
   88:  #endif
   89:  void UartUtil_Tx(uint8_t * pData, uint8_t length)
   90:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 87       [2]             PSHA  
  0003          L3:     
   91:    /* wait until module can insert message into uart buffers */
   92:    while(!UartX_Transmit((unsigned char const*)pData,(index_t)length,UartUtil_TxCallback));
  0003 9efe02   [5]             LDHX  2,SP
  0006 89       [2]             PSHX  
  0007 8b       [2]             PSHH  
  0008 95       [2]             TSX   
  0009 e602     [3]             LDA   2,X
  000b 87       [2]             PSHA  
  000c 450000   [3]             LDHX  @UartUtil_TxCallback
  000f 89       [2]             PSHX  
  0010 8b       [2]             PSHH  
  0011 a600     [2]             LDA   @UartUtil_TxCallback:PAGE
  0013 87       [2]             PSHA  
  0014 ac000000 [8]             CALL  Uart1_Transmit
  0018 a706     [2]             AIS   #6
  001a 4d       [1]             TSTA  
  001b 27e6     [3]             BEQ   L3 ;abs = 0003
  001d          L1D:    
   93:    /* wait until tx complete */
   94:    while (UartX_IsTxActive());      
  001d ac000000 [8]             CALL  Uart1_IsTxActive
  0021 4d       [1]             TSTA  
  0022 26f9     [3]             BNE   L1D ;abs = 001d
   95:  }
  0024 a703     [2]             AIS   #3
  0026 8d       [7]             RTC   
   96:  #ifdef MEMORY_MODEL_BANKED
   97:  #pragma CODE_SEG DEFAULT
   98:  #endif
   99:  
  100:  /************************************************************************************/
  101:  
  102:  #ifdef MEMORY_MODEL_BANKED
  103:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  104:  #endif
  105:  void UartUtil_Print(uint8_t* pString, uartUtilBlock_t allowToBlock)
  106:  {
  0000 89       [2]             PSHX  
  0001 8b       [2]             PSHH  
  0002 87       [2]             PSHA  
  0003 a7fc     [2]             AIS   #-4
  107:    uint16_t i = 0;
  0005 9e6f02   [6]             CLR   2,SP
  0008 9e6f01   [6]             CLR   1,SP
  108:    uint8_t*  pTmpString = pString ;
  000b 9eff03   [5]             STHX  3,SP
  109:    
  110:    while (*pTmpString != '\0') 
  000e 200c     [3]             BRA   L1C ;abs = 001c
  0010          L10:    
  111:    {
  112:      pTmpString++;
  0010 95       [2]             TSX   
  0011 6c03     [5]             INC   3,X
  0013 2602     [3]             BNE   L17 ;abs = 0017
  0015 6c02     [5]             INC   2,X
  0017          L17:    
  113:      i++;
  0017 6c01     [5]             INC   1,X
  0019 2601     [3]             BNE   L1C ;abs = 001c
  001b 7c       [4]             INC   ,X
  001c          L1C:    
  001c 9efe03   [5]             LDHX  3,SP
  001f 7d       [3]             TST   ,X
  0020 26ee     [3]             BNE   L10 ;abs = 0010
  114:    } 
  115:    if(allowToBlock)
  0022 95       [2]             TSX   
  0023 6d04     [4]             TST   4,X
  0025 2710     [3]             BEQ   L37 ;abs = 0037
  0027          L27:    
  0027 ac00003e [8]             CALL  UartUtil_Print:62
  116:    {
  117:      /* wait until module can insert message into uart buffers */
  118:      while(!UartX_Transmit((unsigned char const*)pString,(index_t)i,UartUtil_TxCallback));
  002b 4d       [1]             TSTA  
  002c 27f9     [3]             BEQ   L27 ;abs = 0027
  002e          L2E:    
  119:      /* wait until tx complete */
  120:      while (UartX_IsTxActive());  
  002e ac000000 [8]             CALL  Uart1_IsTxActive
  0032 4d       [1]             TSTA  
  0033 2706     [3]             BEQ   L3B ;abs = 003b
  0035 20f7     [3]             BRA   L2E ;abs = 002e
  0037          L37:    
  0037 ac00003e [8]             CALL  UartUtil_Print:62
  003b          L3B:    
  121:    }
  122:    else
  123:    {
  124:      (void)UartX_Transmit((unsigned char const*)pString,(index_t)i,UartUtil_TxCallback);
  125:    }
  126:  }
  003b a707     [2]             AIS   #7
  003d 8d       [7]             RTC   
  003e          L3E:    
  003e 9efe09   [5]             LDHX  9,SP
  0041 89       [2]             PSHX  
  0042 8b       [2]             PSHH  
  0043 95       [2]             TSX   
  0044 e606     [3]             LDA   6,X
  0046 87       [2]             PSHA  
  0047 450000   [3]             LDHX  @UartUtil_TxCallback
  004a 89       [2]             PSHX  
  004b 8b       [2]             PSHH  
  004c a600     [2]             LDA   @UartUtil_TxCallback:PAGE
  004e 87       [2]             PSHA  
  004f ac000000 [8]             CALL  Uart1_Transmit
  0053 a706     [2]             AIS   #6
  0055 8d       [7]             RTC   
  127:  #ifdef MEMORY_MODEL_BANKED
  128:  #pragma CODE_SEG DEFAULT
  129:  #endif
  130:  
  131:  /************************************************************************************/
  132:  
  133:  /* Trasform from hex to ascii */
  134:  #ifdef MEMORY_MODEL_BANKED
  135:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  136:  #endif
  137:  static uint8_t HexToAscii(uint8_t hex)
  138:  {
  139:    hex &= 0x0F;
  0000 a40f     [2]             AND   #15
  140:    return hex + ((hex <= 9) ? '0' : ('A'-10));
  0002 a109     [2]             CMP   #9
  0004 2303     [3]             BLS   L9 ;abs = 0009
  0006 ae37     [2]             LDX   #55
  0008 65       [3]             SKIP2 LB ;abs = 000b
  0009          L9:     
  0009 ae30     [2]             LDX   #48
  000b          LB:     
  000b 89       [2]             PSHX  
  000c 95       [2]             TSX   
  000d fb       [3]             ADD   ,X
  000e 8a       [3]             PULH  
  141:  }
  000f 8d       [7]             RTC   
  142:  #ifdef MEMORY_MODEL_BANKED
  143:  #pragma CODE_SEG DEFAULT
  144:  #endif
  145:  
  146:  /************************************************************************************/
  147:  
  148:  #ifdef MEMORY_MODEL_BANKED
  149:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  150:  #endif
  151:  void UartUtil_PrintHex(uint8_t *hex, uint8_t len, uint8_t flags)
  152:  {
  0000 89       [2]             PSHX  
  0001 87       [2]             PSHA  
  0002 a7f9     [2]             AIS   #-7
  153:    uint8_t i=0; 
  0004 9e6f02   [6]             CLR   2,SP
  154:    uint8_t hexString[5]; /* 2 bytes  - hexadecimal display 
  155:                             1 byte   - separator ( comma, space)
  156:                             2 bytes  - new line (\n\r)  */
  157:    
  158:    if(! (flags & gPrtHexBigEndian_c))
  0007 a501     [2]             BIT   #1
  0009 260f     [3]             BNE   L1A ;abs = 001a
  159:     {
  160:      hex = hex + (len-1);
  000b 8c       [1]             CLRH  
  000c afff     [2]             AIX   #-1
  000e 9f       [1]             TXA   
  000f 8b       [2]             PSHH  
  0010 95       [2]             TSX   
  0011 eb0e     [3]             ADD   14,X
  0013 e70e     [3]             STA   14,X
  0015 86       [3]             PULA  
  0016 e90d     [3]             ADC   13,X
  0018 e70d     [3]             STA   13,X
  001a          L1A:    
  001a cc00c7   [4]             JMP   LC7 ;abs = 00c7
  001d          L1D:    
  161:     }
  162:     
  163:    while(len)
  164:    {
  165:      /* wait until previous hex print transmission is over */  
  166:      while (UartX_IsTxActive());  
  001d ac000000 [8]             CALL  Uart1_IsTxActive
  0021 4d       [1]             TSTA  
  0022          L22:    
  0022 26f9     [3]             BNE   L1D ;abs = 001d
  167:        
  168:      /* start preparing the print of a new byte */
  169:      i=0;
  170:      hexString[i++] = HexToAscii((*hex)>>4);
  0024 9efe0d   [5]             LDHX  13,SP
  0027 f6       [3]             LDA   ,X
  0028 62       [1]             NSA   
  0029 a40f     [2]             AND   #15
  002b ac000000 [8]             CALL  HexToAscii
  002f 95       [2]             TSX   
  0030 e702     [3]             STA   2,X
  171:      hexString[i++] = HexToAscii( *hex);
  0032 a602     [2]             LDA   #2
  0034 e701     [3]             STA   1,X
  0036 9efe0d   [5]             LDHX  13,SP
  0039 f6       [3]             LDA   ,X
  003a ac000000 [8]             CALL  HexToAscii
  003e 95       [2]             TSX   
  003f e703     [3]             STA   3,X
  172:  
  173:      if(flags & gPrtHexCommas_c)
  0041 e607     [3]             LDA   7,X
  0043 a504     [2]             BIT   #4
  0045 2708     [3]             BEQ   L4F ;abs = 004f
  174:       {
  175:        hexString[i++] = ',';
  0047 a603     [2]             LDA   #3
  0049 e701     [3]             STA   1,X
  004b a62c     [2]             LDA   #44
  004d e704     [3]             STA   4,X
  004f          L4F:    
  176:       }
  177:      if(flags & gPrtHexSpaces_c) 
  004f e607     [3]             LDA   7,X
  0051 a508     [2]             BIT   #8
  0053 270f     [3]             BEQ   L64 ;abs = 0064
  178:       { 
  179:        hexString[i++] = ' ';
  0055 e601     [3]             LDA   1,X
  0057 87       [2]             PSHA  
  0058 4c       [1]             INCA  
  0059 e701     [3]             STA   1,X
  005b 95       [2]             TSX   
  005c ac0000d9 [8]             CALL  UartUtil_PrintHex:217
  0060 88       [3]             PULX  
  0061 a620     [2]             LDA   #32
  0063 f7       [2]             STA   ,X
  0064          L64:    
  180:       }
  181:      hex = hex + (flags & gPrtHexBigEndian_c ? 1 : -1);
  0064 95       [2]             TSX   
  0065 e607     [3]             LDA   7,X
  0067 a501     [2]             BIT   #1
  0069 2605     [3]             BNE   L70 ;abs = 0070
  006b 45ffff   [3]             LDHX  #-1
  006e 2003     [3]             BRA   L73 ;abs = 0073
  0070          L70:    
  0070 ae01     [2]             LDX   #1
  0072 8c       [1]             CLRH  
  0073          L73:    
  0073 9f       [1]             TXA   
  0074 87       [2]             PSHA  
  0075 8b       [2]             PSHH  
  0076 86       [3]             PULA  
  0077 95       [2]             TSX   
  0078 e701     [3]             STA   1,X
  007a 86       [3]             PULA  
  007b 95       [2]             TSX   
  007c eb0d     [3]             ADD   13,X
  007e e70d     [3]             STA   13,X
  0080 f6       [3]             LDA   ,X
  0081 e90c     [3]             ADC   12,X
  0083 e70c     [3]             STA   12,X
  182:      len--;
  183:      
  184:      if((len == 0) && (flags & gPrtHexNewLine_c))
  0085 6b0828   [7]             DBNZ  8,X,LB0 ;abs = 00b0
  0088 e607     [3]             LDA   7,X
  008a a502     [2]             BIT   #2
  008c 2722     [3]             BEQ   LB0 ;abs = 00b0
  185:       {
  186:        hexString[i++] = '\n';
  008e e601     [3]             LDA   1,X
  0090 4c       [1]             INCA  
  0091 af02     [2]             AIX   #2
  0093 87       [2]             PSHA  
  0094 9f       [1]             TXA   
  0095 9eeb03   [4]             ADD   3,SP
  0098 87       [2]             PSHA  
  0099 8b       [2]             PSHH  
  009a 86       [3]             PULA  
  009b a900     [2]             ADC   #0
  009d 87       [2]             PSHA  
  009e 8a       [3]             PULH  
  009f 88       [3]             PULX  
  00a0 a60a     [2]             LDA   #10
  00a2 f7       [2]             STA   ,X
  187:        hexString[i++] = '\r';
  00a3 95       [2]             TSX   
  00a4 f6       [3]             LDA   ,X
  00a5 4c       [1]             INCA  
  00a6 e702     [3]             STA   2,X
  00a8 ac0000d9 [8]             CALL  UartUtil_PrintHex:217
  00ac 88       [3]             PULX  
  00ad a60d     [2]             LDA   #13
  00af f7       [2]             STA   ,X
  00b0          LB0:    
  188:       }
  189:       /* transmit formatted byte */      
  190:      (void)UartX_Transmit((unsigned char const*)hexString,(index_t)i,UartUtil_TxCallback);   
  00b0 95       [2]             TSX   
  00b1 af02     [2]             AIX   #2
  00b3 89       [2]             PSHX  
  00b4 8b       [2]             PSHH  
  00b5 95       [2]             TSX   
  00b6 e603     [3]             LDA   3,X
  00b8 87       [2]             PSHA  
  00b9 450000   [3]             LDHX  @UartUtil_TxCallback
  00bc 89       [2]             PSHX  
  00bd 8b       [2]             PSHH  
  00be a600     [2]             LDA   @UartUtil_TxCallback:PAGE
  00c0 87       [2]             PSHA  
  00c1 ac000000 [8]             CALL  Uart1_Transmit
  00c5 a706     [2]             AIS   #6
  00c7          LC7:    
  00c7 95       [2]             TSX   
  00c8 6d08     [4]             TST   8,X
  00ca 2703     [3]             BEQ   LCF ;abs = 00cf
  00cc cc0022   [4]             JMP   L22 ;abs = 0022
  00cf          LCF:    
  191:    }
  192:    /* wait to complete the last transmission */
  193:    while (UartX_IsTxActive());   
  00cf ac000000 [8]             CALL  Uart1_IsTxActive
  00d3 4d       [1]             TSTA  
  00d4 26f9     [3]             BNE   LCF ;abs = 00cf
  194:  }
  00d6 a709     [2]             AIS   #9
  00d8 8d       [7]             RTC   
  00d9          LD9:    
  00d9 af03     [2]             AIX   #3
  00db 9f       [1]             TXA   
  00dc 8b       [2]             PSHH  
  00dd 95       [2]             TSX   
  00de eb04     [3]             ADD   4,X
  00e0 e704     [3]             STA   4,X
  00e2 86       [3]             PULA  
  00e3 a900     [2]             ADC   #0
  00e5 87       [2]             PSHA  
  00e6 8a       [3]             PULH  
  00e7 8d       [7]             RTC   
  195:  #ifdef MEMORY_MODEL_BANKED
  196:  #pragma CODE_SEG DEFAULT
  197:  #endif
  198:  
  199:  /************************************************************************************/
  200:  
  201:  #ifdef MEMORY_MODEL_BANKED
  202:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  203:  #endif
  204:  bool_t UartUtil_CheckIdle(void)
  205:  {   
  206:      return FALSE;  
  0000 4f       [1]             CLRA  
  207:  }
  0001 8d       [7]             RTC   
  208:  #ifdef MEMORY_MODEL_BANKED
  209:  #pragma CODE_SEG DEFAULT
  210:  #endif
  211:  
  212:  /************************************************************************************/
  213:  
  214:  #ifdef MEMORY_MODEL_BANKED
  215:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  216:  #endif
  217:  uint8_t UartUtil_Poll(uint8_t * pBuffer){
  218:    (void)pBuffer;
  219:    return FALSE; 
  0000 4f       [1]             CLRA  
  220:  }
  0001 8d       [7]             RTC   
  221:  #ifdef MEMORY_MODEL_BANKED
  222:  #pragma CODE_SEG DEFAULT
  223:  #endif
  224:  
  225:  /************************************************************************************/
  226:  
  227:  #ifdef MEMORY_MODEL_BANKED
  228:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  229:  #endif
  230:  uint8_t UartUtil_PollMessage(uint8_t * pBuffer){
  231:    (void)pBuffer;
  232:    return FALSE;   
  0000 4f       [1]             CLRA  
  233:  }
  0001 8d       [7]             RTC   
  234:  #ifdef MEMORY_MODEL_BANKED
  235:  #pragma CODE_SEG DEFAULT
  236:  #endif
  237:  
  238:  /************************************************************************************/
  239:  
  240:  #ifdef MEMORY_MODEL_BANKED
  241:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  242:  #endif
  243:  void UartUtil_ConfigureStopMode(bool_t enterStopMode){
  244:  (void)enterStopMode;  
  245:  }
  0000 8d       [7]             RTC   
  246:  
  247:  #else /* gUart1_Enabled_d || gUart2_Enabled_d */
  248:  
  249:  /* Create  dummy functions  */
  250:  void UartUtil_Print(char * pString, uartUtilBlock_t allowToBlock)
  251:  {
  252:    /* Avoid compiler warning */
  253:    (void)pString;
  254:    (void)allowToBlock;
  255:  }
  256:  #ifdef MEMORY_MODEL_BANKED
  257:  #pragma CODE_SEG DEFAULT
  258:  #endif
  259:  
  260:  /************************************************************************************/
  261:  
  262:  #ifdef MEMORY_MODEL_BANKED
  263:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  264:  #endif
  265:  void UartUtil_PrintHex(uint8_t *hex, uint8_t len, uint8_t flags)
  266:  {
  267:    /* Avoid compiler warning */
  268:    (void)hex;
  269:    (void)len;
  270:    (void)flags;
  271:  }
  272:  #ifdef MEMORY_MODEL_BANKED
  273:  #pragma CODE_SEG DEFAULT
  274:  #endif
  275:  
  276:  /************************************************************************************/
  277:  
  278:  #ifdef MEMORY_MODEL_BANKED
  279:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  280:  #endif
  281:  void UartUtil_Tx(uint8_t * pData, uint8_t length){
  282:    /* Avoid compiler warning */
  283:    (void)pData;
  284:    (void)length;
  285:  }
  286:  #ifdef MEMORY_MODEL_BANKED
  287:  #pragma CODE_SEG DEFAULT
  288:  #endif
  289:  
  290:  /************************************************************************************/
  291:  
  292:  #ifdef MEMORY_MODEL_BANKED
  293:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  294:  #endif
  295:  bool_t UartUtil_CheckIdle(void)
  296:  {
  297:     return FALSE;
  298:  }
  299:  #ifdef MEMORY_MODEL_BANKED
  300:  #pragma CODE_SEG DEFAULT
  301:  #endif
  302:  
  303:  /************************************************************************************/
  304:  
  305:  #ifdef MEMORY_MODEL_BANKED
  306:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  307:  #endif
  308:  uint8_t UartUtil_Poll(uint8_t * pBuffer){
  309:    (void)pBuffer;
  310:    return FALSE; 
  311:  }
  312:  #ifdef MEMORY_MODEL_BANKED
  313:  #pragma CODE_SEG DEFAULT
  314:  #endif
  315:  
  316:  /************************************************************************************/
  317:  
  318:  #ifdef MEMORY_MODEL_BANKED
  319:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  320:  #endif
  321:  uint8_t UartUtil_PollMessage(uint8_t * pBuffer){
  322:    (void)pBuffer;
  323:    return FALSE;   
  324:  }
  325:  #ifdef MEMORY_MODEL_BANKED
  326:  #pragma CODE_SEG DEFAULT
  327:  #endif
  328:  
  329:  /************************************************************************************/
  330:  
  331:  #ifdef MEMORY_MODEL_BANKED
  332:  #pragma CODE_SEG __FAR_SEG PAGED_ROM
  333:  #endif
  334:  void UartUtil_ConfigureStopMode(bool_t enterStopMode){
  335:  (void)enterStopMode;  
  336:  }
  337:  #ifdef MEMORY_MODEL_BANKED
  338:  #pragma CODE_SEG DEFAULT
  339:  #endif
  340:  
  341:  #endif  /* gUart1_Enabled_d || gUart2_Enabled_d */
